-- MySQL dump 10.13  Distrib 5.7.30, for Linux (x86_64)
--
-- Host: localhost    Database: 
-- ------------------------------------------------------
-- Server version	5.7.30-0ubuntu0.18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `hbnb_dev_db`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbnb_dev_db` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbnb_dev_db`;

--
-- Table structure for table `amenities`
--

DROP TABLE IF EXISTS `amenities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `amenities` (
  `id` varchar(60) NOT NULL,
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `name` varchar(128) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `amenities`
--

LOCK TABLES `amenities` WRITE;
/*!40000 ALTER TABLE `amenities` DISABLE KEYS */;
INSERT INTO `amenities` VALUES ('821a55f4-7d82-47d9-b54c-a76916479551','2017-03-25 19:44:42','2017-03-25 19:44:42','Wifi'),('821a55f4-7d82-47d9-b54c-a76916479552','2017-03-25 19:44:42','2017-03-25 19:44:42','Pets friendly'),('821a55f4-7d82-47d9-b54c-a76916479553','2017-03-25 19:44:42','2017-03-25 19:44:42','Elevator in building'),('821a55f4-7d82-47d9-b54c-a76916479554','2017-03-25 19:44:42','2017-03-25 19:44:42','Doorman'),('821a55f4-7d82-47d9-b54c-a76916479555','2017-03-25 19:44:42','2017-03-25 19:44:42','Cable TV'),('821a55f4-7d82-47d9-b54c-a76916479556','2017-03-25 19:44:42','2017-03-25 19:44:42','Dryer'),('821a55f4-7d82-47d9-b54c-a76916479557','2017-03-25 19:44:42','2017-03-25 19:44:42','Hair dryer'),('821a55f4-7d82-47d9-b54c-a76916479558','2017-03-25 19:44:42','2017-03-25 19:44:42','Iron'),('821a55f4-7d82-47d9-b54c-a76916479559','2017-03-25 19:44:42','2017-03-25 19:44:42','Washer'),('821a55f4-7d82-47d9-b54c-a76916479560','2017-03-25 19:44:42','2017-03-25 19:44:42','Laundry room'),('821a55f4-7d82-47d9-b54c-a76916479561','2017-03-25 19:44:42','2017-03-25 19:44:42','Air conditioning'),('821a55f4-7d82-47d9-b54c-a76916479562','2017-03-25 19:44:42','2017-03-25 19:44:42','Hot tub'),('821a55f4-7d82-47d9-b54c-a76916479563','2017-03-25 19:44:42','2017-03-25 19:44:42','Smoking allowed');
/*!40000 ALTER TABLE `amenities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cities`
--

DROP TABLE IF EXISTS `cities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cities` (
  `id` varchar(60) NOT NULL,
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `name` varchar(128) NOT NULL,
  `state_id` varchar(60) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `state_id` (`state_id`),
  CONSTRAINT `cities_ibfk_1` FOREIGN KEY (`state_id`) REFERENCES `states` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cities`
--

LOCK TABLES `cities` WRITE;
/*!40000 ALTER TABLE `cities` DISABLE KEYS */;
INSERT INTO `cities` VALUES ('521a55f4-7d82-47d9-b54c-a76916479545','2017-03-25 19:44:42','2017-03-25 19:44:42','Akron','421a55f4-7d82-47d9-b54c-a76916479545'),('521a55f4-7d82-47d9-b54c-a76916479546','2017-03-25 19:44:42','2017-03-25 19:44:42','Douglas','421a55f4-7d82-47d9-b54c-a76916479546'),('521a55f4-7d82-47d9-b54c-a76916479547','2017-03-25 19:44:42','2017-03-25 19:44:42','San Francisco','421a55f4-7d82-47d9-b54c-a76916479547'),('521a55f4-7d82-47d9-b54c-a76916479548','2017-03-25 19:44:42','2017-03-25 19:44:42','Denver','421a55f4-7d82-47d9-b54c-a76916479548'),('521a55f4-7d82-47d9-b54c-a76916479549','2017-03-25 19:44:42','2017-03-25 19:44:42','Miami','421a55f4-7d82-47d9-b54c-a76916479549'),('521a55f4-7d82-47d9-b54c-a76916479551','2017-03-25 19:44:42','2017-03-25 19:44:42','Honolulu','421a55f4-7d82-47d9-b54c-a76916479551'),('521a55f4-7d82-47d9-b54c-a76916479552','2017-03-25 19:44:42','2017-03-25 19:44:42','Chicago','421a55f4-7d82-47d9-b54c-a76916479552'),('521a55f4-7d82-47d9-b54c-a76916479554','2017-03-25 19:44:42','2017-03-25 19:44:42','New Orleans','421a55f4-7d82-47d9-b54c-a76916479554'),('521a55f4-7d82-47d9-b54c-a76916479555','2017-03-25 19:44:42','2017-03-25 19:44:42','Saint Paul','421a55f4-7d82-47d9-b54c-a76916479555'),('521a55f4-7d82-47d9-b54c-a76916479556','2017-03-25 19:44:42','2017-03-25 19:44:42','Jackson','421a55f4-7d82-47d9-b54c-a76916479556'),('521a55f4-7d82-47d9-b54c-a76916479557','2017-03-25 19:44:42','2017-03-25 19:44:42','Portland','421a55f4-7d82-47d9-b54c-a76916479557'),('531a55f4-7d82-47d9-b54c-a76916479545','2017-03-25 19:44:42','2017-03-25 19:44:42','Babbie','421a55f4-7d82-47d9-b54c-a76916479545'),('531a55f4-7d82-47d9-b54c-a76916479546','2017-03-25 19:44:42','2017-03-25 19:44:42','Kearny','421a55f4-7d82-47d9-b54c-a76916479546'),('531a55f4-7d82-47d9-b54c-a76916479547','2017-03-25 19:44:42','2017-03-25 19:44:42','San Jose','421a55f4-7d82-47d9-b54c-a76916479547'),('531a55f4-7d82-47d9-b54c-a76916479549','2017-03-25 19:44:42','2017-03-25 19:44:42','Orlando','421a55f4-7d82-47d9-b54c-a76916479549'),('531a55f4-7d82-47d9-b54c-a76916479551','2017-03-25 19:44:42','2017-03-25 19:44:42','Kailua','421a55f4-7d82-47d9-b54c-a76916479551'),('531a55f4-7d82-47d9-b54c-a76916479552','2017-03-25 19:44:42','2017-03-25 19:44:42','Peoria','421a55f4-7d82-47d9-b54c-a76916479552'),('531a55f4-7d82-47d9-b54c-a76916479554','2017-03-25 19:44:42','2017-03-25 19:44:42','Baton rouge','421a55f4-7d82-47d9-b54c-a76916479554'),('531a55f4-7d82-47d9-b54c-a76916479556','2017-03-25 19:44:42','2017-03-25 19:44:42','Tupelo','421a55f4-7d82-47d9-b54c-a76916479556'),('531a55f4-7d82-47d9-b54c-a76916479557','2017-03-25 19:44:42','2017-03-25 19:44:42','Eugene','421a55f4-7d82-47d9-b54c-a76916479557'),('541a55f4-7d82-47d9-b54c-a76916479545','2017-03-25 19:44:42','2017-03-25 19:44:42','Calera','421a55f4-7d82-47d9-b54c-a76916479545'),('541a55f4-7d82-47d9-b54c-a76916479546','2017-03-25 19:44:42','2017-03-25 19:44:42','Tempe','421a55f4-7d82-47d9-b54c-a76916479546'),('541a55f4-7d82-47d9-b54c-a76916479547','2017-03-25 19:44:42','2017-03-25 19:44:42','Fremont','421a55f4-7d82-47d9-b54c-a76916479547'),('541a55f4-7d82-47d9-b54c-a76916479551','2017-03-25 19:44:42','2017-03-25 19:44:42','Pearl city','421a55f4-7d82-47d9-b54c-a76916479551'),('541a55f4-7d82-47d9-b54c-a76916479552','2017-03-25 19:44:42','2017-03-25 19:44:42','Naperville','421a55f4-7d82-47d9-b54c-a76916479552'),('541a55f4-7d82-47d9-b54c-a76916479554','2017-03-25 19:44:42','2017-03-25 19:44:42','Lafayette','421a55f4-7d82-47d9-b54c-a76916479554'),('541a55f4-7d82-47d9-b54c-a76916479556','2017-03-25 19:44:42','2017-03-25 19:44:42','Meridian','421a55f4-7d82-47d9-b54c-a76916479556'),('551a55f4-7d82-47d9-b54c-a76916479545','2017-03-25 19:44:42','2017-03-25 19:44:42','Fairfield','421a55f4-7d82-47d9-b54c-a76916479545'),('551a55f4-7d82-47d9-b54c-a76916479547','2017-03-25 19:44:42','2017-03-25 19:44:42','Napa','421a55f4-7d82-47d9-b54c-a76916479547'),('551a55f4-7d82-47d9-b54c-a76916479552','2017-03-25 19:44:42','2017-03-25 19:44:42','Urbana','421a55f4-7d82-47d9-b54c-a76916479552'),('561a55f4-7d82-47d9-b54c-a76916479547','2017-03-25 19:44:42','2017-03-25 19:44:42','Sonoma','421a55f4-7d82-47d9-b54c-a76916479547'),('561a55f4-7d82-47d9-b54c-a76916479552','2017-03-25 19:44:42','2017-03-25 19:44:42','Joliet','421a55f4-7d82-47d9-b54c-a76916479552');
/*!40000 ALTER TABLE `cities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `place_amenity`
--

DROP TABLE IF EXISTS `place_amenity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `place_amenity` (
  `place_id` varchar(60) NOT NULL,
  `amenity_id` varchar(60) NOT NULL,
  PRIMARY KEY (`place_id`,`amenity_id`),
  KEY `amenity_id` (`amenity_id`),
  CONSTRAINT `place_amenity_ibfk_1` FOREIGN KEY (`place_id`) REFERENCES `places` (`id`),
  CONSTRAINT `place_amenity_ibfk_2` FOREIGN KEY (`amenity_id`) REFERENCES `amenities` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `place_amenity`
--

LOCK TABLES `place_amenity` WRITE;
/*!40000 ALTER TABLE `place_amenity` DISABLE KEYS */;
INSERT INTO `place_amenity` VALUES ('45101fab-c6a2-4f63-9fa9-64d9687e6ee4','821a55f4-7d82-47d9-b54c-a76916479551'),('45101fab-c6a2-4f63-9fa9-64d9687e6ee4','821a55f4-7d82-47d9-b54c-a76916479552');
/*!40000 ALTER TABLE `place_amenity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `places`
--

DROP TABLE IF EXISTS `places`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `places` (
  `id` varchar(60) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `city_id` varchar(60) NOT NULL,
  `user_id` varchar(60) NOT NULL,
  `name` varchar(128) NOT NULL,
  `description` varchar(1024) DEFAULT NULL,
  `number_rooms` int(11) NOT NULL,
  `number_bathrooms` int(11) NOT NULL,
  `max_guest` int(11) NOT NULL,
  `price_by_night` int(11) NOT NULL,
  `latitude` float DEFAULT NULL,
  `longitude` float DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`),
  KEY `city_id` (`city_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `places_ibfk_1` FOREIGN KEY (`city_id`) REFERENCES `cities` (`id`),
  CONSTRAINT `places_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `places`
--

LOCK TABLES `places` WRITE;
/*!40000 ALTER TABLE `places` DISABLE KEYS */;
INSERT INTO `places` VALUES ('45101fab-c6a2-4f63-9fa9-64d9687e6ee4','2020-05-16 12:06:27','2020-05-16 12:06:27','561a55f4-7d82-47d9-b54c-a76916479547','76a8b1df-47bf-498e-81f0-3aca87b7f3f9','Lovely place',NULL,3,1,6,120,37.774,-122.431);
/*!40000 ALTER TABLE `places` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reviews`
--

DROP TABLE IF EXISTS `reviews`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reviews` (
  `id` varchar(60) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `place_id` varchar(60) NOT NULL,
  `user_id` varchar(60) NOT NULL,
  `text` varchar(1024) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`),
  KEY `place_id` (`place_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `reviews_ibfk_1` FOREIGN KEY (`place_id`) REFERENCES `places` (`id`),
  CONSTRAINT `reviews_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reviews`
--

LOCK TABLES `reviews` WRITE;
/*!40000 ALTER TABLE `reviews` DISABLE KEYS */;
/*!40000 ALTER TABLE `reviews` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` varchar(60) NOT NULL,
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `name` varchar(128) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES ('421a55f4-7d82-47d9-b54c-a76916479545','2017-03-25 19:44:42','2017-03-25 19:44:42','Alabama'),('421a55f4-7d82-47d9-b54c-a76916479546','2017-03-25 19:44:42','2017-03-25 19:44:42','Arizona'),('421a55f4-7d82-47d9-b54c-a76916479547','2017-03-25 19:44:42','2017-03-25 19:44:42','California'),('421a55f4-7d82-47d9-b54c-a76916479548','2017-03-25 19:44:42','2017-03-25 19:44:42','Colorado'),('421a55f4-7d82-47d9-b54c-a76916479549','2017-03-25 19:44:42','2017-03-25 19:44:42','Florida'),('421a55f4-7d82-47d9-b54c-a76916479550','2017-03-25 19:44:42','2017-03-25 19:44:42','Georgia'),('421a55f4-7d82-47d9-b54c-a76916479551','2017-03-25 19:44:42','2017-03-25 19:44:42','Hawaii'),('421a55f4-7d82-47d9-b54c-a76916479552','2017-03-25 19:44:42','2017-03-25 19:44:42','Illinois'),('421a55f4-7d82-47d9-b54c-a76916479553','2017-03-25 19:44:42','2017-03-25 19:44:42','Indiana'),('421a55f4-7d82-47d9-b54c-a76916479554','2017-03-25 19:44:42','2017-03-25 19:44:42','Louisiana'),('421a55f4-7d82-47d9-b54c-a76916479555','2017-03-25 19:44:42','2017-03-25 19:44:42','Minnesota'),('421a55f4-7d82-47d9-b54c-a76916479556','2017-03-25 19:44:42','2017-03-25 19:44:42','Mississippi'),('421a55f4-7d82-47d9-b54c-a76916479557','2017-03-25 19:44:42','2017-03-25 19:44:42','Oregon');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` varchar(60) NOT NULL,
  `created_at` datetime NOT NULL,
  `updated_at` datetime NOT NULL,
  `email` varchar(128) NOT NULL,
  `password` varchar(128) NOT NULL,
  `first_name` varchar(128) DEFAULT NULL,
  `last_name` varchar(128) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES ('76a8b1df-47bf-498e-81f0-3aca87b7f3f9','2020-05-16 12:03:13','2020-05-16 12:03:13','gui@hbtn.io','f4ce007d8e84e0910fbdd7a06fa1692d','Guillaume','Snow');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbnb_test_db`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbnb_test_db` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbnb_test_db`;

--
-- Current Database: `hbtn_0c_0`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0c_0` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0c_0`;

--
-- Table structure for table `first_table`
--

DROP TABLE IF EXISTS `first_table`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `first_table` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(256) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `first_table`
--

LOCK TABLES `first_table` WRITE;
/*!40000 ALTER TABLE `first_table` DISABLE KEYS */;
INSERT INTO `first_table` VALUES (89,'Holberton School');
/*!40000 ALTER TABLE `first_table` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `second_table`
--

DROP TABLE IF EXISTS `second_table`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `second_table` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(256) DEFAULT NULL,
  `score` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `second_table`
--

LOCK TABLES `second_table` WRITE;
/*!40000 ALTER TABLE `second_table` DISABLE KEYS */;
INSERT INTO `second_table` VALUES (1,'John',10),(3,'Bob',10),(4,'George',8);
/*!40000 ALTER TABLE `second_table` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `temperatures`
--

DROP TABLE IF EXISTS `temperatures`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `temperatures` (
  `city` varchar(256) DEFAULT NULL,
  `state` varchar(128) DEFAULT NULL,
  `year` int(11) DEFAULT NULL,
  `month` int(11) DEFAULT NULL,
  `value` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `temperatures`
--

LOCK TABLES `temperatures` WRITE;
/*!40000 ALTER TABLE `temperatures` DISABLE KEYS */;
INSERT INTO `temperatures` VALUES ('San Francisco','CA',2000,1,45),('San Francisco','CA',2000,2,94),('San Francisco','CA',2000,3,60),('San Francisco','CA',2000,4,95),('San Francisco','CA',2000,5,72),('San Francisco','CA',2000,6,70),('San Francisco','CA',2000,7,88),('San Francisco','CA',2000,8,58),('San Francisco','CA',2000,9,90),('San Francisco','CA',2000,10,80),('San Francisco','CA',2000,11,52),('San Francisco','CA',2000,12,93),('San Francisco','CA',2001,1,64),('San Francisco','CA',2001,2,91),('San Francisco','CA',2001,3,55),('San Francisco','CA',2001,4,107),('San Francisco','CA',2001,5,54),('San Francisco','CA',2001,6,51),('San Francisco','CA',2001,7,53),('San Francisco','CA',2001,8,41),('San Francisco','CA',2001,9,44),('San Francisco','CA',2001,10,93),('San Francisco','CA',2001,11,70),('San Francisco','CA',2001,12,46),('San Francisco','CA',2002,1,102),('San Francisco','CA',2002,2,70),('San Francisco','CA',2002,3,39),('San Francisco','CA',2002,4,90),('San Francisco','CA',2002,5,100),('San Francisco','CA',2002,6,77),('San Francisco','CA',2002,7,54),('San Francisco','CA',2002,8,53),('San Francisco','CA',2002,9,42),('San Francisco','CA',2002,10,61),('San Francisco','CA',2002,11,78),('San Francisco','CA',2002,12,87),('San Francisco','CA',2003,1,94),('San Francisco','CA',2003,2,110),('San Francisco','CA',2003,3,104),('San Francisco','CA',2003,4,98),('San Francisco','CA',2003,5,73),('San Francisco','CA',2003,6,53),('San Francisco','CA',2003,7,49),('San Francisco','CA',2003,8,39),('San Francisco','CA',2003,9,107),('San Francisco','CA',2003,10,65),('San Francisco','CA',2003,11,40),('San Francisco','CA',2003,12,82),('San Francisco','CA',2004,1,89),('San Francisco','CA',2004,2,58),('San Francisco','CA',2004,3,73),('San Francisco','CA',2004,4,30),('San Francisco','CA',2004,5,110),('San Francisco','CA',2004,6,109),('San Francisco','CA',2004,7,91),('San Francisco','CA',2004,8,65),('San Francisco','CA',2004,9,57),('San Francisco','CA',2004,10,95),('San Francisco','CA',2004,11,68),('San Francisco','CA',2004,12,105),('San Francisco','CA',2005,1,84),('San Francisco','CA',2005,2,52),('San Francisco','CA',2005,3,76),('San Francisco','CA',2005,4,33),('San Francisco','CA',2005,5,82),('San Francisco','CA',2005,6,61),('San Francisco','CA',2005,7,108),('San Francisco','CA',2005,8,110),('San Francisco','CA',2005,9,106),('San Francisco','CA',2005,10,101),('San Francisco','CA',2005,11,87),('San Francisco','CA',2005,12,59),('San Francisco','CA',2006,1,57),('San Francisco','CA',2006,2,44),('San Francisco','CA',2006,3,55),('San Francisco','CA',2006,4,38),('San Francisco','CA',2006,5,95),('San Francisco','CA',2006,6,58),('San Francisco','CA',2006,7,89),('San Francisco','CA',2006,8,32),('San Francisco','CA',2006,9,46),('San Francisco','CA',2006,10,78),('San Francisco','CA',2006,11,85),('San Francisco','CA',2006,12,38),('San Francisco','CA',2007,1,64),('San Francisco','CA',2007,2,47),('San Francisco','CA',2007,3,88),('San Francisco','CA',2007,4,78),('San Francisco','CA',2007,5,34),('San Francisco','CA',2007,6,89),('San Francisco','CA',2007,7,79),('San Francisco','CA',2007,8,60),('San Francisco','CA',2007,9,33),('San Francisco','CA',2007,10,53),('San Francisco','CA',2007,11,60),('San Francisco','CA',2007,12,84),('San Francisco','CA',2008,1,94),('San Francisco','CA',2008,2,41),('San Francisco','CA',2008,3,85),('San Francisco','CA',2008,4,93),('San Francisco','CA',2008,5,51),('San Francisco','CA',2008,6,109),('San Francisco','CA',2008,7,100),('San Francisco','CA',2008,8,78),('San Francisco','CA',2008,9,73),('San Francisco','CA',2008,10,69),('San Francisco','CA',2008,11,55),('San Francisco','CA',2008,12,84),('San Francisco','CA',2009,1,54),('San Francisco','CA',2009,2,108),('San Francisco','CA',2009,3,96),('San Francisco','CA',2009,4,31),('San Francisco','CA',2009,5,82),('San Francisco','CA',2009,6,41),('San Francisco','CA',2009,7,84),('San Francisco','CA',2009,8,53),('San Francisco','CA',2009,9,54),('San Francisco','CA',2009,10,62),('San Francisco','CA',2009,11,64),('San Francisco','CA',2009,12,91),('San Francisco','CA',2010,1,73),('San Francisco','CA',2010,2,88),('San Francisco','CA',2010,3,92),('San Francisco','CA',2010,4,93),('San Francisco','CA',2010,5,52),('San Francisco','CA',2010,6,36),('San Francisco','CA',2010,7,97),('San Francisco','CA',2010,8,86),('San Francisco','CA',2010,9,96),('San Francisco','CA',2010,10,34),('San Francisco','CA',2010,11,82),('San Francisco','CA',2010,12,55),('San Francisco','CA',2011,1,50),('San Francisco','CA',2011,2,54),('San Francisco','CA',2011,3,96),('San Francisco','CA',2011,4,65),('San Francisco','CA',2011,5,82),('San Francisco','CA',2011,6,72),('San Francisco','CA',2011,7,63),('San Francisco','CA',2011,8,43),('San Francisco','CA',2011,9,91),('San Francisco','CA',2011,10,36),('San Francisco','CA',2011,11,50),('San Francisco','CA',2011,12,90),('San Francisco','CA',2012,1,70),('San Francisco','CA',2012,2,67),('San Francisco','CA',2012,3,82),('San Francisco','CA',2012,4,40),('San Francisco','CA',2012,5,38),('San Francisco','CA',2012,6,81),('San Francisco','CA',2012,7,102),('San Francisco','CA',2012,8,52),('San Francisco','CA',2012,9,96),('San Francisco','CA',2012,10,96),('San Francisco','CA',2012,11,45),('San Francisco','CA',2012,12,89),('San Francisco','CA',2013,1,36),('San Francisco','CA',2013,2,60),('San Francisco','CA',2013,3,95),('San Francisco','CA',2013,4,94),('San Francisco','CA',2013,5,87),('San Francisco','CA',2013,6,54),('San Francisco','CA',2013,7,104),('San Francisco','CA',2013,8,36),('San Francisco','CA',2013,9,64),('San Francisco','CA',2013,10,62),('San Francisco','CA',2013,11,109),('San Francisco','CA',2013,12,100),('San Francisco','CA',2014,1,90),('San Francisco','CA',2014,2,76),('San Francisco','CA',2014,3,79),('San Francisco','CA',2014,4,39),('San Francisco','CA',2014,5,34),('San Francisco','CA',2014,6,91),('San Francisco','CA',2014,7,109),('San Francisco','CA',2014,8,99),('San Francisco','CA',2014,9,58),('San Francisco','CA',2014,10,110),('San Francisco','CA',2014,11,48),('San Francisco','CA',2014,12,98),('San Francisco','CA',2015,1,102),('San Francisco','CA',2015,2,103),('San Francisco','CA',2015,3,48),('San Francisco','CA',2015,4,72),('San Francisco','CA',2015,5,45),('San Francisco','CA',2015,6,53),('San Francisco','CA',2015,7,55),('San Francisco','CA',2015,8,39),('San Francisco','CA',2015,9,69),('San Francisco','CA',2015,10,43),('San Francisco','CA',2015,11,62),('San Francisco','CA',2015,12,57),('San Francisco','CA',2016,1,84),('San Francisco','CA',2016,2,37),('San Francisco','CA',2016,3,73),('San Francisco','CA',2016,4,53),('San Francisco','CA',2016,5,77),('San Francisco','CA',2016,6,100),('San Francisco','CA',2016,7,50),('San Francisco','CA',2016,8,98),('San Francisco','CA',2016,9,82),('San Francisco','CA',2016,10,85),('San Francisco','CA',2016,11,87),('San Francisco','CA',2016,12,64),('San Diego','CA',2000,1,47),('San Diego','CA',2000,2,54),('San Diego','CA',2000,3,82),('San Diego','CA',2000,4,56),('San Diego','CA',2000,5,82),('San Diego','CA',2000,6,43),('San Diego','CA',2000,7,75),('San Diego','CA',2000,8,40),('San Diego','CA',2000,9,93),('San Diego','CA',2000,10,45),('San Diego','CA',2000,11,40),('San Diego','CA',2000,12,44),('San Diego','CA',2001,1,88),('San Diego','CA',2001,2,104),('San Diego','CA',2001,3,67),('San Diego','CA',2001,4,83),('San Diego','CA',2001,5,85),('San Diego','CA',2001,6,30),('San Diego','CA',2001,7,81),('San Diego','CA',2001,8,92),('San Diego','CA',2001,9,30),('San Diego','CA',2001,10,83),('San Diego','CA',2001,11,92),('San Diego','CA',2001,12,84),('San Diego','CA',2002,1,37),('San Diego','CA',2002,2,57),('San Diego','CA',2002,3,38),('San Diego','CA',2002,4,76),('San Diego','CA',2002,5,94),('San Diego','CA',2002,6,97),('San Diego','CA',2002,7,67),('San Diego','CA',2002,8,95),('San Diego','CA',2002,9,77),('San Diego','CA',2002,10,95),('San Diego','CA',2002,11,57),('San Diego','CA',2002,12,34),('San Diego','CA',2003,1,70),('San Diego','CA',2003,2,41),('San Diego','CA',2003,3,38),('San Diego','CA',2003,4,54),('San Diego','CA',2003,5,58),('San Diego','CA',2003,6,86),('San Diego','CA',2003,7,70),('San Diego','CA',2003,8,34),('San Diego','CA',2003,9,93),('San Diego','CA',2003,10,82),('San Diego','CA',2003,11,80),('San Diego','CA',2003,12,83),('San Diego','CA',2004,1,89),('San Diego','CA',2004,2,47),('San Diego','CA',2004,3,36),('San Diego','CA',2004,4,43),('San Diego','CA',2004,5,38),('San Diego','CA',2004,6,89),('San Diego','CA',2004,7,107),('San Diego','CA',2004,8,39),('San Diego','CA',2004,9,54),('San Diego','CA',2004,10,73),('San Diego','CA',2004,11,99),('San Diego','CA',2004,12,98),('San Diego','CA',2005,1,90),('San Diego','CA',2005,2,82),('San Diego','CA',2005,3,31),('San Diego','CA',2005,4,82),('San Diego','CA',2005,5,43),('San Diego','CA',2005,6,83),('San Diego','CA',2005,7,30),('San Diego','CA',2005,8,95),('San Diego','CA',2005,9,68),('San Diego','CA',2005,10,94),('San Diego','CA',2005,11,42),('San Diego','CA',2005,12,78),('San Diego','CA',2006,1,38),('San Diego','CA',2006,2,82),('San Diego','CA',2006,3,59),('San Diego','CA',2006,4,97),('San Diego','CA',2006,5,79),('San Diego','CA',2006,6,39),('San Diego','CA',2006,7,81),('San Diego','CA',2006,8,68),('San Diego','CA',2006,9,45),('San Diego','CA',2006,10,88),('San Diego','CA',2006,11,88),('San Diego','CA',2006,12,35),('San Diego','CA',2007,1,48),('San Diego','CA',2007,2,110),('San Diego','CA',2007,3,95),('San Diego','CA',2007,4,99),('San Diego','CA',2007,5,80),('San Diego','CA',2007,6,31),('San Diego','CA',2007,7,100),('San Diego','CA',2007,8,72),('San Diego','CA',2007,9,80),('San Diego','CA',2007,10,95),('San Diego','CA',2007,11,63),('San Diego','CA',2007,12,62),('San Diego','CA',2008,1,80),('San Diego','CA',2008,2,40),('San Diego','CA',2008,3,103),('San Diego','CA',2008,4,63),('San Diego','CA',2008,5,101),('San Diego','CA',2008,6,80),('San Diego','CA',2008,7,110),('San Diego','CA',2008,8,97),('San Diego','CA',2008,9,96),('San Diego','CA',2008,10,73),('San Diego','CA',2008,11,35),('San Diego','CA',2008,12,96),('San Diego','CA',2009,1,105),('San Diego','CA',2009,2,41),('San Diego','CA',2009,3,83),('San Diego','CA',2009,4,105),('San Diego','CA',2009,5,70),('San Diego','CA',2009,6,90),('San Diego','CA',2009,7,70),('San Diego','CA',2009,8,37),('San Diego','CA',2009,9,86),('San Diego','CA',2009,10,64),('San Diego','CA',2009,11,106),('San Diego','CA',2009,12,34),('San Diego','CA',2010,1,30),('San Diego','CA',2010,2,62),('San Diego','CA',2010,3,78),('San Diego','CA',2010,4,107),('San Diego','CA',2010,5,57),('San Diego','CA',2010,6,62),('San Diego','CA',2010,7,59),('San Diego','CA',2010,8,95),('San Diego','CA',2010,9,80),('San Diego','CA',2010,10,77),('San Diego','CA',2010,11,63),('San Diego','CA',2010,12,41),('San Diego','CA',2011,1,58),('San Diego','CA',2011,2,84),('San Diego','CA',2011,3,54),('San Diego','CA',2011,4,64),('San Diego','CA',2011,5,30),('San Diego','CA',2011,6,104),('San Diego','CA',2011,7,73),('San Diego','CA',2011,8,62),('San Diego','CA',2011,9,85),('San Diego','CA',2011,10,59),('San Diego','CA',2011,11,108),('San Diego','CA',2011,12,95),('San Diego','CA',2012,1,32),('San Diego','CA',2012,2,47),('San Diego','CA',2012,3,102),('San Diego','CA',2012,4,36),('San Diego','CA',2012,5,36),('San Diego','CA',2012,6,45),('San Diego','CA',2012,7,98),('San Diego','CA',2012,8,57),('San Diego','CA',2012,9,73),('San Diego','CA',2012,10,102),('San Diego','CA',2012,11,57),('San Diego','CA',2012,12,56),('San Diego','CA',2013,1,40),('San Diego','CA',2013,2,110),('San Diego','CA',2013,3,52),('San Diego','CA',2013,4,34),('San Diego','CA',2013,5,64),('San Diego','CA',2013,6,85),('San Diego','CA',2013,7,81),('San Diego','CA',2013,8,96),('San Diego','CA',2013,9,100),('San Diego','CA',2013,10,79),('San Diego','CA',2013,11,89),('San Diego','CA',2013,12,63),('San Diego','CA',2014,1,46),('San Diego','CA',2014,2,107),('San Diego','CA',2014,3,50),('San Diego','CA',2014,4,50),('San Diego','CA',2014,5,64),('San Diego','CA',2014,6,36),('San Diego','CA',2014,7,110),('San Diego','CA',2014,8,57),('San Diego','CA',2014,9,77),('San Diego','CA',2014,10,104),('San Diego','CA',2014,11,92),('San Diego','CA',2014,12,33),('San Diego','CA',2015,1,83),('San Diego','CA',2015,2,39),('San Diego','CA',2015,3,99),('San Diego','CA',2015,4,74),('San Diego','CA',2015,5,43),('San Diego','CA',2015,6,48),('San Diego','CA',2015,7,90),('San Diego','CA',2015,8,55),('San Diego','CA',2015,9,93),('San Diego','CA',2015,10,87),('San Diego','CA',2015,11,45),('San Diego','CA',2015,12,73),('San Diego','CA',2016,1,64),('San Diego','CA',2016,2,72),('San Diego','CA',2016,3,80),('San Diego','CA',2016,4,110),('San Diego','CA',2016,5,36),('San Diego','CA',2016,6,73),('San Diego','CA',2016,7,38),('San Diego','CA',2016,8,78),('San Diego','CA',2016,9,32),('San Diego','CA',2016,10,96),('San Diego','CA',2016,11,93),('San Diego','CA',2016,12,98),('Sunnyvale','CA',2000,1,39),('Sunnyvale','CA',2000,2,74),('Sunnyvale','CA',2000,3,67),('Sunnyvale','CA',2000,4,56),('Sunnyvale','CA',2000,5,101),('Sunnyvale','CA',2000,6,78),('Sunnyvale','CA',2000,7,97),('Sunnyvale','CA',2000,8,62),('Sunnyvale','CA',2000,9,40),('Sunnyvale','CA',2000,10,106),('Sunnyvale','CA',2000,11,94),('Sunnyvale','CA',2000,12,39),('Sunnyvale','CA',2001,1,88),('Sunnyvale','CA',2001,2,31),('Sunnyvale','CA',2001,3,65),('Sunnyvale','CA',2001,4,42),('Sunnyvale','CA',2001,5,107),('Sunnyvale','CA',2001,6,61),('Sunnyvale','CA',2001,7,77),('Sunnyvale','CA',2001,8,45),('Sunnyvale','CA',2001,9,63),('Sunnyvale','CA',2001,10,35),('Sunnyvale','CA',2001,11,53),('Sunnyvale','CA',2001,12,43),('Sunnyvale','CA',2002,1,33),('Sunnyvale','CA',2002,2,101),('Sunnyvale','CA',2002,3,86),('Sunnyvale','CA',2002,4,41),('Sunnyvale','CA',2002,5,83),('Sunnyvale','CA',2002,6,83),('Sunnyvale','CA',2002,7,85),('Sunnyvale','CA',2002,8,77),('Sunnyvale','CA',2002,9,52),('Sunnyvale','CA',2002,10,57),('Sunnyvale','CA',2002,11,53),('Sunnyvale','CA',2002,12,76),('Sunnyvale','CA',2003,1,94),('Sunnyvale','CA',2003,2,88),('Sunnyvale','CA',2003,3,102),('Sunnyvale','CA',2003,4,81),('Sunnyvale','CA',2003,5,65),('Sunnyvale','CA',2003,6,72),('Sunnyvale','CA',2003,7,41),('Sunnyvale','CA',2003,8,100),('Sunnyvale','CA',2003,9,63),('Sunnyvale','CA',2003,10,40),('Sunnyvale','CA',2003,11,97),('Sunnyvale','CA',2003,12,52),('Sunnyvale','CA',2004,1,54),('Sunnyvale','CA',2004,2,100),('Sunnyvale','CA',2004,3,45),('Sunnyvale','CA',2004,4,55),('Sunnyvale','CA',2004,5,67),('Sunnyvale','CA',2004,6,87),('Sunnyvale','CA',2004,7,48),('Sunnyvale','CA',2004,8,90),('Sunnyvale','CA',2004,9,40),('Sunnyvale','CA',2004,10,92),('Sunnyvale','CA',2004,11,88),('Sunnyvale','CA',2004,12,76),('Sunnyvale','CA',2005,1,85),('Sunnyvale','CA',2005,2,110),('Sunnyvale','CA',2005,3,110),('Sunnyvale','CA',2005,4,42),('Sunnyvale','CA',2005,5,61),('Sunnyvale','CA',2005,6,67),('Sunnyvale','CA',2005,7,42),('Sunnyvale','CA',2005,8,102),('Sunnyvale','CA',2005,9,81),('Sunnyvale','CA',2005,10,97),('Sunnyvale','CA',2005,11,100),('Sunnyvale','CA',2005,12,72),('Sunnyvale','CA',2006,1,36),('Sunnyvale','CA',2006,2,94),('Sunnyvale','CA',2006,3,93),('Sunnyvale','CA',2006,4,99),('Sunnyvale','CA',2006,5,42),('Sunnyvale','CA',2006,6,43),('Sunnyvale','CA',2006,7,36),('Sunnyvale','CA',2006,8,82),('Sunnyvale','CA',2006,9,44),('Sunnyvale','CA',2006,10,107),('Sunnyvale','CA',2006,11,74),('Sunnyvale','CA',2006,12,41),('Sunnyvale','CA',2007,1,71),('Sunnyvale','CA',2007,2,37),('Sunnyvale','CA',2007,3,93),('Sunnyvale','CA',2007,4,45),('Sunnyvale','CA',2007,5,60),('Sunnyvale','CA',2007,6,73),('Sunnyvale','CA',2007,7,103),('Sunnyvale','CA',2007,8,86),('Sunnyvale','CA',2007,9,91),('Sunnyvale','CA',2007,10,81),('Sunnyvale','CA',2007,11,104),('Sunnyvale','CA',2007,12,104),('Sunnyvale','CA',2008,1,74),('Sunnyvale','CA',2008,2,98),('Sunnyvale','CA',2008,3,37),('Sunnyvale','CA',2008,4,45),('Sunnyvale','CA',2008,5,38),('Sunnyvale','CA',2008,6,103),('Sunnyvale','CA',2008,7,103),('Sunnyvale','CA',2008,8,102),('Sunnyvale','CA',2008,9,70),('Sunnyvale','CA',2008,10,88),('Sunnyvale','CA',2008,11,93),('Sunnyvale','CA',2008,12,38),('Sunnyvale','CA',2009,1,78),('Sunnyvale','CA',2009,2,81),('Sunnyvale','CA',2009,3,95),('Sunnyvale','CA',2009,4,103),('Sunnyvale','CA',2009,5,54),('Sunnyvale','CA',2009,6,60),('Sunnyvale','CA',2009,7,58),('Sunnyvale','CA',2009,8,60),('Sunnyvale','CA',2009,9,50),('Sunnyvale','CA',2009,10,79),('Sunnyvale','CA',2009,11,89),('Sunnyvale','CA',2009,12,89),('Sunnyvale','CA',2010,1,57),('Sunnyvale','CA',2010,2,55),('Sunnyvale','CA',2010,3,106),('Sunnyvale','CA',2010,4,97),('Sunnyvale','CA',2010,5,47),('Sunnyvale','CA',2010,6,57),('Sunnyvale','CA',2010,7,43),('Sunnyvale','CA',2010,8,76),('Sunnyvale','CA',2010,9,43),('Sunnyvale','CA',2010,10,89),('Sunnyvale','CA',2010,11,65),('Sunnyvale','CA',2010,12,78),('Sunnyvale','CA',2011,1,67),('Sunnyvale','CA',2011,2,68),('Sunnyvale','CA',2011,3,84),('Sunnyvale','CA',2011,4,47),('Sunnyvale','CA',2011,5,108),('Sunnyvale','CA',2011,6,32),('Sunnyvale','CA',2011,7,95),('Sunnyvale','CA',2011,8,40),('Sunnyvale','CA',2011,9,41),('Sunnyvale','CA',2011,10,89),('Sunnyvale','CA',2011,11,53),('Sunnyvale','CA',2011,12,109),('Sunnyvale','CA',2012,1,51),('Sunnyvale','CA',2012,2,56),('Sunnyvale','CA',2012,3,39),('Sunnyvale','CA',2012,4,77),('Sunnyvale','CA',2012,5,44),('Sunnyvale','CA',2012,6,58),('Sunnyvale','CA',2012,7,57),('Sunnyvale','CA',2012,8,84),('Sunnyvale','CA',2012,9,35),('Sunnyvale','CA',2012,10,90),('Sunnyvale','CA',2012,11,40),('Sunnyvale','CA',2012,12,81),('Sunnyvale','CA',2013,1,30),('Sunnyvale','CA',2013,2,107),('Sunnyvale','CA',2013,3,63),('Sunnyvale','CA',2013,4,84),('Sunnyvale','CA',2013,5,94),('Sunnyvale','CA',2013,6,45),('Sunnyvale','CA',2013,7,93),('Sunnyvale','CA',2013,8,67),('Sunnyvale','CA',2013,9,71),('Sunnyvale','CA',2013,10,90),('Sunnyvale','CA',2013,11,64),('Sunnyvale','CA',2013,12,34),('Sunnyvale','CA',2014,1,70),('Sunnyvale','CA',2014,2,41),('Sunnyvale','CA',2014,3,44),('Sunnyvale','CA',2014,4,87),('Sunnyvale','CA',2014,5,97),('Sunnyvale','CA',2014,6,70),('Sunnyvale','CA',2014,7,61),('Sunnyvale','CA',2014,8,81),('Sunnyvale','CA',2014,9,72),('Sunnyvale','CA',2014,10,88),('Sunnyvale','CA',2014,11,108),('Sunnyvale','CA',2014,12,37),('Sunnyvale','CA',2015,1,45),('Sunnyvale','CA',2015,2,39),('Sunnyvale','CA',2015,3,51),('Sunnyvale','CA',2015,4,35),('Sunnyvale','CA',2015,5,94),('Sunnyvale','CA',2015,6,108),('Sunnyvale','CA',2015,7,82),('Sunnyvale','CA',2015,8,50),('Sunnyvale','CA',2015,9,67),('Sunnyvale','CA',2015,10,82),('Sunnyvale','CA',2015,11,50),('Sunnyvale','CA',2015,12,60),('Sunnyvale','CA',2016,1,34),('Sunnyvale','CA',2016,2,110),('Sunnyvale','CA',2016,3,77),('Sunnyvale','CA',2016,4,47),('Sunnyvale','CA',2016,5,84),('Sunnyvale','CA',2016,6,105),('Sunnyvale','CA',2016,7,101),('Sunnyvale','CA',2016,8,64),('Sunnyvale','CA',2016,9,71),('Sunnyvale','CA',2016,10,105),('Sunnyvale','CA',2016,11,91),('Sunnyvale','CA',2016,12,59),('Oakland','CA',2000,1,87),('Oakland','CA',2000,2,44),('Oakland','CA',2000,3,92),('Oakland','CA',2000,4,101),('Oakland','CA',2000,5,93),('Oakland','CA',2000,6,92),('Oakland','CA',2000,7,67),('Oakland','CA',2000,8,88),('Oakland','CA',2000,9,68),('Oakland','CA',2000,10,88),('Oakland','CA',2000,11,55),('Oakland','CA',2000,12,60),('Oakland','CA',2001,1,63),('Oakland','CA',2001,2,49),('Oakland','CA',2001,3,96),('Oakland','CA',2001,4,45),('Oakland','CA',2001,5,45),('Oakland','CA',2001,6,60),('Oakland','CA',2001,7,53),('Oakland','CA',2001,8,64),('Oakland','CA',2001,9,86),('Oakland','CA',2001,10,48),('Oakland','CA',2001,11,54),('Oakland','CA',2001,12,95),('Oakland','CA',2002,1,104),('Oakland','CA',2002,2,82),('Oakland','CA',2002,3,30),('Oakland','CA',2002,4,69),('Oakland','CA',2002,5,97),('Oakland','CA',2002,6,88),('Oakland','CA',2002,7,77),('Oakland','CA',2002,8,46),('Oakland','CA',2002,9,91),('Oakland','CA',2002,10,102),('Oakland','CA',2002,11,65),('Oakland','CA',2002,12,32),('Oakland','CA',2003,1,80),('Oakland','CA',2003,2,93),('Oakland','CA',2003,3,74),('Oakland','CA',2003,4,101),('Oakland','CA',2003,5,88),('Oakland','CA',2003,6,110),('Oakland','CA',2003,7,91),('Oakland','CA',2003,8,65),('Oakland','CA',2003,9,41),('Oakland','CA',2003,10,50),('Oakland','CA',2003,11,59),('Oakland','CA',2003,12,74),('Oakland','CA',2004,1,78),('Oakland','CA',2004,2,34),('Oakland','CA',2004,3,83),('Oakland','CA',2004,4,74),('Oakland','CA',2004,5,77),('Oakland','CA',2004,6,105),('Oakland','CA',2004,7,33),('Oakland','CA',2004,8,73),('Oakland','CA',2004,9,89),('Oakland','CA',2004,10,50),('Oakland','CA',2004,11,91),('Oakland','CA',2004,12,49),('Oakland','CA',2005,1,61),('Oakland','CA',2005,2,59),('Oakland','CA',2005,3,103),('Oakland','CA',2005,4,110),('Oakland','CA',2005,5,82),('Oakland','CA',2005,6,61),('Oakland','CA',2005,7,63),('Oakland','CA',2005,8,79),('Oakland','CA',2005,9,90),('Oakland','CA',2005,10,62),('Oakland','CA',2005,11,70),('Oakland','CA',2005,12,33),('Oakland','CA',2006,1,89),('Oakland','CA',2006,2,108),('Oakland','CA',2006,3,40),('Oakland','CA',2006,4,55),('Oakland','CA',2006,5,104),('Oakland','CA',2006,6,43),('Oakland','CA',2006,7,36),('Oakland','CA',2006,8,55),('Oakland','CA',2006,9,76),('Oakland','CA',2006,10,51),('Oakland','CA',2006,11,43),('Oakland','CA',2006,12,57),('Oakland','CA',2007,1,91),('Oakland','CA',2007,2,68),('Oakland','CA',2007,3,58),('Oakland','CA',2007,4,49),('Oakland','CA',2007,5,46),('Oakland','CA',2007,6,77),('Oakland','CA',2007,7,60),('Oakland','CA',2007,8,100),('Oakland','CA',2007,9,78),('Oakland','CA',2007,10,40),('Oakland','CA',2007,11,43),('Oakland','CA',2007,12,45),('Oakland','CA',2008,1,61),('Oakland','CA',2008,2,49),('Oakland','CA',2008,3,47),('Oakland','CA',2008,4,89),('Oakland','CA',2008,5,75),('Oakland','CA',2008,6,38),('Oakland','CA',2008,7,80),('Oakland','CA',2008,8,106),('Oakland','CA',2008,9,88),('Oakland','CA',2008,10,85),('Oakland','CA',2008,11,70),('Oakland','CA',2008,12,58),('Oakland','CA',2009,1,87),('Oakland','CA',2009,2,86),('Oakland','CA',2009,3,61),('Oakland','CA',2009,4,53),('Oakland','CA',2009,5,88),('Oakland','CA',2009,6,89),('Oakland','CA',2009,7,33),('Oakland','CA',2009,8,57),('Oakland','CA',2009,9,88),('Oakland','CA',2009,10,89),('Oakland','CA',2009,11,48),('Oakland','CA',2009,12,34),('Oakland','CA',2010,1,51),('Oakland','CA',2010,2,54),('Oakland','CA',2010,3,82),('Oakland','CA',2010,4,81),('Oakland','CA',2010,5,94),('Oakland','CA',2010,6,91),('Oakland','CA',2010,7,49),('Oakland','CA',2010,8,74),('Oakland','CA',2010,9,42),('Oakland','CA',2010,10,33),('Oakland','CA',2010,11,105),('Oakland','CA',2010,12,41),('Oakland','CA',2011,1,30),('Oakland','CA',2011,2,103),('Oakland','CA',2011,3,80),('Oakland','CA',2011,4,77),('Oakland','CA',2011,5,107),('Oakland','CA',2011,6,41),('Oakland','CA',2011,7,81),('Oakland','CA',2011,8,57),('Oakland','CA',2011,9,94),('Oakland','CA',2011,10,97),('Oakland','CA',2011,11,32),('Oakland','CA',2011,12,56),('Oakland','CA',2012,1,33),('Oakland','CA',2012,2,84),('Oakland','CA',2012,3,71),('Oakland','CA',2012,4,50),('Oakland','CA',2012,5,79),('Oakland','CA',2012,6,92),('Oakland','CA',2012,7,73),('Oakland','CA',2012,8,47),('Oakland','CA',2012,9,59),('Oakland','CA',2012,10,97),('Oakland','CA',2012,11,46),('Oakland','CA',2012,12,99),('Oakland','CA',2013,1,71),('Oakland','CA',2013,2,96),('Oakland','CA',2013,3,35),('Oakland','CA',2013,4,31),('Oakland','CA',2013,5,61),('Oakland','CA',2013,6,43),('Oakland','CA',2013,7,96),('Oakland','CA',2013,8,36),('Oakland','CA',2013,9,66),('Oakland','CA',2013,10,110),('Oakland','CA',2013,11,42),('Oakland','CA',2013,12,77),('Oakland','CA',2014,1,77),('Oakland','CA',2014,2,62),('Oakland','CA',2014,3,67),('Oakland','CA',2014,4,94),('Oakland','CA',2014,5,53),('Oakland','CA',2014,6,39),('Oakland','CA',2014,7,97),('Oakland','CA',2014,8,96),('Oakland','CA',2014,9,102),('Oakland','CA',2014,10,80),('Oakland','CA',2014,11,47),('Oakland','CA',2014,12,57),('Oakland','CA',2015,1,92),('Oakland','CA',2015,2,95),('Oakland','CA',2015,3,104),('Oakland','CA',2015,4,68),('Oakland','CA',2015,5,69),('Oakland','CA',2015,6,90),('Oakland','CA',2015,7,73),('Oakland','CA',2015,8,38),('Oakland','CA',2015,9,40),('Oakland','CA',2015,10,75),('Oakland','CA',2015,11,79),('Oakland','CA',2015,12,101),('Oakland','CA',2016,1,35),('Oakland','CA',2016,2,98),('Oakland','CA',2016,3,110),('Oakland','CA',2016,4,99),('Oakland','CA',2016,5,76),('Oakland','CA',2016,6,66),('Oakland','CA',2016,7,99),('Oakland','CA',2016,8,103),('Oakland','CA',2016,9,34),('Oakland','CA',2016,10,100),('Oakland','CA',2016,11,75),('Oakland','CA',2016,12,77),('Sonoma','CA',2000,1,84),('Sonoma','CA',2000,2,104),('Sonoma','CA',2000,3,30),('Sonoma','CA',2000,4,68),('Sonoma','CA',2000,5,50),('Sonoma','CA',2000,6,56),('Sonoma','CA',2000,7,52),('Sonoma','CA',2000,8,73),('Sonoma','CA',2000,9,94),('Sonoma','CA',2000,10,38),('Sonoma','CA',2000,11,100),('Sonoma','CA',2000,12,79),('Sonoma','CA',2001,1,86),('Sonoma','CA',2001,2,68),('Sonoma','CA',2001,3,39),('Sonoma','CA',2001,4,95),('Sonoma','CA',2001,5,44),('Sonoma','CA',2001,6,45),('Sonoma','CA',2001,7,60),('Sonoma','CA',2001,8,75),('Sonoma','CA',2001,9,72),('Sonoma','CA',2001,10,53),('Sonoma','CA',2001,11,100),('Sonoma','CA',2001,12,83),('Sonoma','CA',2002,1,81),('Sonoma','CA',2002,2,94),('Sonoma','CA',2002,3,36),('Sonoma','CA',2002,4,95),('Sonoma','CA',2002,5,70),('Sonoma','CA',2002,6,78),('Sonoma','CA',2002,7,39),('Sonoma','CA',2002,8,74),('Sonoma','CA',2002,9,96),('Sonoma','CA',2002,10,53),('Sonoma','CA',2002,11,84),('Sonoma','CA',2002,12,61),('Sonoma','CA',2003,1,66),('Sonoma','CA',2003,2,91),('Sonoma','CA',2003,3,55),('Sonoma','CA',2003,4,70),('Sonoma','CA',2003,5,36),('Sonoma','CA',2003,6,95),('Sonoma','CA',2003,7,49),('Sonoma','CA',2003,8,61),('Sonoma','CA',2003,9,66),('Sonoma','CA',2003,10,95),('Sonoma','CA',2003,11,65),('Sonoma','CA',2003,12,46),('Sonoma','CA',2004,1,89),('Sonoma','CA',2004,2,92),('Sonoma','CA',2004,3,96),('Sonoma','CA',2004,4,91),('Sonoma','CA',2004,5,43),('Sonoma','CA',2004,6,31),('Sonoma','CA',2004,7,96),('Sonoma','CA',2004,8,48),('Sonoma','CA',2004,9,70),('Sonoma','CA',2004,10,39),('Sonoma','CA',2004,11,83),('Sonoma','CA',2004,12,40),('Sonoma','CA',2005,1,43),('Sonoma','CA',2005,2,74),('Sonoma','CA',2005,3,36),('Sonoma','CA',2005,4,102),('Sonoma','CA',2005,5,77),('Sonoma','CA',2005,6,43),('Sonoma','CA',2005,7,79),('Sonoma','CA',2005,8,80),('Sonoma','CA',2005,9,46),('Sonoma','CA',2005,10,45),('Sonoma','CA',2005,11,73),('Sonoma','CA',2005,12,30),('Sonoma','CA',2006,1,76),('Sonoma','CA',2006,2,93),('Sonoma','CA',2006,3,107),('Sonoma','CA',2006,4,69),('Sonoma','CA',2006,5,72),('Sonoma','CA',2006,6,75),('Sonoma','CA',2006,7,97),('Sonoma','CA',2006,8,62),('Sonoma','CA',2006,9,110),('Sonoma','CA',2006,10,70),('Sonoma','CA',2006,11,72),('Sonoma','CA',2006,12,37),('Sonoma','CA',2007,1,73),('Sonoma','CA',2007,2,46),('Sonoma','CA',2007,3,62),('Sonoma','CA',2007,4,36),('Sonoma','CA',2007,5,65),('Sonoma','CA',2007,6,50),('Sonoma','CA',2007,7,40),('Sonoma','CA',2007,8,72),('Sonoma','CA',2007,9,69),('Sonoma','CA',2007,10,58),('Sonoma','CA',2007,11,68),('Sonoma','CA',2007,12,104),('Sonoma','CA',2008,1,87),('Sonoma','CA',2008,2,33),('Sonoma','CA',2008,3,80),('Sonoma','CA',2008,4,80),('Sonoma','CA',2008,5,81),('Sonoma','CA',2008,6,70),('Sonoma','CA',2008,7,50),('Sonoma','CA',2008,8,42),('Sonoma','CA',2008,9,73),('Sonoma','CA',2008,10,87),('Sonoma','CA',2008,11,98),('Sonoma','CA',2008,12,35),('Sonoma','CA',2009,1,66),('Sonoma','CA',2009,2,68),('Sonoma','CA',2009,3,50),('Sonoma','CA',2009,4,34),('Sonoma','CA',2009,5,109),('Sonoma','CA',2009,6,54),('Sonoma','CA',2009,7,44),('Sonoma','CA',2009,8,87),('Sonoma','CA',2009,9,75),('Sonoma','CA',2009,10,51),('Sonoma','CA',2009,11,62),('Sonoma','CA',2009,12,45),('Sonoma','CA',2010,1,98),('Sonoma','CA',2010,2,95),('Sonoma','CA',2010,3,97),('Sonoma','CA',2010,4,68),('Sonoma','CA',2010,5,60),('Sonoma','CA',2010,6,68),('Sonoma','CA',2010,7,66),('Sonoma','CA',2010,8,79),('Sonoma','CA',2010,9,103),('Sonoma','CA',2010,10,76),('Sonoma','CA',2010,11,72),('Sonoma','CA',2010,12,96),('Sonoma','CA',2011,1,58),('Sonoma','CA',2011,2,96),('Sonoma','CA',2011,3,65),('Sonoma','CA',2011,4,32),('Sonoma','CA',2011,5,52),('Sonoma','CA',2011,6,88),('Sonoma','CA',2011,7,66),('Sonoma','CA',2011,8,95),('Sonoma','CA',2011,9,89),('Sonoma','CA',2011,10,60),('Sonoma','CA',2011,11,72),('Sonoma','CA',2011,12,77),('Sonoma','CA',2012,1,46),('Sonoma','CA',2012,2,56),('Sonoma','CA',2012,3,72),('Sonoma','CA',2012,4,68),('Sonoma','CA',2012,5,65),('Sonoma','CA',2012,6,65),('Sonoma','CA',2012,7,49),('Sonoma','CA',2012,8,69),('Sonoma','CA',2012,9,101),('Sonoma','CA',2012,10,83),('Sonoma','CA',2012,11,53),('Sonoma','CA',2012,12,44),('Sonoma','CA',2013,1,63),('Sonoma','CA',2013,2,92),('Sonoma','CA',2013,3,88),('Sonoma','CA',2013,4,34),('Sonoma','CA',2013,5,99),('Sonoma','CA',2013,6,95),('Sonoma','CA',2013,7,87),('Sonoma','CA',2013,8,37),('Sonoma','CA',2013,9,103),('Sonoma','CA',2013,10,70),('Sonoma','CA',2013,11,68),('Sonoma','CA',2013,12,68),('Sonoma','CA',2014,1,75),('Sonoma','CA',2014,2,56),('Sonoma','CA',2014,3,71),('Sonoma','CA',2014,4,79),('Sonoma','CA',2014,5,33),('Sonoma','CA',2014,6,42),('Sonoma','CA',2014,7,56),('Sonoma','CA',2014,8,40),('Sonoma','CA',2014,9,58),('Sonoma','CA',2014,10,77),('Sonoma','CA',2014,11,62),('Sonoma','CA',2014,12,103),('Sonoma','CA',2015,1,106),('Sonoma','CA',2015,2,36),('Sonoma','CA',2015,3,68),('Sonoma','CA',2015,4,96),('Sonoma','CA',2015,5,89),('Sonoma','CA',2015,6,89),('Sonoma','CA',2015,7,47),('Sonoma','CA',2015,8,108),('Sonoma','CA',2015,9,93),('Sonoma','CA',2015,10,44),('Sonoma','CA',2015,11,74),('Sonoma','CA',2015,12,93),('Sonoma','CA',2016,1,87),('Sonoma','CA',2016,2,88),('Sonoma','CA',2016,3,60),('Sonoma','CA',2016,4,66),('Sonoma','CA',2016,5,54),('Sonoma','CA',2016,6,65),('Sonoma','CA',2016,7,106),('Sonoma','CA',2016,8,96),('Sonoma','CA',2016,9,61),('Sonoma','CA',2016,10,109),('Sonoma','CA',2016,11,104),('Sonoma','CA',2016,12,100),('San Jose','CA',2000,1,45),('San Jose','CA',2000,2,37),('San Jose','CA',2000,3,97),('San Jose','CA',2000,4,82),('San Jose','CA',2000,5,30),('San Jose','CA',2000,6,53),('San Jose','CA',2000,7,102),('San Jose','CA',2000,8,32),('San Jose','CA',2000,9,49),('San Jose','CA',2000,10,41),('San Jose','CA',2000,11,72),('San Jose','CA',2000,12,52),('San Jose','CA',2001,1,39),('San Jose','CA',2001,2,99),('San Jose','CA',2001,3,96),('San Jose','CA',2001,4,61),('San Jose','CA',2001,5,42),('San Jose','CA',2001,6,68),('San Jose','CA',2001,7,60),('San Jose','CA',2001,8,102),('San Jose','CA',2001,9,104),('San Jose','CA',2001,10,88),('San Jose','CA',2001,11,87),('San Jose','CA',2001,12,43),('San Jose','CA',2002,1,100),('San Jose','CA',2002,2,56),('San Jose','CA',2002,3,98),('San Jose','CA',2002,4,51),('San Jose','CA',2002,5,62),('San Jose','CA',2002,6,54),('San Jose','CA',2002,7,57),('San Jose','CA',2002,8,48),('San Jose','CA',2002,9,61),('San Jose','CA',2002,10,46),('San Jose','CA',2002,11,73),('San Jose','CA',2002,12,35),('San Jose','CA',2003,1,71),('San Jose','CA',2003,2,90),('San Jose','CA',2003,3,56),('San Jose','CA',2003,4,98),('San Jose','CA',2003,5,36),('San Jose','CA',2003,6,32),('San Jose','CA',2003,7,91),('San Jose','CA',2003,8,39),('San Jose','CA',2003,9,73),('San Jose','CA',2003,10,65),('San Jose','CA',2003,11,33),('San Jose','CA',2003,12,86),('San Jose','CA',2004,1,70),('San Jose','CA',2004,2,36),('San Jose','CA',2004,3,44),('San Jose','CA',2004,4,102),('San Jose','CA',2004,5,94),('San Jose','CA',2004,6,42),('San Jose','CA',2004,7,35),('San Jose','CA',2004,8,57),('San Jose','CA',2004,9,54),('San Jose','CA',2004,10,56),('San Jose','CA',2004,11,85),('San Jose','CA',2004,12,67),('San Jose','CA',2005,1,67),('San Jose','CA',2005,2,65),('San Jose','CA',2005,3,37),('San Jose','CA',2005,4,75),('San Jose','CA',2005,5,48),('San Jose','CA',2005,6,42),('San Jose','CA',2005,7,70),('San Jose','CA',2005,8,66),('San Jose','CA',2005,9,96),('San Jose','CA',2005,10,96),('San Jose','CA',2005,11,51),('San Jose','CA',2005,12,74),('San Jose','CA',2006,1,40),('San Jose','CA',2006,2,32),('San Jose','CA',2006,3,50),('San Jose','CA',2006,4,84),('San Jose','CA',2006,5,94),('San Jose','CA',2006,6,98),('San Jose','CA',2006,7,60),('San Jose','CA',2006,8,94),('San Jose','CA',2006,9,88),('San Jose','CA',2006,10,100),('San Jose','CA',2006,11,56),('San Jose','CA',2006,12,108),('San Jose','CA',2007,1,62),('San Jose','CA',2007,2,44),('San Jose','CA',2007,3,59),('San Jose','CA',2007,4,50),('San Jose','CA',2007,5,87),('San Jose','CA',2007,6,102),('San Jose','CA',2007,7,32),('San Jose','CA',2007,8,37),('San Jose','CA',2007,9,61),('San Jose','CA',2007,10,34),('San Jose','CA',2007,11,109),('San Jose','CA',2007,12,47),('San Jose','CA',2008,1,73),('San Jose','CA',2008,2,65),('San Jose','CA',2008,3,99),('San Jose','CA',2008,4,39),('San Jose','CA',2008,5,86),('San Jose','CA',2008,6,97),('San Jose','CA',2008,7,51),('San Jose','CA',2008,8,101),('San Jose','CA',2008,9,76),('San Jose','CA',2008,10,60),('San Jose','CA',2008,11,51),('San Jose','CA',2008,12,92),('San Jose','CA',2009,1,77),('San Jose','CA',2009,2,71),('San Jose','CA',2009,3,99),('San Jose','CA',2009,4,92),('San Jose','CA',2009,5,49),('San Jose','CA',2009,6,54),('San Jose','CA',2009,7,99),('San Jose','CA',2009,8,42),('San Jose','CA',2009,9,41),('San Jose','CA',2009,10,102),('San Jose','CA',2009,11,100),('San Jose','CA',2009,12,31),('San Jose','CA',2010,1,46),('San Jose','CA',2010,2,85),('San Jose','CA',2010,3,30),('San Jose','CA',2010,4,88),('San Jose','CA',2010,5,104),('San Jose','CA',2010,6,105),('San Jose','CA',2010,7,84),('San Jose','CA',2010,8,97),('San Jose','CA',2010,9,81),('San Jose','CA',2010,10,96),('San Jose','CA',2010,11,57),('San Jose','CA',2010,12,43),('San Jose','CA',2011,1,98),('San Jose','CA',2011,2,64),('San Jose','CA',2011,3,56),('San Jose','CA',2011,4,38),('San Jose','CA',2011,5,44),('San Jose','CA',2011,6,91),('San Jose','CA',2011,7,106),('San Jose','CA',2011,8,44),('San Jose','CA',2011,9,100),('San Jose','CA',2011,10,100),('San Jose','CA',2011,11,83),('San Jose','CA',2011,12,79),('San Jose','CA',2012,1,97),('San Jose','CA',2012,2,65),('San Jose','CA',2012,3,97),('San Jose','CA',2012,4,68),('San Jose','CA',2012,5,35),('San Jose','CA',2012,6,57),('San Jose','CA',2012,7,80),('San Jose','CA',2012,8,110),('San Jose','CA',2012,9,38),('San Jose','CA',2012,10,88),('San Jose','CA',2012,11,87),('San Jose','CA',2012,12,62),('San Jose','CA',2013,1,78),('San Jose','CA',2013,2,41),('San Jose','CA',2013,3,44),('San Jose','CA',2013,4,61),('San Jose','CA',2013,5,83),('San Jose','CA',2013,6,40),('San Jose','CA',2013,7,49),('San Jose','CA',2013,8,97),('San Jose','CA',2013,9,33),('San Jose','CA',2013,10,97),('San Jose','CA',2013,11,63),('San Jose','CA',2013,12,91),('San Jose','CA',2014,1,85),('San Jose','CA',2014,2,108),('San Jose','CA',2014,3,103),('San Jose','CA',2014,4,96),('San Jose','CA',2014,5,72),('San Jose','CA',2014,6,82),('San Jose','CA',2014,7,80),('San Jose','CA',2014,8,99),('San Jose','CA',2014,9,51),('San Jose','CA',2014,10,77),('San Jose','CA',2014,11,53),('San Jose','CA',2014,12,54),('San Jose','CA',2015,1,86),('San Jose','CA',2015,2,84),('San Jose','CA',2015,3,34),('San Jose','CA',2015,4,51),('San Jose','CA',2015,5,63),('San Jose','CA',2015,6,90),('San Jose','CA',2015,7,110),('San Jose','CA',2015,8,58),('San Jose','CA',2015,9,94),('San Jose','CA',2015,10,92),('San Jose','CA',2015,11,49),('San Jose','CA',2015,12,98),('San Jose','CA',2016,1,90),('San Jose','CA',2016,2,72),('San Jose','CA',2016,3,101),('San Jose','CA',2016,4,36),('San Jose','CA',2016,5,78),('San Jose','CA',2016,6,55),('San Jose','CA',2016,7,88),('San Jose','CA',2016,8,69),('San Jose','CA',2016,9,53),('San Jose','CA',2016,10,49),('San Jose','CA',2016,11,65),('San Jose','CA',2016,12,36),('Pismo beach','CA',2000,1,82),('Pismo beach','CA',2000,2,39),('Pismo beach','CA',2000,3,51),('Pismo beach','CA',2000,4,99),('Pismo beach','CA',2000,5,103),('Pismo beach','CA',2000,6,108),('Pismo beach','CA',2000,7,88),('Pismo beach','CA',2000,8,39),('Pismo beach','CA',2000,9,79),('Pismo beach','CA',2000,10,58),('Pismo beach','CA',2000,11,49),('Pismo beach','CA',2000,12,87),('Pismo beach','CA',2001,1,73),('Pismo beach','CA',2001,2,94),('Pismo beach','CA',2001,3,72),('Pismo beach','CA',2001,4,38),('Pismo beach','CA',2001,5,49),('Pismo beach','CA',2001,6,31),('Pismo beach','CA',2001,7,47),('Pismo beach','CA',2001,8,63),('Pismo beach','CA',2001,9,109),('Pismo beach','CA',2001,10,43),('Pismo beach','CA',2001,11,90),('Pismo beach','CA',2001,12,94),('Pismo beach','CA',2002,1,69),('Pismo beach','CA',2002,2,37),('Pismo beach','CA',2002,3,32),('Pismo beach','CA',2002,4,109),('Pismo beach','CA',2002,5,44),('Pismo beach','CA',2002,6,88),('Pismo beach','CA',2002,7,44),('Pismo beach','CA',2002,8,63),('Pismo beach','CA',2002,9,48),('Pismo beach','CA',2002,10,44),('Pismo beach','CA',2002,11,93),('Pismo beach','CA',2002,12,32),('Pismo beach','CA',2003,1,80),('Pismo beach','CA',2003,2,62),('Pismo beach','CA',2003,3,54),('Pismo beach','CA',2003,4,87),('Pismo beach','CA',2003,5,88),('Pismo beach','CA',2003,6,61),('Pismo beach','CA',2003,7,33),('Pismo beach','CA',2003,8,94),('Pismo beach','CA',2003,9,95),('Pismo beach','CA',2003,10,94),('Pismo beach','CA',2003,11,69),('Pismo beach','CA',2003,12,76),('Pismo beach','CA',2004,1,80),('Pismo beach','CA',2004,2,108),('Pismo beach','CA',2004,3,106),('Pismo beach','CA',2004,4,84),('Pismo beach','CA',2004,5,110),('Pismo beach','CA',2004,6,87),('Pismo beach','CA',2004,7,84),('Pismo beach','CA',2004,8,71),('Pismo beach','CA',2004,9,60),('Pismo beach','CA',2004,10,62),('Pismo beach','CA',2004,11,75),('Pismo beach','CA',2004,12,67),('Pismo beach','CA',2005,1,52),('Pismo beach','CA',2005,2,101),('Pismo beach','CA',2005,3,71),('Pismo beach','CA',2005,4,56),('Pismo beach','CA',2005,5,55),('Pismo beach','CA',2005,6,40),('Pismo beach','CA',2005,7,90),('Pismo beach','CA',2005,8,70),('Pismo beach','CA',2005,9,36),('Pismo beach','CA',2005,10,108),('Pismo beach','CA',2005,11,93),('Pismo beach','CA',2005,12,33),('Pismo beach','CA',2006,1,99),('Pismo beach','CA',2006,2,85),('Pismo beach','CA',2006,3,48),('Pismo beach','CA',2006,4,110),('Pismo beach','CA',2006,5,99),('Pismo beach','CA',2006,6,35),('Pismo beach','CA',2006,7,81),('Pismo beach','CA',2006,8,98),('Pismo beach','CA',2006,9,106),('Pismo beach','CA',2006,10,43),('Pismo beach','CA',2006,11,42),('Pismo beach','CA',2006,12,89),('Pismo beach','CA',2007,1,83),('Pismo beach','CA',2007,2,107),('Pismo beach','CA',2007,3,110),('Pismo beach','CA',2007,4,105),('Pismo beach','CA',2007,5,60),('Pismo beach','CA',2007,6,49),('Pismo beach','CA',2007,7,56),('Pismo beach','CA',2007,8,98),('Pismo beach','CA',2007,9,39),('Pismo beach','CA',2007,10,95),('Pismo beach','CA',2007,11,80),('Pismo beach','CA',2007,12,72),('Pismo beach','CA',2008,1,63),('Pismo beach','CA',2008,2,42),('Pismo beach','CA',2008,3,46),('Pismo beach','CA',2008,4,31),('Pismo beach','CA',2008,5,106),('Pismo beach','CA',2008,6,69),('Pismo beach','CA',2008,7,81),('Pismo beach','CA',2008,8,69),('Pismo beach','CA',2008,9,34),('Pismo beach','CA',2008,10,41),('Pismo beach','CA',2008,11,55),('Pismo beach','CA',2008,12,44),('Pismo beach','CA',2009,1,103),('Pismo beach','CA',2009,2,70),('Pismo beach','CA',2009,3,84),('Pismo beach','CA',2009,4,31),('Pismo beach','CA',2009,5,44),('Pismo beach','CA',2009,6,105),('Pismo beach','CA',2009,7,80),('Pismo beach','CA',2009,8,80),('Pismo beach','CA',2009,9,81),('Pismo beach','CA',2009,10,88),('Pismo beach','CA',2009,11,55),('Pismo beach','CA',2009,12,71),('Pismo beach','CA',2010,1,46),('Pismo beach','CA',2010,2,107),('Pismo beach','CA',2010,3,70),('Pismo beach','CA',2010,4,79),('Pismo beach','CA',2010,5,70),('Pismo beach','CA',2010,6,84),('Pismo beach','CA',2010,7,59),('Pismo beach','CA',2010,8,96),('Pismo beach','CA',2010,9,59),('Pismo beach','CA',2010,10,60),('Pismo beach','CA',2010,11,54),('Pismo beach','CA',2010,12,74),('Pismo beach','CA',2011,1,30),('Pismo beach','CA',2011,2,67),('Pismo beach','CA',2011,3,52),('Pismo beach','CA',2011,4,90),('Pismo beach','CA',2011,5,89),('Pismo beach','CA',2011,6,33),('Pismo beach','CA',2011,7,94),('Pismo beach','CA',2011,8,85),('Pismo beach','CA',2011,9,57),('Pismo beach','CA',2011,10,75),('Pismo beach','CA',2011,11,42),('Pismo beach','CA',2011,12,102),('Pismo beach','CA',2012,1,50),('Pismo beach','CA',2012,2,79),('Pismo beach','CA',2012,3,94),('Pismo beach','CA',2012,4,87),('Pismo beach','CA',2012,5,81),('Pismo beach','CA',2012,6,77),('Pismo beach','CA',2012,7,30),('Pismo beach','CA',2012,8,60),('Pismo beach','CA',2012,9,109),('Pismo beach','CA',2012,10,90),('Pismo beach','CA',2012,11,107),('Pismo beach','CA',2012,12,78),('Pismo beach','CA',2013,1,33),('Pismo beach','CA',2013,2,82),('Pismo beach','CA',2013,3,48),('Pismo beach','CA',2013,4,52),('Pismo beach','CA',2013,5,49),('Pismo beach','CA',2013,6,67),('Pismo beach','CA',2013,7,42),('Pismo beach','CA',2013,8,63),('Pismo beach','CA',2013,9,103),('Pismo beach','CA',2013,10,60),('Pismo beach','CA',2013,11,79),('Pismo beach','CA',2013,12,101),('Pismo beach','CA',2014,1,95),('Pismo beach','CA',2014,2,104),('Pismo beach','CA',2014,3,54),('Pismo beach','CA',2014,4,56),('Pismo beach','CA',2014,5,34),('Pismo beach','CA',2014,6,98),('Pismo beach','CA',2014,7,53),('Pismo beach','CA',2014,8,101),('Pismo beach','CA',2014,9,59),('Pismo beach','CA',2014,10,93),('Pismo beach','CA',2014,11,102),('Pismo beach','CA',2014,12,73),('Pismo beach','CA',2015,1,91),('Pismo beach','CA',2015,2,50),('Pismo beach','CA',2015,3,33),('Pismo beach','CA',2015,4,97),('Pismo beach','CA',2015,5,32),('Pismo beach','CA',2015,6,32),('Pismo beach','CA',2015,7,109),('Pismo beach','CA',2015,8,98),('Pismo beach','CA',2015,9,78),('Pismo beach','CA',2015,10,109),('Pismo beach','CA',2015,11,108),('Pismo beach','CA',2015,12,70),('Pismo beach','CA',2016,1,32),('Pismo beach','CA',2016,2,79),('Pismo beach','CA',2016,3,33),('Pismo beach','CA',2016,4,93),('Pismo beach','CA',2016,5,40),('Pismo beach','CA',2016,6,79),('Pismo beach','CA',2016,7,95),('Pismo beach','CA',2016,8,39),('Pismo beach','CA',2016,9,103),('Pismo beach','CA',2016,10,74),('Pismo beach','CA',2016,11,108),('Pismo beach','CA',2016,12,48),('Chicago','IL',2000,1,62),('Chicago','IL',2000,2,70),('Chicago','IL',2000,3,46),('Chicago','IL',2000,4,53),('Chicago','IL',2000,5,41),('Chicago','IL',2000,6,69),('Chicago','IL',2000,7,73),('Chicago','IL',2000,8,34),('Chicago','IL',2000,9,63),('Chicago','IL',2000,10,75),('Chicago','IL',2000,11,84),('Chicago','IL',2000,12,70),('Chicago','IL',2001,1,97),('Chicago','IL',2001,2,103),('Chicago','IL',2001,3,70),('Chicago','IL',2001,4,40),('Chicago','IL',2001,5,105),('Chicago','IL',2001,6,100),('Chicago','IL',2001,7,88),('Chicago','IL',2001,8,66),('Chicago','IL',2001,9,86),('Chicago','IL',2001,10,106),('Chicago','IL',2001,11,59),('Chicago','IL',2001,12,48),('Chicago','IL',2002,1,86),('Chicago','IL',2002,2,100),('Chicago','IL',2002,3,82),('Chicago','IL',2002,4,51),('Chicago','IL',2002,5,93),('Chicago','IL',2002,6,76),('Chicago','IL',2002,7,70),('Chicago','IL',2002,8,64),('Chicago','IL',2002,9,30),('Chicago','IL',2002,10,42),('Chicago','IL',2002,11,66),('Chicago','IL',2002,12,79),('Chicago','IL',2003,1,68),('Chicago','IL',2003,2,110),('Chicago','IL',2003,3,54),('Chicago','IL',2003,4,53),('Chicago','IL',2003,5,93),('Chicago','IL',2003,6,75),('Chicago','IL',2003,7,31),('Chicago','IL',2003,8,78),('Chicago','IL',2003,9,54),('Chicago','IL',2003,10,99),('Chicago','IL',2003,11,103),('Chicago','IL',2003,12,35),('Chicago','IL',2004,1,106),('Chicago','IL',2004,2,79),('Chicago','IL',2004,3,47),('Chicago','IL',2004,4,104),('Chicago','IL',2004,5,64),('Chicago','IL',2004,6,97),('Chicago','IL',2004,7,109),('Chicago','IL',2004,8,93),('Chicago','IL',2004,9,97),('Chicago','IL',2004,10,71),('Chicago','IL',2004,11,78),('Chicago','IL',2004,12,76),('Chicago','IL',2005,1,105),('Chicago','IL',2005,2,37),('Chicago','IL',2005,3,77),('Chicago','IL',2005,4,61),('Chicago','IL',2005,5,43),('Chicago','IL',2005,6,61),('Chicago','IL',2005,7,54),('Chicago','IL',2005,8,55),('Chicago','IL',2005,9,63),('Chicago','IL',2005,10,60),('Chicago','IL',2005,11,78),('Chicago','IL',2005,12,102),('Chicago','IL',2006,1,48),('Chicago','IL',2006,2,65),('Chicago','IL',2006,3,62),('Chicago','IL',2006,4,87),('Chicago','IL',2006,5,85),('Chicago','IL',2006,6,109),('Chicago','IL',2006,7,76),('Chicago','IL',2006,8,110),('Chicago','IL',2006,9,39),('Chicago','IL',2006,10,74),('Chicago','IL',2006,11,46),('Chicago','IL',2006,12,86),('Chicago','IL',2007,1,57),('Chicago','IL',2007,2,52),('Chicago','IL',2007,3,69),('Chicago','IL',2007,4,102),('Chicago','IL',2007,5,36),('Chicago','IL',2007,6,35),('Chicago','IL',2007,7,41),('Chicago','IL',2007,8,79),('Chicago','IL',2007,9,42),('Chicago','IL',2007,10,103),('Chicago','IL',2007,11,87),('Chicago','IL',2007,12,56),('Chicago','IL',2008,1,61),('Chicago','IL',2008,2,60),('Chicago','IL',2008,3,92),('Chicago','IL',2008,4,75),('Chicago','IL',2008,5,89),('Chicago','IL',2008,6,85),('Chicago','IL',2008,7,98),('Chicago','IL',2008,8,34),('Chicago','IL',2008,9,99),('Chicago','IL',2008,10,70),('Chicago','IL',2008,11,88),('Chicago','IL',2008,12,96),('Chicago','IL',2009,1,72),('Chicago','IL',2009,2,84),('Chicago','IL',2009,3,32),('Chicago','IL',2009,4,54),('Chicago','IL',2009,5,101),('Chicago','IL',2009,6,40),('Chicago','IL',2009,7,73),('Chicago','IL',2009,8,38),('Chicago','IL',2009,9,85),('Chicago','IL',2009,10,79),('Chicago','IL',2009,11,72),('Chicago','IL',2009,12,80),('Chicago','IL',2010,1,52),('Chicago','IL',2010,2,95),('Chicago','IL',2010,3,96),('Chicago','IL',2010,4,93),('Chicago','IL',2010,5,102),('Chicago','IL',2010,6,62),('Chicago','IL',2010,7,40),('Chicago','IL',2010,8,51),('Chicago','IL',2010,9,51),('Chicago','IL',2010,10,43),('Chicago','IL',2010,11,42),('Chicago','IL',2010,12,33),('Chicago','IL',2011,1,54),('Chicago','IL',2011,2,96),('Chicago','IL',2011,3,88),('Chicago','IL',2011,4,80),('Chicago','IL',2011,5,88),('Chicago','IL',2011,6,82),('Chicago','IL',2011,7,82),('Chicago','IL',2011,8,45),('Chicago','IL',2011,9,110),('Chicago','IL',2011,10,37),('Chicago','IL',2011,11,103),('Chicago','IL',2011,12,105),('Chicago','IL',2012,1,65),('Chicago','IL',2012,2,62),('Chicago','IL',2012,3,36),('Chicago','IL',2012,4,84),('Chicago','IL',2012,5,50),('Chicago','IL',2012,6,37),('Chicago','IL',2012,7,66),('Chicago','IL',2012,8,92),('Chicago','IL',2012,9,82),('Chicago','IL',2012,10,63),('Chicago','IL',2012,11,34),('Chicago','IL',2012,12,91),('Chicago','IL',2013,1,39),('Chicago','IL',2013,2,53),('Chicago','IL',2013,3,55),('Chicago','IL',2013,4,61),('Chicago','IL',2013,5,94),('Chicago','IL',2013,6,45),('Chicago','IL',2013,7,93),('Chicago','IL',2013,8,103),('Chicago','IL',2013,9,107),('Chicago','IL',2013,10,85),('Chicago','IL',2013,11,76),('Chicago','IL',2013,12,36),('Chicago','IL',2014,1,73),('Chicago','IL',2014,2,92),('Chicago','IL',2014,3,78),('Chicago','IL',2014,4,102),('Chicago','IL',2014,5,32),('Chicago','IL',2014,6,30),('Chicago','IL',2014,7,79),('Chicago','IL',2014,8,52),('Chicago','IL',2014,9,61),('Chicago','IL',2014,10,69),('Chicago','IL',2014,11,38),('Chicago','IL',2014,12,37),('Chicago','IL',2015,1,46),('Chicago','IL',2015,2,87),('Chicago','IL',2015,3,51),('Chicago','IL',2015,4,99),('Chicago','IL',2015,5,108),('Chicago','IL',2015,6,75),('Chicago','IL',2015,7,83),('Chicago','IL',2015,8,30),('Chicago','IL',2015,9,79),('Chicago','IL',2015,10,99),('Chicago','IL',2015,11,78),('Chicago','IL',2015,12,64),('Chicago','IL',2016,1,76),('Chicago','IL',2016,2,49),('Chicago','IL',2016,3,60),('Chicago','IL',2016,4,86),('Chicago','IL',2016,5,71),('Chicago','IL',2016,6,55),('Chicago','IL',2016,7,52),('Chicago','IL',2016,8,37),('Chicago','IL',2016,9,37),('Chicago','IL',2016,10,59),('Chicago','IL',2016,11,95),('Chicago','IL',2016,12,93),('Naperville','IL',2000,1,48),('Naperville','IL',2000,2,76),('Naperville','IL',2000,3,62),('Naperville','IL',2000,4,94),('Naperville','IL',2000,5,43),('Naperville','IL',2000,6,109),('Naperville','IL',2000,7,103),('Naperville','IL',2000,8,38),('Naperville','IL',2000,9,85),('Naperville','IL',2000,10,71),('Naperville','IL',2000,11,98),('Naperville','IL',2000,12,60),('Naperville','IL',2001,1,40),('Naperville','IL',2001,2,104),('Naperville','IL',2001,3,49),('Naperville','IL',2001,4,62),('Naperville','IL',2001,5,71),('Naperville','IL',2001,6,88),('Naperville','IL',2001,7,92),('Naperville','IL',2001,8,110),('Naperville','IL',2001,9,86),('Naperville','IL',2001,10,37),('Naperville','IL',2001,11,85),('Naperville','IL',2001,12,93),('Naperville','IL',2002,1,83),('Naperville','IL',2002,2,103),('Naperville','IL',2002,3,76),('Naperville','IL',2002,4,40),('Naperville','IL',2002,5,42),('Naperville','IL',2002,6,48),('Naperville','IL',2002,7,77),('Naperville','IL',2002,8,107),('Naperville','IL',2002,9,42),('Naperville','IL',2002,10,64),('Naperville','IL',2002,11,35),('Naperville','IL',2002,12,34),('Naperville','IL',2003,1,102),('Naperville','IL',2003,2,88),('Naperville','IL',2003,3,68),('Naperville','IL',2003,4,68),('Naperville','IL',2003,5,59),('Naperville','IL',2003,6,38),('Naperville','IL',2003,7,80),('Naperville','IL',2003,8,99),('Naperville','IL',2003,9,39),('Naperville','IL',2003,10,100),('Naperville','IL',2003,11,79),('Naperville','IL',2003,12,44),('Naperville','IL',2004,1,46),('Naperville','IL',2004,2,70),('Naperville','IL',2004,3,51),('Naperville','IL',2004,4,109),('Naperville','IL',2004,5,99),('Naperville','IL',2004,6,102),('Naperville','IL',2004,7,50),('Naperville','IL',2004,8,35),('Naperville','IL',2004,9,67),('Naperville','IL',2004,10,31),('Naperville','IL',2004,11,51),('Naperville','IL',2004,12,30),('Naperville','IL',2005,1,44),('Naperville','IL',2005,2,104),('Naperville','IL',2005,3,94),('Naperville','IL',2005,4,85),('Naperville','IL',2005,5,33),('Naperville','IL',2005,6,77),('Naperville','IL',2005,7,106),('Naperville','IL',2005,8,40),('Naperville','IL',2005,9,44),('Naperville','IL',2005,10,84),('Naperville','IL',2005,11,47),('Naperville','IL',2005,12,31),('Naperville','IL',2006,1,30),('Naperville','IL',2006,2,70),('Naperville','IL',2006,3,80),('Naperville','IL',2006,4,40),('Naperville','IL',2006,5,68),('Naperville','IL',2006,6,58),('Naperville','IL',2006,7,48),('Naperville','IL',2006,8,95),('Naperville','IL',2006,9,71),('Naperville','IL',2006,10,66),('Naperville','IL',2006,11,101),('Naperville','IL',2006,12,73),('Naperville','IL',2007,1,109),('Naperville','IL',2007,2,91),('Naperville','IL',2007,3,35),('Naperville','IL',2007,4,57),('Naperville','IL',2007,5,97),('Naperville','IL',2007,6,102),('Naperville','IL',2007,7,55),('Naperville','IL',2007,8,85),('Naperville','IL',2007,9,32),('Naperville','IL',2007,10,31),('Naperville','IL',2007,11,78),('Naperville','IL',2007,12,56),('Naperville','IL',2008,1,74),('Naperville','IL',2008,2,62),('Naperville','IL',2008,3,87),('Naperville','IL',2008,4,94),('Naperville','IL',2008,5,72),('Naperville','IL',2008,6,30),('Naperville','IL',2008,7,69),('Naperville','IL',2008,8,46),('Naperville','IL',2008,9,32),('Naperville','IL',2008,10,79),('Naperville','IL',2008,11,32),('Naperville','IL',2008,12,66),('Naperville','IL',2009,1,40),('Naperville','IL',2009,2,51),('Naperville','IL',2009,3,72),('Naperville','IL',2009,4,36),('Naperville','IL',2009,5,32),('Naperville','IL',2009,6,69),('Naperville','IL',2009,7,101),('Naperville','IL',2009,8,48),('Naperville','IL',2009,9,87),('Naperville','IL',2009,10,63),('Naperville','IL',2009,11,87),('Naperville','IL',2009,12,64),('Naperville','IL',2010,1,102),('Naperville','IL',2010,2,40),('Naperville','IL',2010,3,88),('Naperville','IL',2010,4,57),('Naperville','IL',2010,5,56),('Naperville','IL',2010,6,75),('Naperville','IL',2010,7,83),('Naperville','IL',2010,8,99),('Naperville','IL',2010,9,93),('Naperville','IL',2010,10,52),('Naperville','IL',2010,11,46),('Naperville','IL',2010,12,76),('Naperville','IL',2011,1,81),('Naperville','IL',2011,2,55),('Naperville','IL',2011,3,81),('Naperville','IL',2011,4,37),('Naperville','IL',2011,5,67),('Naperville','IL',2011,6,104),('Naperville','IL',2011,7,107),('Naperville','IL',2011,8,47),('Naperville','IL',2011,9,75),('Naperville','IL',2011,10,47),('Naperville','IL',2011,11,69),('Naperville','IL',2011,12,49),('Naperville','IL',2012,1,97),('Naperville','IL',2012,2,87),('Naperville','IL',2012,3,48),('Naperville','IL',2012,4,60),('Naperville','IL',2012,5,41),('Naperville','IL',2012,6,49),('Naperville','IL',2012,7,103),('Naperville','IL',2012,8,89),('Naperville','IL',2012,9,101),('Naperville','IL',2012,10,31),('Naperville','IL',2012,11,97),('Naperville','IL',2012,12,34),('Naperville','IL',2013,1,49),('Naperville','IL',2013,2,65),('Naperville','IL',2013,3,82),('Naperville','IL',2013,4,81),('Naperville','IL',2013,5,75),('Naperville','IL',2013,6,100),('Naperville','IL',2013,7,109),('Naperville','IL',2013,8,75),('Naperville','IL',2013,9,104),('Naperville','IL',2013,10,65),('Naperville','IL',2013,11,57),('Naperville','IL',2013,12,90),('Naperville','IL',2014,1,90),('Naperville','IL',2014,2,92),('Naperville','IL',2014,3,88),('Naperville','IL',2014,4,97),('Naperville','IL',2014,5,72),('Naperville','IL',2014,6,68),('Naperville','IL',2014,7,73),('Naperville','IL',2014,8,76),('Naperville','IL',2014,9,67),('Naperville','IL',2014,10,63),('Naperville','IL',2014,11,54),('Naperville','IL',2014,12,78),('Naperville','IL',2015,1,75),('Naperville','IL',2015,2,30),('Naperville','IL',2015,3,31),('Naperville','IL',2015,4,65),('Naperville','IL',2015,5,60),('Naperville','IL',2015,6,72),('Naperville','IL',2015,7,90),('Naperville','IL',2015,8,78),('Naperville','IL',2015,9,34),('Naperville','IL',2015,10,61),('Naperville','IL',2015,11,35),('Naperville','IL',2015,12,76),('Naperville','IL',2016,1,34),('Naperville','IL',2016,2,50),('Naperville','IL',2016,3,48),('Naperville','IL',2016,4,95),('Naperville','IL',2016,5,46),('Naperville','IL',2016,6,31),('Naperville','IL',2016,7,54),('Naperville','IL',2016,8,49),('Naperville','IL',2016,9,48),('Naperville','IL',2016,10,79),('Naperville','IL',2016,11,93),('Naperville','IL',2016,12,96),('Peoria','IL',2000,1,33),('Peoria','IL',2000,2,41),('Peoria','IL',2000,3,71),('Peoria','IL',2000,4,48),('Peoria','IL',2000,5,81),('Peoria','IL',2000,6,55),('Peoria','IL',2000,7,63),('Peoria','IL',2000,8,65),('Peoria','IL',2000,9,73),('Peoria','IL',2000,10,56),('Peoria','IL',2000,11,107),('Peoria','IL',2000,12,81),('Peoria','IL',2001,1,36),('Peoria','IL',2001,2,41),('Peoria','IL',2001,3,56),('Peoria','IL',2001,4,84),('Peoria','IL',2001,5,96),('Peoria','IL',2001,6,34),('Peoria','IL',2001,7,39),('Peoria','IL',2001,8,73),('Peoria','IL',2001,9,32),('Peoria','IL',2001,10,75),('Peoria','IL',2001,11,64),('Peoria','IL',2001,12,105),('Peoria','IL',2002,1,95),('Peoria','IL',2002,2,86),('Peoria','IL',2002,3,76),('Peoria','IL',2002,4,103),('Peoria','IL',2002,5,40),('Peoria','IL',2002,6,32),('Peoria','IL',2002,7,49),('Peoria','IL',2002,8,52),('Peoria','IL',2002,9,44),('Peoria','IL',2002,10,36),('Peoria','IL',2002,11,32),('Peoria','IL',2002,12,36),('Peoria','IL',2003,1,98),('Peoria','IL',2003,2,54),('Peoria','IL',2003,3,108),('Peoria','IL',2003,4,66),('Peoria','IL',2003,5,76),('Peoria','IL',2003,6,46),('Peoria','IL',2003,7,108),('Peoria','IL',2003,8,44),('Peoria','IL',2003,9,60),('Peoria','IL',2003,10,68),('Peoria','IL',2003,11,90),('Peoria','IL',2003,12,95),('Peoria','IL',2004,1,81),('Peoria','IL',2004,2,109),('Peoria','IL',2004,3,93),('Peoria','IL',2004,4,93),('Peoria','IL',2004,5,56),('Peoria','IL',2004,6,53),('Peoria','IL',2004,7,106),('Peoria','IL',2004,8,41),('Peoria','IL',2004,9,34),('Peoria','IL',2004,10,55),('Peoria','IL',2004,11,53),('Peoria','IL',2004,12,58),('Peoria','IL',2005,1,89),('Peoria','IL',2005,2,99),('Peoria','IL',2005,3,63),('Peoria','IL',2005,4,77),('Peoria','IL',2005,5,64),('Peoria','IL',2005,6,90),('Peoria','IL',2005,7,84),('Peoria','IL',2005,8,106),('Peoria','IL',2005,9,65),('Peoria','IL',2005,10,94),('Peoria','IL',2005,11,70),('Peoria','IL',2005,12,48),('Peoria','IL',2006,1,59),('Peoria','IL',2006,2,37),('Peoria','IL',2006,3,34),('Peoria','IL',2006,4,105),('Peoria','IL',2006,5,92),('Peoria','IL',2006,6,104),('Peoria','IL',2006,7,59),('Peoria','IL',2006,8,76),('Peoria','IL',2006,9,33),('Peoria','IL',2006,10,97),('Peoria','IL',2006,11,30),('Peoria','IL',2006,12,48),('Peoria','IL',2007,1,51),('Peoria','IL',2007,2,46),('Peoria','IL',2007,3,49),('Peoria','IL',2007,4,37),('Peoria','IL',2007,5,51),('Peoria','IL',2007,6,99),('Peoria','IL',2007,7,99),('Peoria','IL',2007,8,84),('Peoria','IL',2007,9,70),('Peoria','IL',2007,10,36),('Peoria','IL',2007,11,83),('Peoria','IL',2007,12,105),('Peoria','IL',2008,1,83),('Peoria','IL',2008,2,79),('Peoria','IL',2008,3,78),('Peoria','IL',2008,4,100),('Peoria','IL',2008,5,93),('Peoria','IL',2008,6,106),('Peoria','IL',2008,7,56),('Peoria','IL',2008,8,75),('Peoria','IL',2008,9,52),('Peoria','IL',2008,10,88),('Peoria','IL',2008,11,52),('Peoria','IL',2008,12,66),('Peoria','IL',2009,1,63),('Peoria','IL',2009,2,37),('Peoria','IL',2009,3,45),('Peoria','IL',2009,4,66),('Peoria','IL',2009,5,35),('Peoria','IL',2009,6,98),('Peoria','IL',2009,7,57),('Peoria','IL',2009,8,81),('Peoria','IL',2009,9,86),('Peoria','IL',2009,10,98),('Peoria','IL',2009,11,70),('Peoria','IL',2009,12,86),('Peoria','IL',2010,1,38),('Peoria','IL',2010,2,32),('Peoria','IL',2010,3,91),('Peoria','IL',2010,4,34),('Peoria','IL',2010,5,68),('Peoria','IL',2010,6,73),('Peoria','IL',2010,7,91),('Peoria','IL',2010,8,50),('Peoria','IL',2010,9,55),('Peoria','IL',2010,10,47),('Peoria','IL',2010,11,70),('Peoria','IL',2010,12,30),('Peoria','IL',2011,1,78),('Peoria','IL',2011,2,41),('Peoria','IL',2011,3,31),('Peoria','IL',2011,4,48),('Peoria','IL',2011,5,68),('Peoria','IL',2011,6,73),('Peoria','IL',2011,7,38),('Peoria','IL',2011,8,51),('Peoria','IL',2011,9,51),('Peoria','IL',2011,10,31),('Peoria','IL',2011,11,107),('Peoria','IL',2011,12,79),('Peoria','IL',2012,1,70),('Peoria','IL',2012,2,36),('Peoria','IL',2012,3,109),('Peoria','IL',2012,4,86),('Peoria','IL',2012,5,63),('Peoria','IL',2012,6,89),('Peoria','IL',2012,7,33),('Peoria','IL',2012,8,72),('Peoria','IL',2012,9,94),('Peoria','IL',2012,10,81),('Peoria','IL',2012,11,42),('Peoria','IL',2012,12,34),('Peoria','IL',2013,1,70),('Peoria','IL',2013,2,64),('Peoria','IL',2013,3,30),('Peoria','IL',2013,4,74),('Peoria','IL',2013,5,80),('Peoria','IL',2013,6,63),('Peoria','IL',2013,7,98),('Peoria','IL',2013,8,71),('Peoria','IL',2013,9,55),('Peoria','IL',2013,10,36),('Peoria','IL',2013,11,72),('Peoria','IL',2013,12,47),('Peoria','IL',2014,1,62),('Peoria','IL',2014,2,31),('Peoria','IL',2014,3,81),('Peoria','IL',2014,4,74),('Peoria','IL',2014,5,82),('Peoria','IL',2014,6,61),('Peoria','IL',2014,7,55),('Peoria','IL',2014,8,53),('Peoria','IL',2014,9,89),('Peoria','IL',2014,10,54),('Peoria','IL',2014,11,38),('Peoria','IL',2014,12,90),('Peoria','IL',2015,1,84),('Peoria','IL',2015,2,104),('Peoria','IL',2015,3,55),('Peoria','IL',2015,4,52),('Peoria','IL',2015,5,57),('Peoria','IL',2015,6,49),('Peoria','IL',2015,7,63),('Peoria','IL',2015,8,52),('Peoria','IL',2015,9,43),('Peoria','IL',2015,10,52),('Peoria','IL',2015,11,65),('Peoria','IL',2015,12,85),('Peoria','IL',2016,1,90),('Peoria','IL',2016,2,42),('Peoria','IL',2016,3,92),('Peoria','IL',2016,4,104),('Peoria','IL',2016,5,82),('Peoria','IL',2016,6,30),('Peoria','IL',2016,7,93),('Peoria','IL',2016,8,87),('Peoria','IL',2016,9,32),('Peoria','IL',2016,10,106),('Peoria','IL',2016,11,91),('Peoria','IL',2016,12,32),('Joliet','IL',2000,1,72),('Joliet','IL',2000,2,32),('Joliet','IL',2000,3,43),('Joliet','IL',2000,4,74),('Joliet','IL',2000,5,104),('Joliet','IL',2000,6,67),('Joliet','IL',2000,7,79),('Joliet','IL',2000,8,66),('Joliet','IL',2000,9,75),('Joliet','IL',2000,10,65),('Joliet','IL',2000,11,99),('Joliet','IL',2000,12,61),('Joliet','IL',2001,1,104),('Joliet','IL',2001,2,79),('Joliet','IL',2001,3,30),('Joliet','IL',2001,4,34),('Joliet','IL',2001,5,31),('Joliet','IL',2001,6,50),('Joliet','IL',2001,7,52),('Joliet','IL',2001,8,72),('Joliet','IL',2001,9,63),('Joliet','IL',2001,10,30),('Joliet','IL',2001,11,106),('Joliet','IL',2001,12,98),('Joliet','IL',2002,1,53),('Joliet','IL',2002,2,65),('Joliet','IL',2002,3,30),('Joliet','IL',2002,4,41),('Joliet','IL',2002,5,109),('Joliet','IL',2002,6,51),('Joliet','IL',2002,7,93),('Joliet','IL',2002,8,44),('Joliet','IL',2002,9,103),('Joliet','IL',2002,10,100),('Joliet','IL',2002,11,67),('Joliet','IL',2002,12,91),('Joliet','IL',2003,1,85),('Joliet','IL',2003,2,78),('Joliet','IL',2003,3,59),('Joliet','IL',2003,4,32),('Joliet','IL',2003,5,31),('Joliet','IL',2003,6,45),('Joliet','IL',2003,7,38),('Joliet','IL',2003,8,63),('Joliet','IL',2003,9,82),('Joliet','IL',2003,10,92),('Joliet','IL',2003,11,74),('Joliet','IL',2003,12,48),('Joliet','IL',2004,1,59),('Joliet','IL',2004,2,47),('Joliet','IL',2004,3,90),('Joliet','IL',2004,4,74),('Joliet','IL',2004,5,77),('Joliet','IL',2004,6,84),('Joliet','IL',2004,7,59),('Joliet','IL',2004,8,99),('Joliet','IL',2004,9,65),('Joliet','IL',2004,10,63),('Joliet','IL',2004,11,39),('Joliet','IL',2004,12,40),('Joliet','IL',2005,1,55),('Joliet','IL',2005,2,65),('Joliet','IL',2005,3,109),('Joliet','IL',2005,4,87),('Joliet','IL',2005,5,42),('Joliet','IL',2005,6,33),('Joliet','IL',2005,7,60),('Joliet','IL',2005,8,98),('Joliet','IL',2005,9,95),('Joliet','IL',2005,10,47),('Joliet','IL',2005,11,95),('Joliet','IL',2005,12,84),('Joliet','IL',2006,1,61),('Joliet','IL',2006,2,62),('Joliet','IL',2006,3,41),('Joliet','IL',2006,4,45),('Joliet','IL',2006,5,44),('Joliet','IL',2006,6,87),('Joliet','IL',2006,7,107),('Joliet','IL',2006,8,69),('Joliet','IL',2006,9,74),('Joliet','IL',2006,10,76),('Joliet','IL',2006,11,103),('Joliet','IL',2006,12,88),('Joliet','IL',2007,1,102),('Joliet','IL',2007,2,52),('Joliet','IL',2007,3,97),('Joliet','IL',2007,4,54),('Joliet','IL',2007,5,55),('Joliet','IL',2007,6,73),('Joliet','IL',2007,7,77),('Joliet','IL',2007,8,107),('Joliet','IL',2007,9,96),('Joliet','IL',2007,10,56),('Joliet','IL',2007,11,84),('Joliet','IL',2007,12,90),('Joliet','IL',2008,1,86),('Joliet','IL',2008,2,74),('Joliet','IL',2008,3,101),('Joliet','IL',2008,4,35),('Joliet','IL',2008,5,73),('Joliet','IL',2008,6,66),('Joliet','IL',2008,7,50),('Joliet','IL',2008,8,43),('Joliet','IL',2008,9,94),('Joliet','IL',2008,10,33),('Joliet','IL',2008,11,45),('Joliet','IL',2008,12,75),('Joliet','IL',2009,1,59),('Joliet','IL',2009,2,78),('Joliet','IL',2009,3,58),('Joliet','IL',2009,4,65),('Joliet','IL',2009,5,68),('Joliet','IL',2009,6,69),('Joliet','IL',2009,7,94),('Joliet','IL',2009,8,80),('Joliet','IL',2009,9,83),('Joliet','IL',2009,10,91),('Joliet','IL',2009,11,40),('Joliet','IL',2009,12,81),('Joliet','IL',2010,1,65),('Joliet','IL',2010,2,32),('Joliet','IL',2010,3,97),('Joliet','IL',2010,4,48),('Joliet','IL',2010,5,101),('Joliet','IL',2010,6,86),('Joliet','IL',2010,7,68),('Joliet','IL',2010,8,78),('Joliet','IL',2010,9,79),('Joliet','IL',2010,10,65),('Joliet','IL',2010,11,109),('Joliet','IL',2010,12,81),('Joliet','IL',2011,1,45),('Joliet','IL',2011,2,102),('Joliet','IL',2011,3,70),('Joliet','IL',2011,4,99),('Joliet','IL',2011,5,59),('Joliet','IL',2011,6,108),('Joliet','IL',2011,7,78),('Joliet','IL',2011,8,84),('Joliet','IL',2011,9,50),('Joliet','IL',2011,10,55),('Joliet','IL',2011,11,59),('Joliet','IL',2011,12,38),('Joliet','IL',2012,1,30),('Joliet','IL',2012,2,41),('Joliet','IL',2012,3,86),('Joliet','IL',2012,4,96),('Joliet','IL',2012,5,87),('Joliet','IL',2012,6,44),('Joliet','IL',2012,7,57),('Joliet','IL',2012,8,67),('Joliet','IL',2012,9,90),('Joliet','IL',2012,10,90),('Joliet','IL',2012,11,53),('Joliet','IL',2012,12,101),('Joliet','IL',2013,1,50),('Joliet','IL',2013,2,32),('Joliet','IL',2013,3,47),('Joliet','IL',2013,4,102),('Joliet','IL',2013,5,79),('Joliet','IL',2013,6,57),('Joliet','IL',2013,7,31),('Joliet','IL',2013,8,34),('Joliet','IL',2013,9,71),('Joliet','IL',2013,10,32),('Joliet','IL',2013,11,46),('Joliet','IL',2013,12,58),('Joliet','IL',2014,1,52),('Joliet','IL',2014,2,81),('Joliet','IL',2014,3,87),('Joliet','IL',2014,4,98),('Joliet','IL',2014,5,44),('Joliet','IL',2014,6,77),('Joliet','IL',2014,7,78),('Joliet','IL',2014,8,74),('Joliet','IL',2014,9,71),('Joliet','IL',2014,10,92),('Joliet','IL',2014,11,63),('Joliet','IL',2014,12,82),('Joliet','IL',2015,1,53),('Joliet','IL',2015,2,66),('Joliet','IL',2015,3,35),('Joliet','IL',2015,4,66),('Joliet','IL',2015,5,71),('Joliet','IL',2015,6,55),('Joliet','IL',2015,7,41),('Joliet','IL',2015,8,93),('Joliet','IL',2015,9,35),('Joliet','IL',2015,10,78),('Joliet','IL',2015,11,104),('Joliet','IL',2015,12,64),('Joliet','IL',2016,1,57),('Joliet','IL',2016,2,48),('Joliet','IL',2016,3,104),('Joliet','IL',2016,4,76),('Joliet','IL',2016,5,102),('Joliet','IL',2016,6,61),('Joliet','IL',2016,7,59),('Joliet','IL',2016,8,68),('Joliet','IL',2016,9,76),('Joliet','IL',2016,10,108),('Joliet','IL',2016,11,50),('Joliet','IL',2016,12,36),('Phoenix','AZ',2000,1,92),('Phoenix','AZ',2000,2,70),('Phoenix','AZ',2000,3,60),('Phoenix','AZ',2000,4,61),('Phoenix','AZ',2000,5,100),('Phoenix','AZ',2000,6,100),('Phoenix','AZ',2000,7,110),('Phoenix','AZ',2000,8,55),('Phoenix','AZ',2000,9,86),('Phoenix','AZ',2000,10,76),('Phoenix','AZ',2000,11,66),('Phoenix','AZ',2000,12,31),('Phoenix','AZ',2001,1,51),('Phoenix','AZ',2001,2,69),('Phoenix','AZ',2001,3,30),('Phoenix','AZ',2001,4,81),('Phoenix','AZ',2001,5,47),('Phoenix','AZ',2001,6,89),('Phoenix','AZ',2001,7,42),('Phoenix','AZ',2001,8,79),('Phoenix','AZ',2001,9,71),('Phoenix','AZ',2001,10,103),('Phoenix','AZ',2001,11,33),('Phoenix','AZ',2001,12,40),('Phoenix','AZ',2002,1,48),('Phoenix','AZ',2002,2,32),('Phoenix','AZ',2002,3,47),('Phoenix','AZ',2002,4,103),('Phoenix','AZ',2002,5,103),('Phoenix','AZ',2002,6,110),('Phoenix','AZ',2002,7,76),('Phoenix','AZ',2002,8,101),('Phoenix','AZ',2002,9,70),('Phoenix','AZ',2002,10,55),('Phoenix','AZ',2002,11,73),('Phoenix','AZ',2002,12,37),('Phoenix','AZ',2003,1,91),('Phoenix','AZ',2003,2,60),('Phoenix','AZ',2003,3,82),('Phoenix','AZ',2003,4,83),('Phoenix','AZ',2003,5,81),('Phoenix','AZ',2003,6,94),('Phoenix','AZ',2003,7,79),('Phoenix','AZ',2003,8,34),('Phoenix','AZ',2003,9,37),('Phoenix','AZ',2003,10,41),('Phoenix','AZ',2003,11,82),('Phoenix','AZ',2003,12,73),('Phoenix','AZ',2004,1,108),('Phoenix','AZ',2004,2,71),('Phoenix','AZ',2004,3,63),('Phoenix','AZ',2004,4,73),('Phoenix','AZ',2004,5,40),('Phoenix','AZ',2004,6,95),('Phoenix','AZ',2004,7,58),('Phoenix','AZ',2004,8,86),('Phoenix','AZ',2004,9,56),('Phoenix','AZ',2004,10,92),('Phoenix','AZ',2004,11,58),('Phoenix','AZ',2004,12,60),('Phoenix','AZ',2005,1,102),('Phoenix','AZ',2005,2,43),('Phoenix','AZ',2005,3,50),('Phoenix','AZ',2005,4,104),('Phoenix','AZ',2005,5,99),('Phoenix','AZ',2005,6,49),('Phoenix','AZ',2005,7,77),('Phoenix','AZ',2005,8,56),('Phoenix','AZ',2005,9,53),('Phoenix','AZ',2005,10,83),('Phoenix','AZ',2005,11,107),('Phoenix','AZ',2005,12,80),('Phoenix','AZ',2006,1,56),('Phoenix','AZ',2006,2,60),('Phoenix','AZ',2006,3,55),('Phoenix','AZ',2006,4,90),('Phoenix','AZ',2006,5,74),('Phoenix','AZ',2006,6,81),('Phoenix','AZ',2006,7,44),('Phoenix','AZ',2006,8,65),('Phoenix','AZ',2006,9,71),('Phoenix','AZ',2006,10,107),('Phoenix','AZ',2006,11,83),('Phoenix','AZ',2006,12,109),('Phoenix','AZ',2007,1,92),('Phoenix','AZ',2007,2,100),('Phoenix','AZ',2007,3,97),('Phoenix','AZ',2007,4,64),('Phoenix','AZ',2007,5,103),('Phoenix','AZ',2007,6,88),('Phoenix','AZ',2007,7,110),('Phoenix','AZ',2007,8,46),('Phoenix','AZ',2007,9,70),('Phoenix','AZ',2007,10,61),('Phoenix','AZ',2007,11,67),('Phoenix','AZ',2007,12,93),('Phoenix','AZ',2008,1,79),('Phoenix','AZ',2008,2,67),('Phoenix','AZ',2008,3,52),('Phoenix','AZ',2008,4,68),('Phoenix','AZ',2008,5,106),('Phoenix','AZ',2008,6,51),('Phoenix','AZ',2008,7,99),('Phoenix','AZ',2008,8,81),('Phoenix','AZ',2008,9,94),('Phoenix','AZ',2008,10,64),('Phoenix','AZ',2008,11,62),('Phoenix','AZ',2008,12,110),('Phoenix','AZ',2009,1,53),('Phoenix','AZ',2009,2,76),('Phoenix','AZ',2009,3,55),('Phoenix','AZ',2009,4,55),('Phoenix','AZ',2009,5,73),('Phoenix','AZ',2009,6,110),('Phoenix','AZ',2009,7,56),('Phoenix','AZ',2009,8,100),('Phoenix','AZ',2009,9,94),('Phoenix','AZ',2009,10,108),('Phoenix','AZ',2009,11,39),('Phoenix','AZ',2009,12,99),('Phoenix','AZ',2010,1,98),('Phoenix','AZ',2010,2,34),('Phoenix','AZ',2010,3,49),('Phoenix','AZ',2010,4,81),('Phoenix','AZ',2010,5,33),('Phoenix','AZ',2010,6,35),('Phoenix','AZ',2010,7,55),('Phoenix','AZ',2010,8,43),('Phoenix','AZ',2010,9,72),('Phoenix','AZ',2010,10,88),('Phoenix','AZ',2010,11,105),('Phoenix','AZ',2010,12,101),('Phoenix','AZ',2011,1,37),('Phoenix','AZ',2011,2,34),('Phoenix','AZ',2011,3,53),('Phoenix','AZ',2011,4,46),('Phoenix','AZ',2011,5,88),('Phoenix','AZ',2011,6,58),('Phoenix','AZ',2011,7,64),('Phoenix','AZ',2011,8,101),('Phoenix','AZ',2011,9,34),('Phoenix','AZ',2011,10,62),('Phoenix','AZ',2011,11,91),('Phoenix','AZ',2011,12,78),('Phoenix','AZ',2012,1,99),('Phoenix','AZ',2012,2,32),('Phoenix','AZ',2012,3,65),('Phoenix','AZ',2012,4,39),('Phoenix','AZ',2012,5,103),('Phoenix','AZ',2012,6,84),('Phoenix','AZ',2012,7,74),('Phoenix','AZ',2012,8,96),('Phoenix','AZ',2012,9,109),('Phoenix','AZ',2012,10,64),('Phoenix','AZ',2012,11,76),('Phoenix','AZ',2012,12,47),('Phoenix','AZ',2013,1,44),('Phoenix','AZ',2013,2,58),('Phoenix','AZ',2013,3,95),('Phoenix','AZ',2013,4,84),('Phoenix','AZ',2013,5,38),('Phoenix','AZ',2013,6,85),('Phoenix','AZ',2013,7,76),('Phoenix','AZ',2013,8,75),('Phoenix','AZ',2013,9,45),('Phoenix','AZ',2013,10,79),('Phoenix','AZ',2013,11,110),('Phoenix','AZ',2013,12,37),('Phoenix','AZ',2014,1,31),('Phoenix','AZ',2014,2,69),('Phoenix','AZ',2014,3,82),('Phoenix','AZ',2014,4,88),('Phoenix','AZ',2014,5,33),('Phoenix','AZ',2014,6,37),('Phoenix','AZ',2014,7,50),('Phoenix','AZ',2014,8,70),('Phoenix','AZ',2014,9,59),('Phoenix','AZ',2014,10,92),('Phoenix','AZ',2014,11,44),('Phoenix','AZ',2014,12,30),('Phoenix','AZ',2015,1,84),('Phoenix','AZ',2015,2,34),('Phoenix','AZ',2015,3,84),('Phoenix','AZ',2015,4,52),('Phoenix','AZ',2015,5,59),('Phoenix','AZ',2015,6,45),('Phoenix','AZ',2015,7,67),('Phoenix','AZ',2015,8,57),('Phoenix','AZ',2015,9,109),('Phoenix','AZ',2015,10,33),('Phoenix','AZ',2015,11,55),('Phoenix','AZ',2015,12,109),('Phoenix','AZ',2016,1,60),('Phoenix','AZ',2016,2,75),('Phoenix','AZ',2016,3,87),('Phoenix','AZ',2016,4,76),('Phoenix','AZ',2016,5,109),('Phoenix','AZ',2016,6,76),('Phoenix','AZ',2016,7,31),('Phoenix','AZ',2016,8,68),('Phoenix','AZ',2016,9,59),('Phoenix','AZ',2016,10,53),('Phoenix','AZ',2016,11,81),('Phoenix','AZ',2016,12,64),('Tucson','AZ',2000,1,64),('Tucson','AZ',2000,2,35),('Tucson','AZ',2000,3,40),('Tucson','AZ',2000,4,72),('Tucson','AZ',2000,5,84),('Tucson','AZ',2000,6,86),('Tucson','AZ',2000,7,54),('Tucson','AZ',2000,8,62),('Tucson','AZ',2000,9,87),('Tucson','AZ',2000,10,61),('Tucson','AZ',2000,11,71),('Tucson','AZ',2000,12,58),('Tucson','AZ',2001,1,71),('Tucson','AZ',2001,2,31),('Tucson','AZ',2001,3,72),('Tucson','AZ',2001,4,74),('Tucson','AZ',2001,5,72),('Tucson','AZ',2001,6,41),('Tucson','AZ',2001,7,54),('Tucson','AZ',2001,8,78),('Tucson','AZ',2001,9,41),('Tucson','AZ',2001,10,108),('Tucson','AZ',2001,11,83),('Tucson','AZ',2001,12,53),('Tucson','AZ',2002,1,47),('Tucson','AZ',2002,2,65),('Tucson','AZ',2002,3,99),('Tucson','AZ',2002,4,71),('Tucson','AZ',2002,5,56),('Tucson','AZ',2002,6,83),('Tucson','AZ',2002,7,58),('Tucson','AZ',2002,8,98),('Tucson','AZ',2002,9,56),('Tucson','AZ',2002,10,88),('Tucson','AZ',2002,11,57),('Tucson','AZ',2002,12,67),('Tucson','AZ',2003,1,94),('Tucson','AZ',2003,2,81),('Tucson','AZ',2003,3,101),('Tucson','AZ',2003,4,44),('Tucson','AZ',2003,5,32),('Tucson','AZ',2003,6,48),('Tucson','AZ',2003,7,88),('Tucson','AZ',2003,8,89),('Tucson','AZ',2003,9,108),('Tucson','AZ',2003,10,84),('Tucson','AZ',2003,11,68),('Tucson','AZ',2003,12,45),('Tucson','AZ',2004,1,84),('Tucson','AZ',2004,2,83),('Tucson','AZ',2004,3,74),('Tucson','AZ',2004,4,80),('Tucson','AZ',2004,5,71),('Tucson','AZ',2004,6,60),('Tucson','AZ',2004,7,68),('Tucson','AZ',2004,8,64),('Tucson','AZ',2004,9,52),('Tucson','AZ',2004,10,70),('Tucson','AZ',2004,11,109),('Tucson','AZ',2004,12,107),('Tucson','AZ',2005,1,108),('Tucson','AZ',2005,2,83),('Tucson','AZ',2005,3,39),('Tucson','AZ',2005,4,38),('Tucson','AZ',2005,5,83),('Tucson','AZ',2005,6,71),('Tucson','AZ',2005,7,102),('Tucson','AZ',2005,8,73),('Tucson','AZ',2005,9,49),('Tucson','AZ',2005,10,44),('Tucson','AZ',2005,11,52),('Tucson','AZ',2005,12,39),('Tucson','AZ',2006,1,64),('Tucson','AZ',2006,2,61),('Tucson','AZ',2006,3,42),('Tucson','AZ',2006,4,91),('Tucson','AZ',2006,5,108),('Tucson','AZ',2006,6,78),('Tucson','AZ',2006,7,62),('Tucson','AZ',2006,8,109),('Tucson','AZ',2006,9,62),('Tucson','AZ',2006,10,48),('Tucson','AZ',2006,11,64),('Tucson','AZ',2006,12,37),('Tucson','AZ',2007,1,60),('Tucson','AZ',2007,2,100),('Tucson','AZ',2007,3,68),('Tucson','AZ',2007,4,86),('Tucson','AZ',2007,5,53),('Tucson','AZ',2007,6,53),('Tucson','AZ',2007,7,87),('Tucson','AZ',2007,8,85),('Tucson','AZ',2007,9,88),('Tucson','AZ',2007,10,39),('Tucson','AZ',2007,11,37),('Tucson','AZ',2007,12,31),('Tucson','AZ',2008,1,57),('Tucson','AZ',2008,2,94),('Tucson','AZ',2008,3,36),('Tucson','AZ',2008,4,66),('Tucson','AZ',2008,5,35),('Tucson','AZ',2008,6,70),('Tucson','AZ',2008,7,46),('Tucson','AZ',2008,8,39),('Tucson','AZ',2008,9,51),('Tucson','AZ',2008,10,93),('Tucson','AZ',2008,11,70),('Tucson','AZ',2008,12,34),('Tucson','AZ',2009,1,93),('Tucson','AZ',2009,2,89),('Tucson','AZ',2009,3,45),('Tucson','AZ',2009,4,47),('Tucson','AZ',2009,5,55),('Tucson','AZ',2009,6,93),('Tucson','AZ',2009,7,93),('Tucson','AZ',2009,8,63),('Tucson','AZ',2009,9,30),('Tucson','AZ',2009,10,59),('Tucson','AZ',2009,11,104),('Tucson','AZ',2009,12,107),('Tucson','AZ',2010,1,30),('Tucson','AZ',2010,2,89),('Tucson','AZ',2010,3,89),('Tucson','AZ',2010,4,51),('Tucson','AZ',2010,5,30),('Tucson','AZ',2010,6,74),('Tucson','AZ',2010,7,40),('Tucson','AZ',2010,8,52),('Tucson','AZ',2010,9,37),('Tucson','AZ',2010,10,86),('Tucson','AZ',2010,11,93),('Tucson','AZ',2010,12,63),('Tucson','AZ',2011,1,54),('Tucson','AZ',2011,2,95),('Tucson','AZ',2011,3,106),('Tucson','AZ',2011,4,60),('Tucson','AZ',2011,5,74),('Tucson','AZ',2011,6,39),('Tucson','AZ',2011,7,66),('Tucson','AZ',2011,8,51),('Tucson','AZ',2011,9,104),('Tucson','AZ',2011,10,85),('Tucson','AZ',2011,11,75),('Tucson','AZ',2011,12,109),('Tucson','AZ',2012,1,60),('Tucson','AZ',2012,2,31),('Tucson','AZ',2012,3,68),('Tucson','AZ',2012,4,62),('Tucson','AZ',2012,5,32),('Tucson','AZ',2012,6,50),('Tucson','AZ',2012,7,106),('Tucson','AZ',2012,8,53),('Tucson','AZ',2012,9,54),('Tucson','AZ',2012,10,94),('Tucson','AZ',2012,11,60),('Tucson','AZ',2012,12,77),('Tucson','AZ',2013,1,109),('Tucson','AZ',2013,2,73),('Tucson','AZ',2013,3,51),('Tucson','AZ',2013,4,38),('Tucson','AZ',2013,5,76),('Tucson','AZ',2013,6,107),('Tucson','AZ',2013,7,45),('Tucson','AZ',2013,8,34),('Tucson','AZ',2013,9,109),('Tucson','AZ',2013,10,33),('Tucson','AZ',2013,11,61),('Tucson','AZ',2013,12,105),('Tucson','AZ',2014,1,65),('Tucson','AZ',2014,2,96),('Tucson','AZ',2014,3,95),('Tucson','AZ',2014,4,106),('Tucson','AZ',2014,5,85),('Tucson','AZ',2014,6,53),('Tucson','AZ',2014,7,63),('Tucson','AZ',2014,8,48),('Tucson','AZ',2014,9,102),('Tucson','AZ',2014,10,79),('Tucson','AZ',2014,11,82),('Tucson','AZ',2014,12,48),('Tucson','AZ',2015,1,46),('Tucson','AZ',2015,2,106),('Tucson','AZ',2015,3,64),('Tucson','AZ',2015,4,75),('Tucson','AZ',2015,5,57),('Tucson','AZ',2015,6,36),('Tucson','AZ',2015,7,66),('Tucson','AZ',2015,8,103),('Tucson','AZ',2015,9,74),('Tucson','AZ',2015,10,95),('Tucson','AZ',2015,11,34),('Tucson','AZ',2015,12,102),('Tucson','AZ',2016,1,76),('Tucson','AZ',2016,2,105),('Tucson','AZ',2016,3,106),('Tucson','AZ',2016,4,36),('Tucson','AZ',2016,5,62),('Tucson','AZ',2016,6,99),('Tucson','AZ',2016,7,31),('Tucson','AZ',2016,8,76),('Tucson','AZ',2016,9,87),('Tucson','AZ',2016,10,67),('Tucson','AZ',2016,11,87),('Tucson','AZ',2016,12,65),('Tempe','AZ',2000,1,35),('Tempe','AZ',2000,2,56),('Tempe','AZ',2000,3,69),('Tempe','AZ',2000,4,62),('Tempe','AZ',2000,5,92),('Tempe','AZ',2000,6,67),('Tempe','AZ',2000,7,50),('Tempe','AZ',2000,8,90),('Tempe','AZ',2000,9,31),('Tempe','AZ',2000,10,48),('Tempe','AZ',2000,11,89),('Tempe','AZ',2000,12,59),('Tempe','AZ',2001,1,50),('Tempe','AZ',2001,2,41),('Tempe','AZ',2001,3,81),('Tempe','AZ',2001,4,50),('Tempe','AZ',2001,5,50),('Tempe','AZ',2001,6,87),('Tempe','AZ',2001,7,36),('Tempe','AZ',2001,8,65),('Tempe','AZ',2001,9,87),('Tempe','AZ',2001,10,73),('Tempe','AZ',2001,11,72),('Tempe','AZ',2001,12,38),('Tempe','AZ',2002,1,56),('Tempe','AZ',2002,2,38),('Tempe','AZ',2002,3,91),('Tempe','AZ',2002,4,107),('Tempe','AZ',2002,5,74),('Tempe','AZ',2002,6,71),('Tempe','AZ',2002,7,73),('Tempe','AZ',2002,8,39),('Tempe','AZ',2002,9,84),('Tempe','AZ',2002,10,51),('Tempe','AZ',2002,11,34),('Tempe','AZ',2002,12,67),('Tempe','AZ',2003,1,99),('Tempe','AZ',2003,2,39),('Tempe','AZ',2003,3,54),('Tempe','AZ',2003,4,57),('Tempe','AZ',2003,5,53),('Tempe','AZ',2003,6,108),('Tempe','AZ',2003,7,86),('Tempe','AZ',2003,8,88),('Tempe','AZ',2003,9,50),('Tempe','AZ',2003,10,94),('Tempe','AZ',2003,11,63),('Tempe','AZ',2003,12,94),('Tempe','AZ',2004,1,43),('Tempe','AZ',2004,2,94),('Tempe','AZ',2004,3,102),('Tempe','AZ',2004,4,34),('Tempe','AZ',2004,5,78),('Tempe','AZ',2004,6,34),('Tempe','AZ',2004,7,84),('Tempe','AZ',2004,8,52),('Tempe','AZ',2004,9,30),('Tempe','AZ',2004,10,91),('Tempe','AZ',2004,11,39),('Tempe','AZ',2004,12,72),('Tempe','AZ',2005,1,64),('Tempe','AZ',2005,2,36),('Tempe','AZ',2005,3,40),('Tempe','AZ',2005,4,74),('Tempe','AZ',2005,5,85),('Tempe','AZ',2005,6,104),('Tempe','AZ',2005,7,65),('Tempe','AZ',2005,8,83),('Tempe','AZ',2005,9,59),('Tempe','AZ',2005,10,88),('Tempe','AZ',2005,11,39),('Tempe','AZ',2005,12,81),('Tempe','AZ',2006,1,99),('Tempe','AZ',2006,2,32),('Tempe','AZ',2006,3,67),('Tempe','AZ',2006,4,56),('Tempe','AZ',2006,5,69),('Tempe','AZ',2006,6,56),('Tempe','AZ',2006,7,66),('Tempe','AZ',2006,8,58),('Tempe','AZ',2006,9,99),('Tempe','AZ',2006,10,101),('Tempe','AZ',2006,11,86),('Tempe','AZ',2006,12,47),('Tempe','AZ',2007,1,60),('Tempe','AZ',2007,2,34),('Tempe','AZ',2007,3,35),('Tempe','AZ',2007,4,91),('Tempe','AZ',2007,5,48),('Tempe','AZ',2007,6,70),('Tempe','AZ',2007,7,63),('Tempe','AZ',2007,8,53),('Tempe','AZ',2007,9,89),('Tempe','AZ',2007,10,100),('Tempe','AZ',2007,11,39),('Tempe','AZ',2007,12,78),('Tempe','AZ',2008,1,48),('Tempe','AZ',2008,2,101),('Tempe','AZ',2008,3,51),('Tempe','AZ',2008,4,35),('Tempe','AZ',2008,5,72),('Tempe','AZ',2008,6,59),('Tempe','AZ',2008,7,62),('Tempe','AZ',2008,8,35),('Tempe','AZ',2008,9,88),('Tempe','AZ',2008,10,44),('Tempe','AZ',2008,11,80),('Tempe','AZ',2008,12,91),('Tempe','AZ',2009,1,91),('Tempe','AZ',2009,2,68),('Tempe','AZ',2009,3,45),('Tempe','AZ',2009,4,51),('Tempe','AZ',2009,5,39),('Tempe','AZ',2009,6,88),('Tempe','AZ',2009,7,53),('Tempe','AZ',2009,8,45),('Tempe','AZ',2009,9,102),('Tempe','AZ',2009,10,82),('Tempe','AZ',2009,11,53),('Tempe','AZ',2009,12,76),('Tempe','AZ',2010,1,47),('Tempe','AZ',2010,2,89),('Tempe','AZ',2010,3,89),('Tempe','AZ',2010,4,100),('Tempe','AZ',2010,5,39),('Tempe','AZ',2010,6,73),('Tempe','AZ',2010,7,74),('Tempe','AZ',2010,8,59),('Tempe','AZ',2010,9,103),('Tempe','AZ',2010,10,37),('Tempe','AZ',2010,11,88),('Tempe','AZ',2010,12,41),('Tempe','AZ',2011,1,58),('Tempe','AZ',2011,2,35),('Tempe','AZ',2011,3,76),('Tempe','AZ',2011,4,81),('Tempe','AZ',2011,5,47),('Tempe','AZ',2011,6,93),('Tempe','AZ',2011,7,46),('Tempe','AZ',2011,8,41),('Tempe','AZ',2011,9,44),('Tempe','AZ',2011,10,34),('Tempe','AZ',2011,11,83),('Tempe','AZ',2011,12,103),('Tempe','AZ',2012,1,75),('Tempe','AZ',2012,2,60),('Tempe','AZ',2012,3,87),('Tempe','AZ',2012,4,65),('Tempe','AZ',2012,5,56),('Tempe','AZ',2012,6,106),('Tempe','AZ',2012,7,105),('Tempe','AZ',2012,8,49),('Tempe','AZ',2012,9,107),('Tempe','AZ',2012,10,91),('Tempe','AZ',2012,11,48),('Tempe','AZ',2012,12,76),('Tempe','AZ',2013,1,36),('Tempe','AZ',2013,2,93),('Tempe','AZ',2013,3,57),('Tempe','AZ',2013,4,65),('Tempe','AZ',2013,5,94),('Tempe','AZ',2013,6,78),('Tempe','AZ',2013,7,94),('Tempe','AZ',2013,8,93),('Tempe','AZ',2013,9,106),('Tempe','AZ',2013,10,68),('Tempe','AZ',2013,11,33),('Tempe','AZ',2013,12,109),('Tempe','AZ',2014,1,75),('Tempe','AZ',2014,2,84),('Tempe','AZ',2014,3,43),('Tempe','AZ',2014,4,84),('Tempe','AZ',2014,5,35),('Tempe','AZ',2014,6,42),('Tempe','AZ',2014,7,52),('Tempe','AZ',2014,8,55),('Tempe','AZ',2014,9,44),('Tempe','AZ',2014,10,44),('Tempe','AZ',2014,11,43),('Tempe','AZ',2014,12,71),('Tempe','AZ',2015,1,55),('Tempe','AZ',2015,2,82),('Tempe','AZ',2015,3,76),('Tempe','AZ',2015,4,37),('Tempe','AZ',2015,5,67),('Tempe','AZ',2015,6,37),('Tempe','AZ',2015,7,96),('Tempe','AZ',2015,8,56),('Tempe','AZ',2015,9,107),('Tempe','AZ',2015,10,65),('Tempe','AZ',2015,11,60),('Tempe','AZ',2015,12,44),('Tempe','AZ',2016,1,38),('Tempe','AZ',2016,2,107),('Tempe','AZ',2016,3,35),('Tempe','AZ',2016,4,72),('Tempe','AZ',2016,5,100),('Tempe','AZ',2016,6,105),('Tempe','AZ',2016,7,44),('Tempe','AZ',2016,8,65),('Tempe','AZ',2016,9,79),('Tempe','AZ',2016,10,75),('Tempe','AZ',2016,11,95),('Tempe','AZ',2016,12,103),('Chandler','AZ',2000,1,70),('Chandler','AZ',2000,2,53),('Chandler','AZ',2000,3,100),('Chandler','AZ',2000,4,64),('Chandler','AZ',2000,5,108),('Chandler','AZ',2000,6,103),('Chandler','AZ',2000,7,76),('Chandler','AZ',2000,8,73),('Chandler','AZ',2000,9,53),('Chandler','AZ',2000,10,93),('Chandler','AZ',2000,11,38),('Chandler','AZ',2000,12,62),('Chandler','AZ',2001,1,107),('Chandler','AZ',2001,2,80),('Chandler','AZ',2001,3,83),('Chandler','AZ',2001,4,76),('Chandler','AZ',2001,5,57),('Chandler','AZ',2001,6,89),('Chandler','AZ',2001,7,91),('Chandler','AZ',2001,8,60),('Chandler','AZ',2001,9,105),('Chandler','AZ',2001,10,48),('Chandler','AZ',2001,11,97),('Chandler','AZ',2001,12,108),('Chandler','AZ',2002,1,31),('Chandler','AZ',2002,2,49),('Chandler','AZ',2002,3,40),('Chandler','AZ',2002,4,71),('Chandler','AZ',2002,5,87),('Chandler','AZ',2002,6,90),('Chandler','AZ',2002,7,58),('Chandler','AZ',2002,8,46),('Chandler','AZ',2002,9,87),('Chandler','AZ',2002,10,71),('Chandler','AZ',2002,11,71),('Chandler','AZ',2002,12,109),('Chandler','AZ',2003,1,94),('Chandler','AZ',2003,2,66),('Chandler','AZ',2003,3,44),('Chandler','AZ',2003,4,60),('Chandler','AZ',2003,5,34),('Chandler','AZ',2003,6,106),('Chandler','AZ',2003,7,74),('Chandler','AZ',2003,8,106),('Chandler','AZ',2003,9,48),('Chandler','AZ',2003,10,95),('Chandler','AZ',2003,11,48),('Chandler','AZ',2003,12,71),('Chandler','AZ',2004,1,33),('Chandler','AZ',2004,2,64),('Chandler','AZ',2004,3,100),('Chandler','AZ',2004,4,103),('Chandler','AZ',2004,5,38),('Chandler','AZ',2004,6,42),('Chandler','AZ',2004,7,31),('Chandler','AZ',2004,8,60),('Chandler','AZ',2004,9,102),('Chandler','AZ',2004,10,102),('Chandler','AZ',2004,11,79),('Chandler','AZ',2004,12,81),('Chandler','AZ',2005,1,57),('Chandler','AZ',2005,2,73),('Chandler','AZ',2005,3,59),('Chandler','AZ',2005,4,91),('Chandler','AZ',2005,5,96),('Chandler','AZ',2005,6,46),('Chandler','AZ',2005,7,63),('Chandler','AZ',2005,8,45),('Chandler','AZ',2005,9,76),('Chandler','AZ',2005,10,99),('Chandler','AZ',2005,11,43),('Chandler','AZ',2005,12,81),('Chandler','AZ',2006,1,57),('Chandler','AZ',2006,2,88),('Chandler','AZ',2006,3,104),('Chandler','AZ',2006,4,64),('Chandler','AZ',2006,5,98),('Chandler','AZ',2006,6,81),('Chandler','AZ',2006,7,53),('Chandler','AZ',2006,8,92),('Chandler','AZ',2006,9,43),('Chandler','AZ',2006,10,89),('Chandler','AZ',2006,11,103),('Chandler','AZ',2006,12,94),('Chandler','AZ',2007,1,55),('Chandler','AZ',2007,2,66),('Chandler','AZ',2007,3,87),('Chandler','AZ',2007,4,41),('Chandler','AZ',2007,5,65),('Chandler','AZ',2007,6,70),('Chandler','AZ',2007,7,93),('Chandler','AZ',2007,8,86),('Chandler','AZ',2007,9,75),('Chandler','AZ',2007,10,94),('Chandler','AZ',2007,11,51),('Chandler','AZ',2007,12,39),('Chandler','AZ',2008,1,90),('Chandler','AZ',2008,2,99),('Chandler','AZ',2008,3,81),('Chandler','AZ',2008,4,55),('Chandler','AZ',2008,5,104),('Chandler','AZ',2008,6,32),('Chandler','AZ',2008,7,81),('Chandler','AZ',2008,8,89),('Chandler','AZ',2008,9,43),('Chandler','AZ',2008,10,75),('Chandler','AZ',2008,11,110),('Chandler','AZ',2008,12,102),('Chandler','AZ',2009,1,52),('Chandler','AZ',2009,2,53),('Chandler','AZ',2009,3,85),('Chandler','AZ',2009,4,83),('Chandler','AZ',2009,5,73),('Chandler','AZ',2009,6,92),('Chandler','AZ',2009,7,34),('Chandler','AZ',2009,8,72),('Chandler','AZ',2009,9,98),('Chandler','AZ',2009,10,94),('Chandler','AZ',2009,11,53),('Chandler','AZ',2009,12,93),('Chandler','AZ',2010,1,95),('Chandler','AZ',2010,2,78),('Chandler','AZ',2010,3,63),('Chandler','AZ',2010,4,89),('Chandler','AZ',2010,5,82),('Chandler','AZ',2010,6,52),('Chandler','AZ',2010,7,46),('Chandler','AZ',2010,8,69),('Chandler','AZ',2010,9,61),('Chandler','AZ',2010,10,31),('Chandler','AZ',2010,11,73),('Chandler','AZ',2010,12,46),('Chandler','AZ',2011,1,80),('Chandler','AZ',2011,2,33),('Chandler','AZ',2011,3,43),('Chandler','AZ',2011,4,100),('Chandler','AZ',2011,5,91),('Chandler','AZ',2011,6,32),('Chandler','AZ',2011,7,30),('Chandler','AZ',2011,8,100),('Chandler','AZ',2011,9,31),('Chandler','AZ',2011,10,102),('Chandler','AZ',2011,11,86),('Chandler','AZ',2011,12,63),('Chandler','AZ',2012,1,55),('Chandler','AZ',2012,2,87),('Chandler','AZ',2012,3,101),('Chandler','AZ',2012,4,77),('Chandler','AZ',2012,5,92),('Chandler','AZ',2012,6,61),('Chandler','AZ',2012,7,73),('Chandler','AZ',2012,8,31),('Chandler','AZ',2012,9,36),('Chandler','AZ',2012,10,38),('Chandler','AZ',2012,11,107),('Chandler','AZ',2012,12,74),('Chandler','AZ',2013,1,100),('Chandler','AZ',2013,2,45),('Chandler','AZ',2013,3,110),('Chandler','AZ',2013,4,99),('Chandler','AZ',2013,5,100),('Chandler','AZ',2013,6,53),('Chandler','AZ',2013,7,108),('Chandler','AZ',2013,8,51),('Chandler','AZ',2013,9,95),('Chandler','AZ',2013,10,42),('Chandler','AZ',2013,11,65),('Chandler','AZ',2013,12,91),('Chandler','AZ',2014,1,39),('Chandler','AZ',2014,2,84),('Chandler','AZ',2014,3,60),('Chandler','AZ',2014,4,91),('Chandler','AZ',2014,5,65),('Chandler','AZ',2014,6,30),('Chandler','AZ',2014,7,36),('Chandler','AZ',2014,8,56),('Chandler','AZ',2014,9,104),('Chandler','AZ',2014,10,84),('Chandler','AZ',2014,11,108),('Chandler','AZ',2014,12,106),('Chandler','AZ',2015,1,58),('Chandler','AZ',2015,2,81),('Chandler','AZ',2015,3,74),('Chandler','AZ',2015,4,80),('Chandler','AZ',2015,5,103),('Chandler','AZ',2015,6,82),('Chandler','AZ',2015,7,44),('Chandler','AZ',2015,8,35),('Chandler','AZ',2015,9,69),('Chandler','AZ',2015,10,55),('Chandler','AZ',2015,11,92),('Chandler','AZ',2015,12,105),('Chandler','AZ',2016,1,55),('Chandler','AZ',2016,2,108),('Chandler','AZ',2016,3,44),('Chandler','AZ',2016,4,85),('Chandler','AZ',2016,5,67),('Chandler','AZ',2016,6,102),('Chandler','AZ',2016,7,61),('Chandler','AZ',2016,8,43),('Chandler','AZ',2016,9,98),('Chandler','AZ',2016,10,87),('Chandler','AZ',2016,11,53),('Chandler','AZ',2016,12,108),('Sedona','AZ',2000,1,47),('Sedona','AZ',2000,2,84),('Sedona','AZ',2000,3,40),('Sedona','AZ',2000,4,70),('Sedona','AZ',2000,5,72),('Sedona','AZ',2000,6,48),('Sedona','AZ',2000,7,34),('Sedona','AZ',2000,8,94),('Sedona','AZ',2000,9,71),('Sedona','AZ',2000,10,95),('Sedona','AZ',2000,11,93),('Sedona','AZ',2000,12,103),('Sedona','AZ',2001,1,105),('Sedona','AZ',2001,2,90),('Sedona','AZ',2001,3,33),('Sedona','AZ',2001,4,88),('Sedona','AZ',2001,5,86),('Sedona','AZ',2001,6,51),('Sedona','AZ',2001,7,31),('Sedona','AZ',2001,8,52),('Sedona','AZ',2001,9,104),('Sedona','AZ',2001,10,108),('Sedona','AZ',2001,11,96),('Sedona','AZ',2001,12,80),('Sedona','AZ',2002,1,36),('Sedona','AZ',2002,2,57),('Sedona','AZ',2002,3,81),('Sedona','AZ',2002,4,100),('Sedona','AZ',2002,5,94),('Sedona','AZ',2002,6,69),('Sedona','AZ',2002,7,37),('Sedona','AZ',2002,8,52),('Sedona','AZ',2002,9,74),('Sedona','AZ',2002,10,105),('Sedona','AZ',2002,11,76),('Sedona','AZ',2002,12,40),('Sedona','AZ',2003,1,49),('Sedona','AZ',2003,2,76),('Sedona','AZ',2003,3,80),('Sedona','AZ',2003,4,33),('Sedona','AZ',2003,5,62),('Sedona','AZ',2003,6,88),('Sedona','AZ',2003,7,37),('Sedona','AZ',2003,8,74),('Sedona','AZ',2003,9,93),('Sedona','AZ',2003,10,90),('Sedona','AZ',2003,11,83),('Sedona','AZ',2003,12,95),('Sedona','AZ',2004,1,66),('Sedona','AZ',2004,2,71),('Sedona','AZ',2004,3,104),('Sedona','AZ',2004,4,67),('Sedona','AZ',2004,5,54),('Sedona','AZ',2004,6,61),('Sedona','AZ',2004,7,106),('Sedona','AZ',2004,8,67),('Sedona','AZ',2004,9,99),('Sedona','AZ',2004,10,42),('Sedona','AZ',2004,11,76),('Sedona','AZ',2004,12,103),('Sedona','AZ',2005,1,80),('Sedona','AZ',2005,2,110),('Sedona','AZ',2005,3,47),('Sedona','AZ',2005,4,50),('Sedona','AZ',2005,5,31),('Sedona','AZ',2005,6,57),('Sedona','AZ',2005,7,35),('Sedona','AZ',2005,8,47),('Sedona','AZ',2005,9,100),('Sedona','AZ',2005,10,63),('Sedona','AZ',2005,11,72),('Sedona','AZ',2005,12,91),('Sedona','AZ',2006,1,59),('Sedona','AZ',2006,2,66),('Sedona','AZ',2006,3,68),('Sedona','AZ',2006,4,97),('Sedona','AZ',2006,5,58),('Sedona','AZ',2006,6,92),('Sedona','AZ',2006,7,64),('Sedona','AZ',2006,8,100),('Sedona','AZ',2006,9,107),('Sedona','AZ',2006,10,57),('Sedona','AZ',2006,11,88),('Sedona','AZ',2006,12,93),('Sedona','AZ',2007,1,44),('Sedona','AZ',2007,2,94),('Sedona','AZ',2007,3,62),('Sedona','AZ',2007,4,62),('Sedona','AZ',2007,5,91),('Sedona','AZ',2007,6,82),('Sedona','AZ',2007,7,84),('Sedona','AZ',2007,8,71),('Sedona','AZ',2007,9,101),('Sedona','AZ',2007,10,82),('Sedona','AZ',2007,11,41),('Sedona','AZ',2007,12,72),('Sedona','AZ',2008,1,96),('Sedona','AZ',2008,2,32),('Sedona','AZ',2008,3,77),('Sedona','AZ',2008,4,68),('Sedona','AZ',2008,5,41),('Sedona','AZ',2008,6,105),('Sedona','AZ',2008,7,102),('Sedona','AZ',2008,8,85),('Sedona','AZ',2008,9,61),('Sedona','AZ',2008,10,108),('Sedona','AZ',2008,11,84),('Sedona','AZ',2008,12,69),('Sedona','AZ',2009,1,82),('Sedona','AZ',2009,2,87),('Sedona','AZ',2009,3,88),('Sedona','AZ',2009,4,89),('Sedona','AZ',2009,5,108),('Sedona','AZ',2009,6,79),('Sedona','AZ',2009,7,58),('Sedona','AZ',2009,8,47),('Sedona','AZ',2009,9,87),('Sedona','AZ',2009,10,36),('Sedona','AZ',2009,11,101),('Sedona','AZ',2009,12,67),('Sedona','AZ',2010,1,60),('Sedona','AZ',2010,2,58),('Sedona','AZ',2010,3,44),('Sedona','AZ',2010,4,38),('Sedona','AZ',2010,5,96),('Sedona','AZ',2010,6,91),('Sedona','AZ',2010,7,52),('Sedona','AZ',2010,8,40),('Sedona','AZ',2010,9,54),('Sedona','AZ',2010,10,32),('Sedona','AZ',2010,11,40),('Sedona','AZ',2010,12,67),('Sedona','AZ',2011,1,34),('Sedona','AZ',2011,2,97),('Sedona','AZ',2011,3,66),('Sedona','AZ',2011,4,59),('Sedona','AZ',2011,5,102),('Sedona','AZ',2011,6,61),('Sedona','AZ',2011,7,59),('Sedona','AZ',2011,8,108),('Sedona','AZ',2011,9,63),('Sedona','AZ',2011,10,42),('Sedona','AZ',2011,11,97),('Sedona','AZ',2011,12,58),('Sedona','AZ',2012,1,54),('Sedona','AZ',2012,2,49),('Sedona','AZ',2012,3,69),('Sedona','AZ',2012,4,50),('Sedona','AZ',2012,5,70),('Sedona','AZ',2012,6,32),('Sedona','AZ',2012,7,93),('Sedona','AZ',2012,8,75),('Sedona','AZ',2012,9,43),('Sedona','AZ',2012,10,64),('Sedona','AZ',2012,11,105),('Sedona','AZ',2012,12,91),('Sedona','AZ',2013,1,57),('Sedona','AZ',2013,2,82),('Sedona','AZ',2013,3,110),('Sedona','AZ',2013,4,32),('Sedona','AZ',2013,5,35),('Sedona','AZ',2013,6,67),('Sedona','AZ',2013,7,107),('Sedona','AZ',2013,8,52),('Sedona','AZ',2013,9,101),('Sedona','AZ',2013,10,55),('Sedona','AZ',2013,11,58),('Sedona','AZ',2013,12,49),('Sedona','AZ',2014,1,103),('Sedona','AZ',2014,2,34),('Sedona','AZ',2014,3,82),('Sedona','AZ',2014,4,90),('Sedona','AZ',2014,5,61),('Sedona','AZ',2014,6,88),('Sedona','AZ',2014,7,40),('Sedona','AZ',2014,8,85),('Sedona','AZ',2014,9,83),('Sedona','AZ',2014,10,43),('Sedona','AZ',2014,11,102),('Sedona','AZ',2014,12,81),('Sedona','AZ',2015,1,42),('Sedona','AZ',2015,2,90),('Sedona','AZ',2015,3,108),('Sedona','AZ',2015,4,97),('Sedona','AZ',2015,5,53),('Sedona','AZ',2015,6,55),('Sedona','AZ',2015,7,51),('Sedona','AZ',2015,8,32),('Sedona','AZ',2015,9,75),('Sedona','AZ',2015,10,71),('Sedona','AZ',2015,11,94),('Sedona','AZ',2015,12,45),('Sedona','AZ',2016,1,74),('Sedona','AZ',2016,2,85),('Sedona','AZ',2016,3,88),('Sedona','AZ',2016,4,41),('Sedona','AZ',2016,5,58),('Sedona','AZ',2016,6,70),('Sedona','AZ',2016,7,48),('Sedona','AZ',2016,8,60),('Sedona','AZ',2016,9,49),('Sedona','AZ',2016,10,61),('Sedona','AZ',2016,11,85),('Sedona','AZ',2016,12,48),('Gilbert','AZ',2000,1,48),('Gilbert','AZ',2000,2,104),('Gilbert','AZ',2000,3,51),('Gilbert','AZ',2000,4,45),('Gilbert','AZ',2000,5,71),('Gilbert','AZ',2000,6,49),('Gilbert','AZ',2000,7,82),('Gilbert','AZ',2000,8,86),('Gilbert','AZ',2000,9,59),('Gilbert','AZ',2000,10,52),('Gilbert','AZ',2000,11,109),('Gilbert','AZ',2000,12,76),('Gilbert','AZ',2001,1,60),('Gilbert','AZ',2001,2,82),('Gilbert','AZ',2001,3,35),('Gilbert','AZ',2001,4,106),('Gilbert','AZ',2001,5,99),('Gilbert','AZ',2001,6,73),('Gilbert','AZ',2001,7,92),('Gilbert','AZ',2001,8,104),('Gilbert','AZ',2001,9,88),('Gilbert','AZ',2001,10,72),('Gilbert','AZ',2001,11,37),('Gilbert','AZ',2001,12,43),('Gilbert','AZ',2002,1,89),('Gilbert','AZ',2002,2,67),('Gilbert','AZ',2002,3,36),('Gilbert','AZ',2002,4,54),('Gilbert','AZ',2002,5,103),('Gilbert','AZ',2002,6,51),('Gilbert','AZ',2002,7,30),('Gilbert','AZ',2002,8,54),('Gilbert','AZ',2002,9,99),('Gilbert','AZ',2002,10,96),('Gilbert','AZ',2002,11,58),('Gilbert','AZ',2002,12,46),('Gilbert','AZ',2003,1,107),('Gilbert','AZ',2003,2,90),('Gilbert','AZ',2003,3,35),('Gilbert','AZ',2003,4,56),('Gilbert','AZ',2003,5,65),('Gilbert','AZ',2003,6,54),('Gilbert','AZ',2003,7,52),('Gilbert','AZ',2003,8,87),('Gilbert','AZ',2003,9,64),('Gilbert','AZ',2003,10,49),('Gilbert','AZ',2003,11,87),('Gilbert','AZ',2003,12,66),('Gilbert','AZ',2004,1,106),('Gilbert','AZ',2004,2,109),('Gilbert','AZ',2004,3,69),('Gilbert','AZ',2004,4,70),('Gilbert','AZ',2004,5,98),('Gilbert','AZ',2004,6,70),('Gilbert','AZ',2004,7,62),('Gilbert','AZ',2004,8,104),('Gilbert','AZ',2004,9,75),('Gilbert','AZ',2004,10,69),('Gilbert','AZ',2004,11,95),('Gilbert','AZ',2004,12,78),('Gilbert','AZ',2005,1,79),('Gilbert','AZ',2005,2,77),('Gilbert','AZ',2005,3,79),('Gilbert','AZ',2005,4,46),('Gilbert','AZ',2005,5,89),('Gilbert','AZ',2005,6,89),('Gilbert','AZ',2005,7,84),('Gilbert','AZ',2005,8,47),('Gilbert','AZ',2005,9,105),('Gilbert','AZ',2005,10,84),('Gilbert','AZ',2005,11,102),('Gilbert','AZ',2005,12,57),('Gilbert','AZ',2006,1,95),('Gilbert','AZ',2006,2,91),('Gilbert','AZ',2006,3,57),('Gilbert','AZ',2006,4,43),('Gilbert','AZ',2006,5,98),('Gilbert','AZ',2006,6,41),('Gilbert','AZ',2006,7,43),('Gilbert','AZ',2006,8,46),('Gilbert','AZ',2006,9,44),('Gilbert','AZ',2006,10,78),('Gilbert','AZ',2006,11,86),('Gilbert','AZ',2006,12,94),('Gilbert','AZ',2007,1,68),('Gilbert','AZ',2007,2,108),('Gilbert','AZ',2007,3,87),('Gilbert','AZ',2007,4,99),('Gilbert','AZ',2007,5,82),('Gilbert','AZ',2007,6,55),('Gilbert','AZ',2007,7,69),('Gilbert','AZ',2007,8,37),('Gilbert','AZ',2007,9,53),('Gilbert','AZ',2007,10,44),('Gilbert','AZ',2007,11,104),('Gilbert','AZ',2007,12,91),('Gilbert','AZ',2008,1,73),('Gilbert','AZ',2008,2,60),('Gilbert','AZ',2008,3,52),('Gilbert','AZ',2008,4,44),('Gilbert','AZ',2008,5,43),('Gilbert','AZ',2008,6,82),('Gilbert','AZ',2008,7,44),('Gilbert','AZ',2008,8,108),('Gilbert','AZ',2008,9,65),('Gilbert','AZ',2008,10,57),('Gilbert','AZ',2008,11,92),('Gilbert','AZ',2008,12,62),('Gilbert','AZ',2009,1,61),('Gilbert','AZ',2009,2,42),('Gilbert','AZ',2009,3,31),('Gilbert','AZ',2009,4,36),('Gilbert','AZ',2009,5,107),('Gilbert','AZ',2009,6,90),('Gilbert','AZ',2009,7,73),('Gilbert','AZ',2009,8,107),('Gilbert','AZ',2009,9,75),('Gilbert','AZ',2009,10,55),('Gilbert','AZ',2009,11,101),('Gilbert','AZ',2009,12,80),('Gilbert','AZ',2010,1,93),('Gilbert','AZ',2010,2,109),('Gilbert','AZ',2010,3,44),('Gilbert','AZ',2010,4,81),('Gilbert','AZ',2010,5,56),('Gilbert','AZ',2010,6,75),('Gilbert','AZ',2010,7,86),('Gilbert','AZ',2010,8,94),('Gilbert','AZ',2010,9,30),('Gilbert','AZ',2010,10,49),('Gilbert','AZ',2010,11,103),('Gilbert','AZ',2010,12,33),('Gilbert','AZ',2011,1,51),('Gilbert','AZ',2011,2,105),('Gilbert','AZ',2011,3,88),('Gilbert','AZ',2011,4,103),('Gilbert','AZ',2011,5,40),('Gilbert','AZ',2011,6,68),('Gilbert','AZ',2011,7,100),('Gilbert','AZ',2011,8,83),('Gilbert','AZ',2011,9,92),('Gilbert','AZ',2011,10,68),('Gilbert','AZ',2011,11,70),('Gilbert','AZ',2011,12,99),('Gilbert','AZ',2012,1,76),('Gilbert','AZ',2012,2,89),('Gilbert','AZ',2012,3,105),('Gilbert','AZ',2012,4,84),('Gilbert','AZ',2012,5,56),('Gilbert','AZ',2012,6,95),('Gilbert','AZ',2012,7,82),('Gilbert','AZ',2012,8,90),('Gilbert','AZ',2012,9,48),('Gilbert','AZ',2012,10,110),('Gilbert','AZ',2012,11,110),('Gilbert','AZ',2012,12,36),('Gilbert','AZ',2013,1,35),('Gilbert','AZ',2013,2,98),('Gilbert','AZ',2013,3,96),('Gilbert','AZ',2013,4,66),('Gilbert','AZ',2013,5,56),('Gilbert','AZ',2013,6,96),('Gilbert','AZ',2013,7,43),('Gilbert','AZ',2013,8,88),('Gilbert','AZ',2013,9,98),('Gilbert','AZ',2013,10,38),('Gilbert','AZ',2013,11,75),('Gilbert','AZ',2013,12,41),('Gilbert','AZ',2014,1,30),('Gilbert','AZ',2014,2,70),('Gilbert','AZ',2014,3,76),('Gilbert','AZ',2014,4,38),('Gilbert','AZ',2014,5,40),('Gilbert','AZ',2014,6,99),('Gilbert','AZ',2014,7,63),('Gilbert','AZ',2014,8,41),('Gilbert','AZ',2014,9,100),('Gilbert','AZ',2014,10,79),('Gilbert','AZ',2014,11,65),('Gilbert','AZ',2014,12,30),('Gilbert','AZ',2015,1,73),('Gilbert','AZ',2015,2,44),('Gilbert','AZ',2015,3,83),('Gilbert','AZ',2015,4,102),('Gilbert','AZ',2015,5,50),('Gilbert','AZ',2015,6,95),('Gilbert','AZ',2015,7,56),('Gilbert','AZ',2015,8,99),('Gilbert','AZ',2015,9,104),('Gilbert','AZ',2015,10,64),('Gilbert','AZ',2015,11,72),('Gilbert','AZ',2015,12,41),('Gilbert','AZ',2016,1,108),('Gilbert','AZ',2016,2,68),('Gilbert','AZ',2016,3,41),('Gilbert','AZ',2016,4,50),('Gilbert','AZ',2016,5,68),('Gilbert','AZ',2016,6,33),('Gilbert','AZ',2016,7,34),('Gilbert','AZ',2016,8,37),('Gilbert','AZ',2016,9,55),('Gilbert','AZ',2016,10,90),('Gilbert','AZ',2016,11,108),('Gilbert','AZ',2016,12,98),('Glendale','AZ',2000,1,107),('Glendale','AZ',2000,2,42),('Glendale','AZ',2000,3,76),('Glendale','AZ',2000,4,91),('Glendale','AZ',2000,5,71),('Glendale','AZ',2000,6,74),('Glendale','AZ',2000,7,40),('Glendale','AZ',2000,8,108),('Glendale','AZ',2000,9,43),('Glendale','AZ',2000,10,67),('Glendale','AZ',2000,11,90),('Glendale','AZ',2000,12,72),('Glendale','AZ',2001,1,44),('Glendale','AZ',2001,2,53),('Glendale','AZ',2001,3,100),('Glendale','AZ',2001,4,101),('Glendale','AZ',2001,5,72),('Glendale','AZ',2001,6,38),('Glendale','AZ',2001,7,56),('Glendale','AZ',2001,8,37),('Glendale','AZ',2001,9,37),('Glendale','AZ',2001,10,104),('Glendale','AZ',2001,11,37),('Glendale','AZ',2001,12,94),('Glendale','AZ',2002,1,31),('Glendale','AZ',2002,2,74),('Glendale','AZ',2002,3,74),('Glendale','AZ',2002,4,94),('Glendale','AZ',2002,5,56),('Glendale','AZ',2002,6,62),('Glendale','AZ',2002,7,43),('Glendale','AZ',2002,8,43),('Glendale','AZ',2002,9,86),('Glendale','AZ',2002,10,101),('Glendale','AZ',2002,11,84),('Glendale','AZ',2002,12,52),('Glendale','AZ',2003,1,49),('Glendale','AZ',2003,2,33),('Glendale','AZ',2003,3,49),('Glendale','AZ',2003,4,95),('Glendale','AZ',2003,5,94),('Glendale','AZ',2003,6,37),('Glendale','AZ',2003,7,86),('Glendale','AZ',2003,8,37),('Glendale','AZ',2003,9,85),('Glendale','AZ',2003,10,100),('Glendale','AZ',2003,11,46),('Glendale','AZ',2003,12,60),('Glendale','AZ',2004,1,53),('Glendale','AZ',2004,2,82),('Glendale','AZ',2004,3,60),('Glendale','AZ',2004,4,74),('Glendale','AZ',2004,5,35),('Glendale','AZ',2004,6,80),('Glendale','AZ',2004,7,66),('Glendale','AZ',2004,8,93),('Glendale','AZ',2004,9,42),('Glendale','AZ',2004,10,79),('Glendale','AZ',2004,11,108),('Glendale','AZ',2004,12,46),('Glendale','AZ',2005,1,63),('Glendale','AZ',2005,2,107),('Glendale','AZ',2005,3,74),('Glendale','AZ',2005,4,36),('Glendale','AZ',2005,5,106),('Glendale','AZ',2005,6,50),('Glendale','AZ',2005,7,38),('Glendale','AZ',2005,8,107),('Glendale','AZ',2005,9,105),('Glendale','AZ',2005,10,106),('Glendale','AZ',2005,11,44),('Glendale','AZ',2005,12,108),('Glendale','AZ',2006,1,74),('Glendale','AZ',2006,2,57),('Glendale','AZ',2006,3,78),('Glendale','AZ',2006,4,96),('Glendale','AZ',2006,5,87),('Glendale','AZ',2006,6,45),('Glendale','AZ',2006,7,68),('Glendale','AZ',2006,8,71),('Glendale','AZ',2006,9,48),('Glendale','AZ',2006,10,67),('Glendale','AZ',2006,11,71),('Glendale','AZ',2006,12,42),('Glendale','AZ',2007,1,109),('Glendale','AZ',2007,2,104),('Glendale','AZ',2007,3,64),('Glendale','AZ',2007,4,55),('Glendale','AZ',2007,5,52),('Glendale','AZ',2007,6,97),('Glendale','AZ',2007,7,30),('Glendale','AZ',2007,8,53),('Glendale','AZ',2007,9,40),('Glendale','AZ',2007,10,94),('Glendale','AZ',2007,11,84),('Glendale','AZ',2007,12,69),('Glendale','AZ',2008,1,31),('Glendale','AZ',2008,2,73),('Glendale','AZ',2008,3,59),('Glendale','AZ',2008,4,39),('Glendale','AZ',2008,5,66),('Glendale','AZ',2008,6,45),('Glendale','AZ',2008,7,34),('Glendale','AZ',2008,8,87),('Glendale','AZ',2008,9,59),('Glendale','AZ',2008,10,82),('Glendale','AZ',2008,11,45),('Glendale','AZ',2008,12,65),('Glendale','AZ',2009,1,87),('Glendale','AZ',2009,2,39),('Glendale','AZ',2009,3,54),('Glendale','AZ',2009,4,86),('Glendale','AZ',2009,5,75),('Glendale','AZ',2009,6,56),('Glendale','AZ',2009,7,107),('Glendale','AZ',2009,8,73),('Glendale','AZ',2009,9,102),('Glendale','AZ',2009,10,59),('Glendale','AZ',2009,11,108),('Glendale','AZ',2009,12,71),('Glendale','AZ',2010,1,38),('Glendale','AZ',2010,2,81),('Glendale','AZ',2010,3,50),('Glendale','AZ',2010,4,68),('Glendale','AZ',2010,5,53),('Glendale','AZ',2010,6,44),('Glendale','AZ',2010,7,88),('Glendale','AZ',2010,8,41),('Glendale','AZ',2010,9,88),('Glendale','AZ',2010,10,78),('Glendale','AZ',2010,11,62),('Glendale','AZ',2010,12,45),('Glendale','AZ',2011,1,73),('Glendale','AZ',2011,2,106),('Glendale','AZ',2011,3,31),('Glendale','AZ',2011,4,87),('Glendale','AZ',2011,5,31),('Glendale','AZ',2011,6,91),('Glendale','AZ',2011,7,78),('Glendale','AZ',2011,8,90),('Glendale','AZ',2011,9,104),('Glendale','AZ',2011,10,103),('Glendale','AZ',2011,11,38),('Glendale','AZ',2011,12,56),('Glendale','AZ',2012,1,83),('Glendale','AZ',2012,2,68),('Glendale','AZ',2012,3,71),('Glendale','AZ',2012,4,82),('Glendale','AZ',2012,5,40),('Glendale','AZ',2012,6,103),('Glendale','AZ',2012,7,75),('Glendale','AZ',2012,8,97),('Glendale','AZ',2012,9,75),('Glendale','AZ',2012,10,49),('Glendale','AZ',2012,11,101),('Glendale','AZ',2012,12,79),('Glendale','AZ',2013,1,48),('Glendale','AZ',2013,2,83),('Glendale','AZ',2013,3,89),('Glendale','AZ',2013,4,47),('Glendale','AZ',2013,5,107),('Glendale','AZ',2013,6,70),('Glendale','AZ',2013,7,57),('Glendale','AZ',2013,8,97),('Glendale','AZ',2013,9,38),('Glendale','AZ',2013,10,96),('Glendale','AZ',2013,11,75),('Glendale','AZ',2013,12,45),('Glendale','AZ',2014,1,49),('Glendale','AZ',2014,2,106),('Glendale','AZ',2014,3,99),('Glendale','AZ',2014,4,65),('Glendale','AZ',2014,5,69),('Glendale','AZ',2014,6,34),('Glendale','AZ',2014,7,66),('Glendale','AZ',2014,8,81),('Glendale','AZ',2014,9,53),('Glendale','AZ',2014,10,68),('Glendale','AZ',2014,11,46),('Glendale','AZ',2014,12,93),('Glendale','AZ',2015,1,93),('Glendale','AZ',2015,2,82),('Glendale','AZ',2015,3,55),('Glendale','AZ',2015,4,106),('Glendale','AZ',2015,5,107),('Glendale','AZ',2015,6,39),('Glendale','AZ',2015,7,102),('Glendale','AZ',2015,8,51),('Glendale','AZ',2015,9,64),('Glendale','AZ',2015,10,92),('Glendale','AZ',2015,11,101),('Glendale','AZ',2015,12,91),('Glendale','AZ',2016,1,87),('Glendale','AZ',2016,2,48),('Glendale','AZ',2016,3,44),('Glendale','AZ',2016,4,85),('Glendale','AZ',2016,5,62),('Glendale','AZ',2016,6,90),('Glendale','AZ',2016,7,59),('Glendale','AZ',2016,8,94),('Glendale','AZ',2016,9,107),('Glendale','AZ',2016,10,63),('Glendale','AZ',2016,11,79),('Glendale','AZ',2016,12,32),('Yuma','AZ',2000,1,35),('Yuma','AZ',2000,2,44),('Yuma','AZ',2000,3,42),('Yuma','AZ',2000,4,58),('Yuma','AZ',2000,5,85),('Yuma','AZ',2000,6,33),('Yuma','AZ',2000,7,83),('Yuma','AZ',2000,8,64),('Yuma','AZ',2000,9,44),('Yuma','AZ',2000,10,69),('Yuma','AZ',2000,11,76),('Yuma','AZ',2000,12,69),('Yuma','AZ',2001,1,96),('Yuma','AZ',2001,2,55),('Yuma','AZ',2001,3,69),('Yuma','AZ',2001,4,53),('Yuma','AZ',2001,5,68),('Yuma','AZ',2001,6,109),('Yuma','AZ',2001,7,83),('Yuma','AZ',2001,8,63),('Yuma','AZ',2001,9,78),('Yuma','AZ',2001,10,60),('Yuma','AZ',2001,11,96),('Yuma','AZ',2001,12,100),('Yuma','AZ',2002,1,35),('Yuma','AZ',2002,2,108),('Yuma','AZ',2002,3,109),('Yuma','AZ',2002,4,40),('Yuma','AZ',2002,5,48),('Yuma','AZ',2002,6,30),('Yuma','AZ',2002,7,48),('Yuma','AZ',2002,8,83),('Yuma','AZ',2002,9,106),('Yuma','AZ',2002,10,88),('Yuma','AZ',2002,11,41),('Yuma','AZ',2002,12,50),('Yuma','AZ',2003,1,78),('Yuma','AZ',2003,2,107),('Yuma','AZ',2003,3,60),('Yuma','AZ',2003,4,58),('Yuma','AZ',2003,5,30),('Yuma','AZ',2003,6,72),('Yuma','AZ',2003,7,92),('Yuma','AZ',2003,8,50),('Yuma','AZ',2003,9,89),('Yuma','AZ',2003,10,59),('Yuma','AZ',2003,11,93),('Yuma','AZ',2003,12,76),('Yuma','AZ',2004,1,47),('Yuma','AZ',2004,2,30),('Yuma','AZ',2004,3,31),('Yuma','AZ',2004,4,31),('Yuma','AZ',2004,5,31),('Yuma','AZ',2004,6,110),('Yuma','AZ',2004,7,73),('Yuma','AZ',2004,8,64),('Yuma','AZ',2004,9,99),('Yuma','AZ',2004,10,94),('Yuma','AZ',2004,11,101),('Yuma','AZ',2004,12,109),('Yuma','AZ',2005,1,55),('Yuma','AZ',2005,2,101),('Yuma','AZ',2005,3,93),('Yuma','AZ',2005,4,68),('Yuma','AZ',2005,5,36),('Yuma','AZ',2005,6,91),('Yuma','AZ',2005,7,37),('Yuma','AZ',2005,8,63),('Yuma','AZ',2005,9,109),('Yuma','AZ',2005,10,65),('Yuma','AZ',2005,11,96),('Yuma','AZ',2005,12,58),('Yuma','AZ',2006,1,33),('Yuma','AZ',2006,2,50),('Yuma','AZ',2006,3,45),('Yuma','AZ',2006,4,42),('Yuma','AZ',2006,5,53),('Yuma','AZ',2006,6,41),('Yuma','AZ',2006,7,94),('Yuma','AZ',2006,8,61),('Yuma','AZ',2006,9,43),('Yuma','AZ',2006,10,74),('Yuma','AZ',2006,11,86),('Yuma','AZ',2006,12,109),('Yuma','AZ',2007,1,71),('Yuma','AZ',2007,2,51),('Yuma','AZ',2007,3,30),('Yuma','AZ',2007,4,95),('Yuma','AZ',2007,5,45),('Yuma','AZ',2007,6,46),('Yuma','AZ',2007,7,48),('Yuma','AZ',2007,8,81),('Yuma','AZ',2007,9,97),('Yuma','AZ',2007,10,44),('Yuma','AZ',2007,11,98),('Yuma','AZ',2007,12,46),('Yuma','AZ',2008,1,73),('Yuma','AZ',2008,2,97),('Yuma','AZ',2008,3,105),('Yuma','AZ',2008,4,97),('Yuma','AZ',2008,5,70),('Yuma','AZ',2008,6,68),('Yuma','AZ',2008,7,63),('Yuma','AZ',2008,8,98),('Yuma','AZ',2008,9,69),('Yuma','AZ',2008,10,70),('Yuma','AZ',2008,11,59),('Yuma','AZ',2008,12,33),('Yuma','AZ',2009,1,92),('Yuma','AZ',2009,2,106),('Yuma','AZ',2009,3,89),('Yuma','AZ',2009,4,59),('Yuma','AZ',2009,5,57),('Yuma','AZ',2009,6,58),('Yuma','AZ',2009,7,48),('Yuma','AZ',2009,8,63),('Yuma','AZ',2009,9,76),('Yuma','AZ',2009,10,33),('Yuma','AZ',2009,11,104),('Yuma','AZ',2009,12,30),('Yuma','AZ',2010,1,65),('Yuma','AZ',2010,2,49),('Yuma','AZ',2010,3,108),('Yuma','AZ',2010,4,60),('Yuma','AZ',2010,5,30),('Yuma','AZ',2010,6,40),('Yuma','AZ',2010,7,94),('Yuma','AZ',2010,8,95),('Yuma','AZ',2010,9,64),('Yuma','AZ',2010,10,60),('Yuma','AZ',2010,11,92),('Yuma','AZ',2010,12,83),('Yuma','AZ',2011,1,42),('Yuma','AZ',2011,2,58),('Yuma','AZ',2011,3,90),('Yuma','AZ',2011,4,32),('Yuma','AZ',2011,5,59),('Yuma','AZ',2011,6,61),('Yuma','AZ',2011,7,79),('Yuma','AZ',2011,8,57),('Yuma','AZ',2011,9,74),('Yuma','AZ',2011,10,52),('Yuma','AZ',2011,11,101),('Yuma','AZ',2011,12,96),('Yuma','AZ',2012,1,58),('Yuma','AZ',2012,2,33),('Yuma','AZ',2012,3,35),('Yuma','AZ',2012,4,68),('Yuma','AZ',2012,5,65),('Yuma','AZ',2012,6,96),('Yuma','AZ',2012,7,69),('Yuma','AZ',2012,8,108),('Yuma','AZ',2012,9,44),('Yuma','AZ',2012,10,50),('Yuma','AZ',2012,11,88),('Yuma','AZ',2012,12,72),('Yuma','AZ',2013,1,107),('Yuma','AZ',2013,2,47),('Yuma','AZ',2013,3,110),('Yuma','AZ',2013,4,89),('Yuma','AZ',2013,5,92),('Yuma','AZ',2013,6,67),('Yuma','AZ',2013,7,74),('Yuma','AZ',2013,8,56),('Yuma','AZ',2013,9,48),('Yuma','AZ',2013,10,80),('Yuma','AZ',2013,11,98),('Yuma','AZ',2013,12,43),('Yuma','AZ',2014,1,104),('Yuma','AZ',2014,2,87),('Yuma','AZ',2014,3,40),('Yuma','AZ',2014,4,95),('Yuma','AZ',2014,5,63),('Yuma','AZ',2014,6,102),('Yuma','AZ',2014,7,101),('Yuma','AZ',2014,8,77),('Yuma','AZ',2014,9,65),('Yuma','AZ',2014,10,96),('Yuma','AZ',2014,11,98),('Yuma','AZ',2014,12,65),('Yuma','AZ',2015,1,38),('Yuma','AZ',2015,2,97),('Yuma','AZ',2015,3,65),('Yuma','AZ',2015,4,89),('Yuma','AZ',2015,5,75),('Yuma','AZ',2015,6,32),('Yuma','AZ',2015,7,99),('Yuma','AZ',2015,8,63),('Yuma','AZ',2015,9,39),('Yuma','AZ',2015,10,61),('Yuma','AZ',2015,11,42),('Yuma','AZ',2015,12,95),('Yuma','AZ',2016,1,83),('Yuma','AZ',2016,2,35),('Yuma','AZ',2016,3,82),('Yuma','AZ',2016,4,102),('Yuma','AZ',2016,5,79),('Yuma','AZ',2016,6,75),('Yuma','AZ',2016,7,41),('Yuma','AZ',2016,8,37),('Yuma','AZ',2016,9,87),('Yuma','AZ',2016,10,95),('Yuma','AZ',2016,11,56),('Yuma','AZ',2016,12,83);
/*!40000 ALTER TABLE `temperatures` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0d_2`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0d_2` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0d_2`;

--
-- Table structure for table `force_name`
--

DROP TABLE IF EXISTS `force_name`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `force_name` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(256) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `force_name`
--

LOCK TABLES `force_name` WRITE;
/*!40000 ALTER TABLE `force_name` DISABLE KEYS */;
INSERT INTO `force_name` VALUES (89,'Holberton School');
/*!40000 ALTER TABLE `force_name` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `id_not_null`
--

DROP TABLE IF EXISTS `id_not_null`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `id_not_null` (
  `id` int(11) DEFAULT '1',
  `name` varchar(256) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `id_not_null`
--

LOCK TABLES `id_not_null` WRITE;
/*!40000 ALTER TABLE `id_not_null` DISABLE KEYS */;
/*!40000 ALTER TABLE `id_not_null` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0d_tvshows`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0d_tvshows` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0d_tvshows`;

--
-- Table structure for table `tv_genres`
--

DROP TABLE IF EXISTS `tv_genres`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tv_genres` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tv_genres`
--

LOCK TABLES `tv_genres` WRITE;
/*!40000 ALTER TABLE `tv_genres` DISABLE KEYS */;
INSERT INTO `tv_genres` VALUES (1,'Drama'),(2,'Mystery'),(3,'Adventure'),(4,'Fantasy'),(5,'Comedy'),(6,'Crime'),(7,'Suspense'),(8,'Thriller');
/*!40000 ALTER TABLE `tv_genres` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tv_show_genres`
--

DROP TABLE IF EXISTS `tv_show_genres`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tv_show_genres` (
  `show_id` int(11) NOT NULL,
  `genre_id` int(11) NOT NULL,
  KEY `show_id` (`show_id`),
  KEY `genre_id` (`genre_id`),
  CONSTRAINT `tv_show_genres_ibfk_1` FOREIGN KEY (`show_id`) REFERENCES `tv_shows` (`id`),
  CONSTRAINT `tv_show_genres_ibfk_2` FOREIGN KEY (`genre_id`) REFERENCES `tv_genres` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tv_show_genres`
--

LOCK TABLES `tv_show_genres` WRITE;
/*!40000 ALTER TABLE `tv_show_genres` DISABLE KEYS */;
INSERT INTO `tv_show_genres` VALUES (1,1),(1,2),(2,3),(2,1),(2,4),(3,5),(4,5),(5,5),(6,6),(6,1),(6,7),(6,8),(8,6),(8,1),(8,2),(8,7),(8,8),(10,5),(10,1);
/*!40000 ALTER TABLE `tv_show_genres` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tv_shows`
--

DROP TABLE IF EXISTS `tv_shows`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tv_shows` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tv_shows`
--

LOCK TABLES `tv_shows` WRITE;
/*!40000 ALTER TABLE `tv_shows` DISABLE KEYS */;
INSERT INTO `tv_shows` VALUES (1,'House'),(2,'Game of Thrones'),(3,'The Big Bang Theory'),(4,'New Girl'),(5,'Silicon Valley'),(6,'Breaking Bad'),(7,'Better Call Saul'),(8,'Dexter'),(9,'Homeland'),(10,'The Last Man on Earth');
/*!40000 ALTER TABLE `tv_shows` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0d_tvshows_rate`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0d_tvshows_rate` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0d_tvshows_rate`;

--
-- Table structure for table `tv_genres`
--

DROP TABLE IF EXISTS `tv_genres`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tv_genres` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tv_genres`
--

LOCK TABLES `tv_genres` WRITE;
/*!40000 ALTER TABLE `tv_genres` DISABLE KEYS */;
INSERT INTO `tv_genres` VALUES (1,'Drama'),(2,'Mystery'),(3,'Adventure'),(4,'Fantasy'),(5,'Comedy'),(6,'Crime'),(7,'Suspense'),(8,'Thriller');
/*!40000 ALTER TABLE `tv_genres` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tv_show_genres`
--

DROP TABLE IF EXISTS `tv_show_genres`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tv_show_genres` (
  `show_id` int(11) NOT NULL,
  `genre_id` int(11) NOT NULL,
  KEY `show_id` (`show_id`),
  KEY `genre_id` (`genre_id`),
  CONSTRAINT `tv_show_genres_ibfk_1` FOREIGN KEY (`show_id`) REFERENCES `tv_shows` (`id`),
  CONSTRAINT `tv_show_genres_ibfk_2` FOREIGN KEY (`genre_id`) REFERENCES `tv_genres` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tv_show_genres`
--

LOCK TABLES `tv_show_genres` WRITE;
/*!40000 ALTER TABLE `tv_show_genres` DISABLE KEYS */;
INSERT INTO `tv_show_genres` VALUES (2,1),(2,2),(3,3),(3,1),(3,4),(4,5),(5,5),(6,5),(7,6),(7,1),(7,7),(7,8),(9,6),(9,1),(9,2),(9,7),(9,8),(11,5),(11,1);
/*!40000 ALTER TABLE `tv_show_genres` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tv_show_ratings`
--

DROP TABLE IF EXISTS `tv_show_ratings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tv_show_ratings` (
  `show_id` int(11) NOT NULL,
  `rate` int(11) NOT NULL DEFAULT '0',
  KEY `show_id` (`show_id`),
  CONSTRAINT `tv_show_ratings_ibfk_1` FOREIGN KEY (`show_id`) REFERENCES `tv_shows` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tv_show_ratings`
--

LOCK TABLES `tv_show_ratings` WRITE;
/*!40000 ALTER TABLE `tv_show_ratings` DISABLE KEYS */;
INSERT INTO `tv_show_ratings` VALUES (2,0),(2,1),(2,2),(2,3),(2,4),(2,5),(2,6),(3,0),(3,1),(3,2),(3,0),(3,0),(3,1),(3,2),(3,0),(3,0),(3,1),(3,2),(3,3),(3,4),(3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,7),(3,8),(3,0),(3,1),(3,2),(3,0),(3,1),(3,2),(3,3),(3,4),(3,5),(3,6),(3,0),(3,1),(3,2),(4,0),(5,0),(6,0),(6,0),(6,1),(6,2),(6,3),(6,4),(6,0),(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7),(6,8),(6,0),(6,1),(6,2),(6,3),(6,4),(6,5),(6,6),(6,7),(6,8),(7,0),(7,1),(7,2),(7,0),(7,1),(7,2),(7,3),(7,4),(7,0),(7,1),(7,2),(8,0),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,0),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,0),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,7),(8,8),(8,0),(8,1),(8,2),(8,0),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,7),(8,8),(8,0),(8,1),(8,2),(8,3),(8,4),(8,0),(8,1),(8,2),(8,3),(8,4),(8,5),(8,6),(8,7),(8,8),(9,0),(9,1),(9,2),(9,0),(9,1),(9,2),(9,3),(9,4),(9,5),(9,6),(9,0),(10,0),(10,0),(10,1),(10,2),(10,3),(10,4),(10,5),(10,6),(10,7),(10,8),(10,0),(10,1),(10,2),(10,3),(10,4),(10,5),(10,6),(10,0),(10,0),(10,1),(10,2),(10,0),(10,1),(10,2),(10,3),(10,4),(10,5),(10,6),(10,7),(10,8),(10,0),(10,1),(10,2),(10,3),(10,4),(10,0),(10,1),(10,2),(10,3),(10,4),(10,5),(10,6),(10,7),(10,8),(10,0),(10,1),(10,2),(11,0),(11,1),(11,2),(11,3),(11,4);
/*!40000 ALTER TABLE `tv_show_ratings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tv_shows`
--

DROP TABLE IF EXISTS `tv_shows`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tv_shows` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tv_shows`
--

LOCK TABLES `tv_shows` WRITE;
/*!40000 ALTER TABLE `tv_shows` DISABLE KEYS */;
INSERT INTO `tv_shows` VALUES (2,'House'),(3,'Game of Thrones'),(4,'The Big Bang Theory'),(5,'New Girl'),(6,'Silicon Valley'),(7,'Breaking Bad'),(8,'Better Call Saul'),(9,'Dexter'),(10,'Homeland'),(11,'The Last Man on Earth');
/*!40000 ALTER TABLE `tv_shows` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0d_usa`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0d_usa` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0d_usa`;

--
-- Table structure for table `cities`
--

DROP TABLE IF EXISTS `cities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cities` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `state_id` int(11) NOT NULL,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`),
  KEY `state_id` (`state_id`),
  CONSTRAINT `cities_ibfk_1` FOREIGN KEY (`state_id`) REFERENCES `states` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cities`
--

LOCK TABLES `cities` WRITE;
/*!40000 ALTER TABLE `cities` DISABLE KEYS */;
INSERT INTO `cities` VALUES (1,1,'San Francisco'),(2,1,'San Jose'),(4,2,'Page'),(6,3,'Paris'),(7,3,'Houston'),(8,3,'Dallas');
/*!40000 ALTER TABLE `cities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES (1,'California'),(2,'Arizona'),(3,'Texas'),(4,'Utah');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0e_0_usa`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0e_0_usa` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0e_0_usa`;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES (1,'California'),(2,'Arizona'),(3,'Texas'),(4,'New York'),(5,'Nevada'),(6,'California'),(7,'Arizona'),(8,'Texas'),(9,'New York'),(10,'Nevada');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0e_100_usa`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0e_100_usa` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0e_100_usa`;

--
-- Table structure for table `cities`
--

DROP TABLE IF EXISTS `cities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cities` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL,
  `state_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`),
  KEY `state_id` (`state_id`),
  CONSTRAINT `cities_ibfk_1` FOREIGN KEY (`state_id`) REFERENCES `states` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cities`
--

LOCK TABLES `cities` WRITE;
/*!40000 ALTER TABLE `cities` DISABLE KEYS */;
INSERT INTO `cities` VALUES (1,'San Francisco',1);
/*!40000 ALTER TABLE `cities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES (1,'California');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0e_101_usa`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0e_101_usa` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0e_101_usa`;

--
-- Table structure for table `cities`
--

DROP TABLE IF EXISTS `cities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cities` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `state_id` int(11) NOT NULL,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `state_id` (`state_id`),
  CONSTRAINT `cities_ibfk_1` FOREIGN KEY (`state_id`) REFERENCES `states` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cities`
--

LOCK TABLES `cities` WRITE;
/*!40000 ALTER TABLE `cities` DISABLE KEYS */;
INSERT INTO `cities` VALUES (1,1,'San Francisco'),(2,1,'San Jose'),(3,1,'Los Angeles'),(4,1,'Fremont'),(5,1,'Livermore'),(6,2,'Page'),(7,2,'Phoenix'),(8,3,'Dallas'),(9,3,'Houston'),(10,3,'Austin'),(11,4,'New York'),(12,5,'Las Vegas'),(13,5,'Reno'),(14,5,'Henderson'),(15,5,'Carson City');
/*!40000 ALTER TABLE `cities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES (1,'California'),(2,'Arizona'),(3,'Texas'),(4,'New York'),(5,'Nevada');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0e_14_usa`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0e_14_usa` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0e_14_usa`;

--
-- Table structure for table `cities`
--

DROP TABLE IF EXISTS `cities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cities` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `state_id` int(11) NOT NULL,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `state_id` (`state_id`),
  CONSTRAINT `cities_ibfk_1` FOREIGN KEY (`state_id`) REFERENCES `states` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cities`
--

LOCK TABLES `cities` WRITE;
/*!40000 ALTER TABLE `cities` DISABLE KEYS */;
INSERT INTO `cities` VALUES (1,1,'San Francisco'),(2,1,'San Jose'),(3,1,'Los Angeles'),(4,1,'Fremont'),(5,1,'Livermore'),(6,2,'Page'),(7,2,'Phoenix'),(8,3,'Dallas'),(9,3,'Houston'),(10,3,'Austin'),(11,4,'New York'),(12,5,'Las Vegas'),(13,5,'Reno'),(14,5,'Henderson'),(15,5,'Carson City');
/*!40000 ALTER TABLE `cities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES (1,'California'),(2,'Arizona'),(3,'Texas'),(4,'New York'),(5,'Nevada');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0e_4_usa`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0e_4_usa` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0e_4_usa`;

--
-- Table structure for table `cities`
--

DROP TABLE IF EXISTS `cities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cities` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `state_id` int(11) NOT NULL,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `state_id` (`state_id`),
  CONSTRAINT `cities_ibfk_1` FOREIGN KEY (`state_id`) REFERENCES `states` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cities`
--

LOCK TABLES `cities` WRITE;
/*!40000 ALTER TABLE `cities` DISABLE KEYS */;
INSERT INTO `cities` VALUES (1,1,'San Francisco'),(2,1,'San Jose'),(3,1,'Los Angeles'),(4,1,'Fremont'),(5,1,'Livermore'),(6,2,'Page'),(7,2,'Phoenix'),(8,3,'Dallas'),(9,3,'Houston'),(10,3,'Austin'),(11,4,'New York'),(12,5,'Las Vegas'),(13,5,'Reno'),(14,5,'Henderson'),(15,5,'Carson City');
/*!40000 ALTER TABLE `cities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(256) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES (1,'California'),(2,'Arizona'),(3,'Texas'),(4,'New York'),(5,'Nevada');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `hbtn_0e_6_usa`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hbtn_0e_6_usa` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `hbtn_0e_6_usa`;

--
-- Table structure for table `cities`
--

DROP TABLE IF EXISTS `cities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cities` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL,
  `state_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`),
  KEY `state_id` (`state_id`),
  CONSTRAINT `cities_ibfk_1` FOREIGN KEY (`state_id`) REFERENCES `states` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cities`
--

LOCK TABLES `cities` WRITE;
/*!40000 ALTER TABLE `cities` DISABLE KEYS */;
/*!40000 ALTER TABLE `cities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `states`
--

DROP TABLE IF EXISTS `states`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `states` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `states`
--

LOCK TABLES `states` WRITE;
/*!40000 ALTER TABLE `states` DISABLE KEYS */;
INSERT INTO `states` VALUES (2,'New Mexico'),(4,'New York');
/*!40000 ALTER TABLE `states` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Current Database: `mysql`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `mysql` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `mysql`;

--
-- Table structure for table `columns_priv`
--

DROP TABLE IF EXISTS `columns_priv`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `columns_priv` (
  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Column_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `Column_priv` set('Select','Insert','Update','References') CHARACTER SET utf8 NOT NULL DEFAULT '',
  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`,`Column_name`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Column privileges';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `columns_priv`
--

LOCK TABLES `columns_priv` WRITE;
/*!40000 ALTER TABLE `columns_priv` DISABLE KEYS */;
/*!40000 ALTER TABLE `columns_priv` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `db`
--

DROP TABLE IF EXISTS `db`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `db` (
  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Insert_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `References_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Index_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Event_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  PRIMARY KEY (`Host`,`Db`,`User`),
  KEY `User` (`User`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Database privileges';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `db`
--

LOCK TABLES `db` WRITE;
/*!40000 ALTER TABLE `db` DISABLE KEYS */;
INSERT INTO `db` VALUES ('localhost','performance_schema','mysql.session','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N'),('localhost','sys','mysql.sys','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','Y'),('localhost','hbnb_dev_db','hbnb_dev','Y','Y','Y','Y','Y','Y','N','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y'),('localhost','performance_schema','hbnb_dev','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N'),('localhost','hbnb_test_db','hbnb_test','Y','Y','Y','Y','Y','Y','N','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y'),('localhost','performance_schema','hbnb_test','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N');
/*!40000 ALTER TABLE `db` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `engine_cost`
--

DROP TABLE IF EXISTS `engine_cost`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `engine_cost` (
  `engine_name` varchar(64) NOT NULL,
  `device_type` int(11) NOT NULL,
  `cost_name` varchar(64) NOT NULL,
  `cost_value` float DEFAULT NULL,
  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `comment` varchar(1024) DEFAULT NULL,
  PRIMARY KEY (`cost_name`,`engine_name`,`device_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `engine_cost`
--

LOCK TABLES `engine_cost` WRITE;
/*!40000 ALTER TABLE `engine_cost` DISABLE KEYS */;
INSERT INTO `engine_cost` VALUES ('default',0,'io_block_read_cost',NULL,'2020-03-02 17:11:41',NULL),('default',0,'memory_block_read_cost',NULL,'2020-03-02 17:11:41',NULL);
/*!40000 ALTER TABLE `engine_cost` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event`
--

DROP TABLE IF EXISTS `event`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `event` (
  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `name` char(64) NOT NULL DEFAULT '',
  `body` longblob NOT NULL,
  `definer` char(93) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `execute_at` datetime DEFAULT NULL,
  `interval_value` int(11) DEFAULT NULL,
  `interval_field` enum('YEAR','QUARTER','MONTH','DAY','HOUR','MINUTE','WEEK','SECOND','MICROSECOND','YEAR_MONTH','DAY_HOUR','DAY_MINUTE','DAY_SECOND','HOUR_MINUTE','HOUR_SECOND','MINUTE_SECOND','DAY_MICROSECOND','HOUR_MICROSECOND','MINUTE_MICROSECOND','SECOND_MICROSECOND') DEFAULT NULL,
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `last_executed` datetime DEFAULT NULL,
  `starts` datetime DEFAULT NULL,
  `ends` datetime DEFAULT NULL,
  `status` enum('ENABLED','DISABLED','SLAVESIDE_DISABLED') NOT NULL DEFAULT 'ENABLED',
  `on_completion` enum('DROP','PRESERVE') NOT NULL DEFAULT 'DROP',
  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2','MAXDB','NO_KEY_OPTIONS','NO_TABLE_OPTIONS','NO_FIELD_OPTIONS','MYSQL323','MYSQL40','ANSI','NO_AUTO_VALUE_ON_ZERO','NO_BACKSLASH_ESCAPES','STRICT_TRANS_TABLES','STRICT_ALL_TABLES','NO_ZERO_IN_DATE','NO_ZERO_DATE','INVALID_DATES','ERROR_FOR_DIVISION_BY_ZERO','TRADITIONAL','NO_AUTO_CREATE_USER','HIGH_NOT_PRECEDENCE','NO_ENGINE_SUBSTITUTION','PAD_CHAR_TO_FULL_LENGTH') NOT NULL DEFAULT '',
  `comment` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `originator` int(10) unsigned NOT NULL,
  `time_zone` char(64) CHARACTER SET latin1 NOT NULL DEFAULT 'SYSTEM',
  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `body_utf8` longblob,
  PRIMARY KEY (`db`,`name`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Events';
/*!40101 SET character_set_client = @saved_cs_client */;
[O
--
-- Dumping data for table `event`
--

LOCK TABLES `event` WRITE;
/*!40000 ALTER TABLE `event` DISABLE KEYS */;
/*!40000 ALTER TABLE `event` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `func`
--

DROP TABLE IF EXISTS `func`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `func` (
  `name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `ret` tinyint(1) NOT NULL DEFAULT '0',
  `dl` char(128) COLLATE utf8_bin NOT NULL DEFAULT '',
  `type` enum('function','aggregate') CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`name`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User defined functions';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `func`
--

LOCK TABLES `func` WRITE;
/*!40000 ALTER TABLE `func` DISABLE KEYS */;
/*!40000 ALTER TABLE `func` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `gtid_executed`
--

/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE IF NOT EXISTS `gtid_executed` (
  `source_uuid` char(36) NOT NULL COMMENT 'uuid of the source where the transaction was originally executed.',
  `interval_start` bigint(20) NOT NULL COMMENT 'First number of interval.',
  `interval_end` bigint(20) NOT NULL COMMENT 'Last number of interval.',
  PRIMARY KEY (`source_uuid`,`interval_start`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 STATS_PERSISTENT=0;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `help_category`
--

DROP TABLE IF EXISTS `help_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `help_category` (
  `help_category_id` smallint(5) unsigned NOT NULL,
  `name` char(64) NOT NULL,
  `parent_category_id` smallint(5) unsigned DEFAULT NULL,
  `url` text NOT NULL,
  PRIMARY KEY (`help_category_id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help categories';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `help_category`
--

LOCK TABLES `help_category` WRITE;
/*!40000 ALTER TABLE `help_category` DISABLE KEYS */;
INSERT INTO `help_category` VALUES (0,'Contents',0,''),(1,'Help Metadata',0,''),(2,'Data Types',0,''),(3,'Administration',0,''),(4,'Procedures',0,''),(5,'Language Structure',0,''),(6,'Geographic Features',0,''),(7,'MBR',6,''),(8,'WKT',6,''),(9,'Functions',0,''),(10,'Comparison Operators',9,''),(11,'Logical Operators',9,''),(12,'Control Flow Functions',9,''),(13,'String Functions',9,''),(14,'Numeric Functions',9,''),(15,'Date and Time Functions',9,''),(16,'Bit Functions',9,''),(17,'Encryption Functions',9,''),(18,'Locking Functions',9,''),(19,'Information Functions',9,''),(20,'Spatial Functions',9,''),(21,'WKT Functions',20,''),(22,'WKB Functions',20,''),(23,'Geometry Constructors',20,''),(24,'Geometry Property Functions',20,''),(25,'Point Property Functions',20,''),(26,'LineString Property Functions',20,''),(27,'Polygon Property Functions',20,''),(28,'GeometryCollection Property Functions',20,''),(29,'Geometry Relation Functions',20,''),(30,'MBR Functions',20,''),(31,'GROUP BY Functions and Modifiers',9,''),(32,'Miscellaneous Functions',9,''),(33,'Data Definition',0,''),(34,'Data Manipulation',0,''),(35,'Transactions',0,''),(36,'Compound Statements',0,''),(37,'Account Management',0,''),(38,'Table Maintenance',0,''),(39,'User-Defined Functions',0,''),(40,'Plugins',0,''),(41,'Utility',0,''),(42,'Storage Engines',0,'');
/*!40000 ALTER TABLE `help_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `help_keyword`
--

DROP TABLE IF EXISTS `help_keyword`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `help_keyword` (
  `help_keyword_id` int(10) unsigned NOT NULL,
  `name` char(64) NOT NULL,
  PRIMARY KEY (`help_keyword_id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help keywords';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `help_keyword`
--

LOCK TABLES `help_keyword` WRITE;
/*!40000 ALTER TABLE `help_keyword` DISABLE KEYS */;
INSERT INTO `help_keyword` VALUES (282,'(JSON'),(283,'->'),(285,'->>'),(52,'<>'),(620,'ACCOUNT'),(415,'ACTION'),(46,'ADD'),(108,'AES_DECRYPT'),(109,'AES_ENCRYPT'),(347,'AFTER'),(97,'AGAINST'),(652,'AGGREGATE'),(348,'ALGORITHM'),(482,'ALL'),(47,'ALTER'),(6,'ANALYSE'),(349,'ANALYZE'),(53,'AND'),(319,'ANY_VALUE'),(416,'ARCHIVE'),(216,'AREA'),(483,'AS'),(181,'ASBINARY'),(310,'ASC'),(183,'ASTEXT'),(182,'ASWKB'),(184,'ASWKT'),(404,'AT'),(508,'AUTOCOMMIT'),(440,'AUTOEXTEND_SIZE'),(350,'AUTO_INCREMENT'),(351,'AVG_ROW_LENGTH'),(536,'BEFORE'),(509,'BEGIN'),(54,'BETWEEN'),(74,'BIGINT'),(104,'BINARY'),(677,'BINLOG'),(14,'BOOL'),(15,'BOOLEAN'),(68,'BOTH'),(408,'BTREE'),(231,'BUFFER'),(311,'BY'),(39,'BYTE'),(8,'CACHE'),(448,'CALL'),(417,'CASCADE'),(59,'CASE'),(600,'CATALOG_NAME'),(77,'CEIL'),(78,'CEILING'),(217,'CENTROID'),(510,'CHAIN'),(352,'CHANGE'),(541,'CHANNEL'),(40,'CHAR'),(36,'CHARACTER'),(660,'CHARSET'),(353,'CHECK'),(354,'CHECKSUM'),(621,'CIPHER'),(601,'CLASS_ORIGIN'),(633,'CLIENT'),(454,'CLOSE'),(355,'COALESCE'),(680,'CODE'),(320,'COLLATE'),(662,'COLLATION'),(356,'COLUMN'),(357,'COLUMNS'),(602,'COLUMN_NAME'),(328,'COMMENT'),(511,'COMMIT'),(525,'COMMITTED'),(418,'COMPACT'),(329,'COMPLETION'),(419,'COMPRESSED'),(358,'COMPRESSION'),(468,'CONCURRENT'),(596,'CONDITION'),(359,'CONNECTION'),(512,'CONSISTENT'),(360,'CONSTRAINT'),(603,'CONSTRAINT_CATALOG'),(604,'CONSTRAINT_NAME'),(605,'CONSTRAINT_SCHEMA'),(259,'CONTAINS'),(597,'CONTINUE'),(103,'CONVERT'),(232,'CONVEXHULL'),(309,'COUNT'),(48,'CREATE'),(307,'CREATE_DH_PARAMETERS'),(501,'CROSS'),(240,'CROSSES'),(420,'CSV'),(330,'CURRENT_USER'),(594,'CURSOR'),(606,'CURSOR_NAME'),(321,'DATA'),(322,'DATABASE'),(663,'DATABASES'),(399,'DATAFILE'),(33,'DATE'),(105,'DATETIME'),(81,'DATE_ADD'),(82,'DATE_SUB'),(83,'DAY'),(84,'DAY_HOUR'),(85,'DAY_MINUTE'),(86,'DAY_SECOND'),(584,'DEALLOCATE'),(25,'DEC'),(28,'DECIMAL'),(585,'DECLARE'),(2,'DEFAULT'),(575,'DEFAULT_AUTH'),(331,'DEFINER'),(461,'DELAYED'),(361,'DELAY_KEY_WRITE'),(421,'DELETE'),(312,'DESC'),(695,'DESCRIBE'),(685,'DES_KEY_FILE'),(607,'DIAGNOSTICS'),(189,'DIMENSION'),(323,'DIRECTORY'),(332,'DISABLE'),(362,'DISCARD'),(260,'DISJOINT'),(241,'DISTANCE'),(308,'DISTINCT'),(484,'DISTINCTROW'),(333,'DO'),(363,'DROP'),(500,'DUAL'),(485,'DUMPFILE'),(462,'DUPLICATE'),(422,'DYNAMIC'),(60,'ELSE'),(586,'ELSEIF'),(334,'ENABLE'),(469,'ENCLOSED'),(364,'ENCRYPTION'),(61,'END'),(205,'ENDPOINT'),(405,'ENDS'),(365,'ENGINE'),(664,'ENGINES'),(190,'ENVELOPE'),(261,'EQUALS'),(686,'ERROR'),(665,'ERRORS'),(72,'ESCAPE'),(470,'ESCAPED'),(335,'EVENT'),(678,'EVENTS'),(406,'EVERY'),(366,'EXCHANGE'),(583,'EXECUTE'),(403,'EXISTS'),(598,'EXIT'),(98,'EXPANSION'),(622,'EXPIRE'),(696,'EXPLAIN'),(687,'EXPORT'),(650,'EXTENDED'),(441,'EXTENT_SIZE'),(218,'EXTERIORRING'),(284,'EXTRACTION)'),(12,'FALSE'),(648,'FAST'),(423,'FEDERATED'),(595,'FETCH'),(471,'FIELDS'),(634,'FILE'),(442,'FILE_BLOCK_SIZE'),(565,'FILTER'),(367,'FIRST'),(26,'FIXED'),(29,'FLOAT4'),(30,'FLOAT8'),(75,'FLOOR'),(9,'FLUSH'),(486,'FOR'),(502,'FORCE'),(368,'FOREIGN'),(697,'FORMAT'),(69,'FROM'),(424,'FULL'),(369,'FULLTEXT'),(341,'FUNCTION'),(688,'GENERAL'),(114,'GEOMCOLLFROMTEXT'),(144,'GEOMCOLLFROMWKB'),(174,'GEOMETRYCOLLECTION'),(115,'GEOMETRYCOLLECTIONFROMTEXT'),(145,'GEOMETRYCOLLECTIONFROMWKB'),(116,'GEOMETRYFROMTEXT'),(146,'GEOMETRYFROMWKB'),(227,'GEOMETRYN'),(191,'GEOMETRYTYPE'),(117,'GEOMFROMTEXT'),(147,'GEOMFROMWKB'),(608,'GET'),(206,'GLENGTH'),(526,'GLOBAL'),(635,'GRANT'),(666,'GRANTS'),(343,'GROUP'),(455,'HANDLER'),(487,'HAVING'),(425,'HEAP'),(5,'HELP'),(0,'HELP_DATE'),(1,'HELP_VERSION'),(463,'HIGH_PRIORITY'),(409,'HOST'),(667,'HOSTS'),(87,'HOUR'),(88,'HOUR_MINUTE'),(89,'HOUR_SECOND'),(480,'IDENTIFIED'),(64,'IF'),(464,'IGNORE'),(542,'IGNORE_SERVER_IDS'),(370,'IMPORT'),(99,'IN'),(49,'INDEX'),(668,'INDEXES'),(472,'INFILE'),(400,'INITIAL_SIZE'),(286,'INLINE'),(503,'INNER'),(426,'INNODB'),(65,'INSERT'),(371,'INSERT_METHOD'),(656,'INSTALL'),(342,'INSTANCE'),(16,'INT1'),(19,'INT2'),(20,'INT3'),(22,'INT4'),(24,'INT8'),(23,'INTEGER'),(219,'INTERIORRINGN'),(262,'INTERSECTS'),(90,'INTERVAL'),(465,'INTO'),(576,'IO_THREAD'),(55,'IS'),(207,'ISCLOSED'),(192,'ISEMPTY'),(527,'ISOLATION'),(193,'ISSIMPLE'),(623,'ISSUER'),(587,'ITERATE'),(488,'JOIN'),(106,'JSON'),(290,'JSON_APPEND'),(276,'JSON_ARRAY'),(315,'JSON_ARRAYAGG'),(291,'JSON_ARRAY_APPEND'),(292,'JSON_ARRAY_INSERT'),(279,'JSON_CONTAINS'),(280,'JSON_CONTAINS_PATH'),(301,'JSON_DEPTH'),(281,'JSON_EXTRACT'),(293,'JSON_INSERT'),(288,'JSON_KEYS'),(302,'JSON_LENGTH'),(294,'JSON_MERGE'),(295,'JSON_MERGE_PATCH'),(296,'JSON_MERGE_PRESERVE'),(277,'JSON_OBJECT'),(316,'JSON_OBJECTAGG'),(305,'JSON_PRETTY'),(278,'JSON_QUOTE'),(297,'JSON_REMOVE'),(298,'JSON_REPLACE'),(289,'JSON_SEARCH'),(299,'JSON_SET'),(306,'JSON_STORAGE_SIZE'),(303,'JSON_TYPE'),(300,'JSON_UNQUOTE'),(304,'JSON_VALID'),(50,'KEY'),(372,'KEYS'),(373,'KEY_BLOCK_SIZE'),(693,'KILL'),(456,'LAST'),(70,'LEADING'),(588,'LEAVE'),(694,'LEAVES'),(504,'LEFT'),(528,'LEVEL'),(66,'LIKE'),(449,'LIMIT'),(118,'LINEFROMTEXT'),(148,'LINEFROMWKB'),(473,'LINES'),(175,'LINESTRING'),(119,'LINESTRINGFROMTEXT'),(149,'LINESTRINGFROMWKB'),(474,'LOAD'),(475,'LOCAL'),(374,'LOCK'),(344,'LOGFILE'),(537,'LOGS'),(44,'LONG'),(45,'LONGBINARY'),(589,'LOOP'),(450,'LOW_PRIORITY'),(538,'MASTER'),(543,'MASTER_AUTO_POSITION'),(544,'MASTER_BIND'),(545,'MASTER_CONNECT_RETRY'),(546,'MASTER_HEARTBEAT_PERIOD'),(547,'MASTER_HOST'),(548,'MASTER_LOG_FILE'),(549,'MASTER_LOG_POS'),(550,'MASTER_PASSWORD'),(551,'MASTER_PORT'),(552,'MASTER_RETRY_COUNT'),(553,'MASTER_SSL'),(554,'MASTER_SSL_CA'),(555,'MASTER_SSL_CERT'),(556,'MASTER_SSL_CIPHER'),(557,'MASTER_SSL_CRL'),(558,'MASTER_SSL_CRLPATH'),(559,'MASTER_SSL_KEY'),(560,'MASTER_SSL_VERIFY_SERVER_CERT'),(561,'MASTER_TLS_VERSION'),(562,'MASTER_USER'),(100,'MATCH'),(624,'MAX_CONNECTIONS_PER_HOUR'),(625,'MAX_QUERIES_PER_HOUR'),(375,'MAX_ROWS'),(443,'MAX_SIZE'),(626,'MAX_UPDATES_PER_HOUR'),(627,'MAX_USER_CONNECTIONS'),(252,'MBRCONTAINS'),(253,'MBRDISJOINT'),(254,'MBREQUAL'),(255,'MBRINTERSECTS'),(256,'MBROVERLAPS'),(257,'MBRTOUCHES'),(258,'MBRWITHIN'),(649,'MEDIUM'),(489,'MEMORY'),(427,'MERGE'),(609,'MESSAGE_TEXT'),(21,'MIDDLEINT'),(91,'MINUTE'),(92,'MINUTE_SECOND'),(376,'MIN_ROWS'),(120,'MLINEFROMTEXT'),(150,'MLINEFROMWKB'),(76,'MOD'),(101,'MODE'),(377,'MODIFY'),(93,'MONTH'),(122,'MPOINTFROMTEXT'),(152,'MPOINTFROMWKB'),(124,'MPOLYFROMTEXT'),(154,'MPOLYFROMWKB'),(428,'MRG_MYISAM'),(176,'MULTILINESTRING'),(121,'MULTILINESTRINGFROMTEXT'),(151,'MULTILINESTRINGFROMWKB'),(177,'MULTIPOINT'),(123,'MULTIPOINTFROMTEXT'),(153,'MULTIPOINTFROMWKB'),(178,'MULTIPOLYGON'),(125,'MULTIPOLYGONFROMTEXT'),(155,'MULTIPOLYGONFROMWKB'),(669,'MUTEX'),(429,'MYISAM'),(610,'MYSQL_ERRNO'),(324,'NAME'),(661,'NAMES'),(37,'NATIONAL'),(505,'NATURAL'),(38,'NCHAR'),(430,'NDB'),(431,'NDBCLUSTER'),(628,'NEVER'),(457,'NEXT'),(432,'NO'),(444,'NODEGROUP'),(636,'NONE'),(56,'NOT'),(647,'NO_WRITE_TO_BINLOG'),(57,'NULL'),(611,'NUMBER'),(27,'NUMERIC'),(228,'NUMGEOMETRIES'),(220,'NUMINTERIORRINGS'),(208,'NUMPOINTS'),(41,'NVARCHAR'),(490,'OFFSET'),(336,'ON'),(513,'ONLY'),(458,'OPEN'),(378,'OPTIMIZE'),(689,'OPTIMIZER_COSTS'),(637,'OPTION'),(476,'OPTIONALLY'),(345,'OPTIONS'),(58,'OR'),(313,'ORDER'),(506,'OUTER'),(491,'OUTFILE'),(263,'OVERLAPS'),(410,'OWNER'),(379,'PACK_KEYS'),(380,'PARSER'),(433,'PARTIAL'),(381,'PARTITION'),(382,'PARTITIONING'),(698,'PARTITIONS'),(383,'PASSWORD'),(287,'PATH)'),(657,'PLUGIN'),(681,'PLUGINS'),(577,'PLUGIN_DIR'),(179,'POINT'),(126,'POINTFROMTEXT'),(156,'POINTFROMWKB'),(209,'POINTN'),(127,'POLYFROMTEXT'),(157,'POLYFROMWKB'),(180,'POLYGON'),(128,'POLYGONFROMTEXT'),(158,'POLYGONFROMWKB'),(411,'PORT'),(79,'POW'),(80,'POWER'),(31,'PRECISION'),(533,'PREPARE'),(337,'PRESERVE'),(459,'PREV'),(384,'PRIMARY'),(638,'PRIVILEGES'),(7,'PROCEDURE'),(639,'PROCESS'),(670,'PROCESSLIST'),(682,'PROFILE'),(683,'PROFILES'),(645,'PROXY'),(539,'PURGE'),(10,'QUERY'),(451,'QUICK'),(110,'RANDOM_BYTES'),(460,'READ'),(32,'REAL'),(385,'REBUILD'),(534,'RECOVER'),(434,'REDUNDANT'),(435,'REFERENCES'),(690,'RELAY'),(684,'RELAYLOG'),(563,'RELAY_LOG_FILE'),(564,'RELAY_LOG_POS'),(514,'RELEASE'),(640,'RELOAD'),(386,'REMOVE'),(338,'RENAME'),(387,'REORGANIZE'),(388,'REPAIR'),(590,'REPEAT'),(529,'REPEATABLE'),(477,'REPLACE'),(566,'REPLICATE_DO_DB'),(567,'REPLICATE_DO_TABLE'),(568,'REPLICATE_IGNORE_DB'),(569,'REPLICATE_IGNORE_TABLE'),(570,'REPLICATE_REWRITE_DB'),(571,'REPLICATE_WILD_DO_TABLE'),(572,'REPLICATE_WILD_IGNORE_TABLE'),(573,'REPLICATION'),(629,'REQUIRE'),(11,'RESET'),(617,'RESIGNAL'),(438,'RESTRICT'),(592,'RETURN'),(612,'RETURNED_SQLSTATE'),(653,'RETURNS'),(646,'REVOKE'),(507,'RIGHT'),(73,'RLIKE'),(515,'ROLLBACK'),(481,'ROWS'),(613,'ROW_COUNT'),(389,'ROW_FORMAT'),(521,'SAVEPOINT'),(339,'SCHEDULE'),(325,'SCHEMA'),(671,'SCHEMAS'),(614,'SCHEMA_NAME'),(94,'SECOND'),(641,'SECURITY'),(466,'SELECT'),(314,'SEPARATOR'),(3,'SERIAL'),(530,'SERIALIZABLE'),(346,'SERVER'),(531,'SESSION'),(326,'SET'),(111,'SHA'),(112,'SHA1'),(113,'SHA2'),(492,'SHARE'),(672,'SHOW'),(642,'SHUTDOWN'),(619,'SIGNAL'),(107,'SIGNED'),(340,'SLAVE'),(691,'SLOW'),(516,'SNAPSHOT'),(412,'SOCKET'),(654,'SONAME'),(67,'SOUNDS'),(390,'SPATIAL'),(618,'SQLSTATE'),(578,'SQL_AFTER_GTIDS'),(579,'SQL_AFTER_MTS_GAPS'),(580,'SQL_BEFORE_GTIDS'),(493,'SQL_BIG_RESULT'),(494,'SQL_BUFFER_RESULT'),(495,'SQL_CACHE'),(496,'SQL_CALC_FOUND_ROWS'),(540,'SQL_LOG_BIN'),(497,'SQL_NO_CACHE'),(574,'SQL_SLAVE_SKIP_COUNTER'),(498,'SQL_SMALL_RESULT'),(581,'SQL_THREAD'),(194,'SRID'),(630,'SSL'),(517,'START'),(478,'STARTING'),(215,'STARTPOINT'),(407,'STARTS'),(391,'STATS_AUTO_RECALC'),(392,'STATS_PERSISTENT'),(393,'STATS_SAMPLE_PAGES'),(673,'STATUS'),(317,'STD'),(318,'STDDEV'),(582,'STOP'),(679,'STORAGE'),(436,'STORED'),(499,'STRAIGHT_JOIN'),(655,'STRING'),(221,'ST_AREA'),(185,'ST_ASBINARY'),(269,'ST_ASGEOJSON'),(187,'ST_ASTEXT'),(186,'ST_ASWKB'),(188,'ST_ASWKT'),(233,'ST_BUFFER'),(234,'ST_BUFFER_STRATEGY'),(222,'ST_CENTROID'),(242,'ST_CONTAINS'),(235,'ST_CONVEXHULL'),(243,'ST_CROSSES'),(236,'ST_DIFFERENCE'),(195,'ST_DIMENSION'),(244,'ST_DISJOINT'),(245,'ST_DISTANCE'),(271,'ST_DISTANCE_SPHERE'),(210,'ST_ENDPOINT'),(196,'ST_ENVELOPE'),(246,'ST_EQUALS'),(223,'ST_EXTERIORRING'),(265,'ST_GEOHASH'),(129,'ST_GEOMCOLLFROMTEXT'),(159,'ST_GEOMCOLLFROMWKB'),(130,'ST_GEOMETRYCOLLECTIONFROMTEXT'),(160,'ST_GEOMETRYCOLLECTIONFROMWKB'),(131,'ST_GEOMETRYFROMTEXT'),(161,'ST_GEOMETRYFROMWKB'),(229,'ST_GEOMETRYN'),(197,'ST_GEOMETRYTYPE'),(270,'ST_GEOMFROMGEOJSON'),(132,'ST_GEOMFROMTEXT'),(162,'ST_GEOMFROMWKB'),(224,'ST_INTERIORRINGN'),(237,'ST_INTERSECTION'),(247,'ST_INTERSECTS'),(211,'ST_ISCLOSED'),(198,'ST_ISEMPTY'),(199,'ST_ISSIMPLE'),(272,'ST_ISVALID'),(266,'ST_LATFROMGEOHASH'),(133,'ST_LINEFROMTEXT'),(163,'ST_LINEFROMWKB'),(134,'ST_LINESTRINGFROMTEXT'),(164,'ST_LINESTRINGFROMWKB'),(267,'ST_LONGFROMGEOHASH'),(273,'ST_MAKEENVELOPE'),(135,'ST_MLINEFROMTEXT'),(165,'ST_MLINEFROMWKB'),(137,'ST_MPOINTFROMTEXT'),(167,'ST_MPOINTFROMWKB'),(139,'ST_MPOLYFROMTEXT'),(169,'ST_MPOLYFROMWKB'),(136,'ST_MULTILINESTRINGFROMTEXT'),(166,'ST_MULTILINESTRINGFROMWKB'),(138,'ST_MULTIPOINTFROMTEXT'),(168,'ST_MULTIPOINTFROMWKB'),(140,'ST_MULTIPOLYGONFROMTEXT'),(170,'ST_MULTIPOLYGONFROMWKB'),(230,'ST_NUMGEOMETRIES'),(225,'ST_NUMINTERIORRING'),(226,'ST_NUMINTERIORRINGS'),(212,'ST_NUMPOINTS'),(248,'ST_OVERLAPS'),(268,'ST_POINTFROMGEOHASH'),(141,'ST_POINTFROMTEXT'),(171,'ST_POINTFROMWKB'),(213,'ST_POINTN'),(142,'ST_POLYFROMTEXT'),(172,'ST_POLYFROMWKB'),(143,'ST_POLYGONFROMTEXT'),(173,'ST_POLYGONFROMWKB'),(274,'ST_SIMPLIFY'),(200,'ST_SRID'),(214,'ST_STARTPOINT'),(238,'ST_SYMDIFFERENCE'),(249,'ST_TOUCHES'),(239,'ST_UNION'),(275,'ST_VALIDATE'),(250,'ST_WITHIN'),(201,'ST_X'),(202,'ST_Y'),(615,'SUBCLASS_ORIGIN'),(631,'SUBJECT'),(643,'SUPER'),(51,'TABLE'),(523,'TABLES'),(394,'TABLESPACE'),(616,'TABLE_NAME'),(447,'TEMPORARY'),(479,'TERMINATED'),(62,'THEN'),(35,'TIME'),(34,'TIMESTAMP'),(522,'TO'),(251,'TOUCHES'),(699,'TRADITIONAL'),(71,'TRAILING'),(518,'TRANSACTION'),(446,'TRIGGER'),(674,'TRIGGERS'),(13,'TRUE'),(395,'TRUNCATE'),(396,'TYPE'),(532,'UNCOMMITTED'),(599,'UNDO'),(658,'UNINSTALL'),(397,'UNION'),(398,'UNIQUE'),(524,'UNLOCK'),(17,'UNSIGNED'),(591,'UNTIL'),(439,'UPDATE'),(327,'UPGRADE'),(644,'USAGE'),(445,'USE'),(413,'USER'),(692,'USER_RESOURCES'),(651,'USE_FRM'),(452,'USING'),(4,'VALUE'),(467,'VALUES'),(42,'VARCHARACTER'),(659,'VARIABLE'),(675,'VARIABLES'),(43,'VARYING'),(402,'VIEW'),(437,'VIRTUAL'),(401,'WAIT'),(676,'WARNINGS'),(63,'WHEN'),(453,'WHERE'),(593,'WHILE'),(102,'WITH'),(264,'WITHIN'),(519,'WORK'),(414,'WRAPPER'),(520,'WRITE'),(203,'X'),(632,'X509'),(535,'XA'),(204,'Y'),(95,'YEAR'),(96,'YEAR_MONTH'),(18,'ZEROFILL');
/*!40000 ALTER TABLE `help_keyword` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `help_relation`
--

DROP TABLE IF EXISTS `help_relation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `help_relation` (
  `help_topic_id` int(10) unsigned NOT NULL,
  `help_keyword_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`help_keyword_id`,`help_topic_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='keyword-topic relation';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `help_relation`
--

LOCK TABLES `help_relation` WRITE;
/*!40000 ALTER TABLE `help_relation` DISABLE KEYS */;
INSERT INTO `help_relation` VALUES (0,0),(1,1),(2,2),(487,2),(488,2),(495,2),(498,2),(499,2),(506,2),(507,2),(528,2),(533,2),(565,2),(583,2),(584,2),(2,3),(506,3),(2,4),(528,4),(533,4),(581,4),(582,4),(3,5),(658,5),(4,6),(4,7),(493,7),(503,7),(504,7),(515,7),(516,7),(534,7),(603,7),(615,7),(634,7),(635,7),(5,8),(649,8),(650,8),(652,8),(653,8),(5,9),(650,9),(5,10),(229,10),(650,10),(651,10),(653,10),(5,11),(551,11),(555,11),(653,11),(6,12),(7,12),(6,13),(7,13),(9,14),(10,14),(9,15),(229,15),(9,16),(9,17),(13,17),(15,17),(16,17),(18,17),(19,17),(232,17),(9,18),(13,18),(15,18),(16,18),(18,18),(19,18),(11,19),(12,20),(12,21),(13,22),(13,23),(232,23),(595,23),(15,24),(16,25),(16,26),(506,26),(16,27),(17,28),(232,28),(595,28),(18,29),(19,30),(19,31),(19,32),(595,32),(21,33),(177,33),(179,33),(232,33),(23,34),(213,34),(24,35),(211,35),(232,35),(26,36),(28,36),(487,36),(488,36),(495,36),(498,36),(499,36),(506,36),(531,36),(532,36),(534,36),(600,36),(601,36),(603,36),(607,36),(26,37),(28,37),(26,38),(27,39),(27,40),(232,40),(28,41),(28,42),(28,43),(37,44),(37,45),(46,46),(495,46),(496,46),(508,46),(46,47),(487,47),(488,47),(489,47),(490,47),(491,47),(492,47),(493,47),(494,47),(495,47),(496,47),(497,47),(583,47),(586,47),(46,48),(498,48),(499,48),(500,48),(501,48),(502,48),(503,48),(504,48),(505,48),(506,48),(508,48),(509,48),(510,48),(584,48),(595,48),(603,48),(611,48),(612,48),(613,48),(614,48),(615,48),(616,48),(618,48),(46,49),(495,49),(501,49),(506,49),(514,49),(536,49),(603,49),(629,49),(649,49),(652,49),(46,50),(495,50),(506,50),(507,50),(528,50),(46,51),(495,51),(506,51),(518,51),(522,51),(523,51),(590,51),(591,51),(592,51),(593,51),(594,51),(603,51),(616,51),(643,51),(49,52),(54,53),(68,53),(54,54),(61,55),(62,55),(63,55),(64,55),(62,56),(64,56),(67,56),(498,56),(499,56),(500,56),(584,56),(63,57),(64,57),(507,57),(69,58),(73,59),(566,59),(73,60),(566,60),(73,61),(548,61),(563,61),(566,61),(567,61),(570,61),(571,61),(573,61),(73,62),(566,62),(567,62),(73,63),(566,63),(74,64),(498,64),(499,64),(500,64),(511,64),(512,64),(513,64),(517,64),(518,64),(521,64),(567,64),(583,64),(584,64),(585,64),(92,65),(528,65),(529,65),(530,65),(116,66),(603,66),(609,66),(610,66),(116,67),(122,68),(122,69),(525,69),(534,69),(603,69),(606,69),(609,69),(610,69),(629,69),(639,69),(122,70),(122,71),(127,72),(131,73),(137,74),(137,75),(138,76),(157,76),(144,77),(145,78),(159,79),(160,80),(179,81),(179,82),(179,83),(179,84),(179,85),(179,86),(179,87),(179,88),(179,89),(179,90),(500,90),(583,90),(584,90),(179,91),(179,92),(179,93),(179,94),(179,95),(179,96),(229,97),(229,98),(229,99),(534,99),(606,99),(609,99),(610,99),(629,99),(639,99),(229,100),(229,101),(534,101),(229,102),(495,102),(501,102),(506,102),(583,102),(584,102),(586,102),(650,102),(231,103),(232,103),(232,104),(549,104),(550,104),(604,104),(605,104),(650,104),(232,105),(232,106),(655,106),(656,106),(657,106),(232,107),(242,108),(243,109),(253,110),(254,111),(254,112),(255,113),(279,114),(279,115),(280,116),(280,117),(281,118),(281,119),(282,120),(282,121),(283,122),(283,123),(284,124),(284,125),(285,126),(286,127),(286,128),(287,129),(287,130),(288,131),(288,132),(289,133),(289,134),(290,135),(290,136),(291,137),(291,138),(292,139),(292,140),(293,141),(294,142),(294,143),(295,144),(295,145),(296,146),(296,147),(297,148),(297,149),(298,150),(298,151),(299,152),(299,153),(300,154),(300,155),(301,156),(302,157),(302,158),(303,159),(303,160),(304,161),(304,162),(305,163),(305,164),(306,165),(306,166),(307,167),(307,168),(308,169),(308,170),(309,171),(310,172),(310,173),(311,174),(312,175),(313,176),(314,177),(315,178),(316,179),(317,180),(318,181),(318,182),(319,183),(319,184),(320,185),(320,186),(321,187),(321,188),(322,189),(323,190),(324,191),(325,192),(326,193),(327,194),(328,195),(329,196),(330,197),(331,198),(332,199),(333,200),(334,201),(335,202),(336,203),(337,204),(338,205),(339,206),(340,207),(341,208),(342,209),(343,210),(344,211),(346,212),(347,213),(348,214),(349,215),(350,216),(351,217),(352,218),(353,219),(354,220),(355,221),(356,222),(357,223),(358,224),(359,225),(359,226),(360,227),(361,228),(362,229),(363,230),(364,231),(365,232),(366,233),(367,234),(368,235),(369,236),(370,237),(371,238),(372,239),(373,240),(374,241),(375,242),(376,243),(377,244),(378,245),(379,246),(380,247),(381,248),(382,249),(383,250),(384,251),(385,252),(388,253),(389,254),(391,255),(392,256),(393,257),(394,258),(395,259),(396,260),(397,261),(398,262),(399,263),(400,264),(401,265),(402,266),(403,267),(404,268),(405,269),(406,270),(407,271),(408,272),(409,273),(410,274),(411,275),(412,276),(413,277),(414,278),(415,279),(416,280),(417,281),(418,282),(419,282),(418,283),(418,284),(419,285),(419,286),(419,287),(420,288),(421,289),(422,290),(423,291),(424,292),(425,293),(426,294),(427,295),(428,296),(429,297),(430,298),(431,299),(432,300),(433,301),(434,302),(435,303),(436,304),(437,305),(438,306),(450,307),(452,308),(457,308),(458,308),(461,308),(462,308),(467,308),(534,308),(537,308),(457,309),(624,309),(647,309),(458,310),(534,310),(458,311),(495,311),(506,311),(525,311),(531,311),(532,311),(534,311),(538,311),(583,311),(584,311),(586,311),(458,312),(534,312),(655,312),(656,312),(657,312),(458,313),(495,313),(525,313),(534,313),(538,313),(458,314),(459,315),(460,316),(463,317),(464,318),(471,319),(487,320),(488,320),(495,320),(498,320),(499,320),(506,320),(487,321),(488,321),(495,321),(505,321),(506,321),(531,321),(487,322),(488,322),(498,322),(499,322),(505,322),(511,322),(512,322),(603,322),(611,322),(612,322),(487,323),(488,323),(495,323),(506,323),(487,324),(488,324),(487,325),(488,325),(498,325),(499,325),(511,325),(512,325),(603,325),(611,325),(612,325),(487,326),(488,326),(495,326),(498,326),(499,326),(506,326),(507,326),(528,326),(531,326),(532,326),(533,326),(534,326),(538,326),(539,326),(540,326),(541,326),(542,326),(552,326),(556,326),(581,326),(582,326),(589,326),(599,326),(600,326),(601,326),(602,326),(603,326),(607,326),(487,327),(488,327),(495,327),(591,327),(489,328),(495,328),(500,328),(501,328),(506,328),(508,328),(489,329),(500,329),(489,330),(500,330),(489,331),(500,331),(489,332),(495,332),(500,332),(489,333),(500,333),(526,333),(573,333),(489,334),(495,334),(500,334),(489,335),(500,335),(513,335),(613,335),(489,336),(500,336),(507,336),(536,336),(489,337),(500,337),(489,338),(495,338),(522,338),(587,338),(489,339),(500,339),(489,340),(500,340),(555,340),(557,340),(558,340),(640,340),(641,340),(653,340),(490,341),(503,341),(504,341),(515,341),(516,341),(595,341),(596,341),(603,341),(614,341),(626,341),(627,341),(491,342),(492,343),(502,343),(508,343),(534,343),(492,344),(502,344),(508,344),(494,345),(505,345),(494,346),(505,346),(517,346),(495,347),(495,348),(495,349),(590,349),(495,350),(495,351),(506,351),(495,352),(553,352),(554,352),(495,353),(506,353),(591,353),(495,354),(506,354),(592,354),(495,355),(495,356),(495,357),(506,357),(531,357),(603,357),(609,357),(610,357),(495,358),(495,359),(506,359),(651,359),(655,359),(656,359),(657,359),(495,360),(506,360),(495,361),(506,361),(495,362),(495,363),(496,363),(511,363),(512,363),(513,363),(514,363),(515,363),(516,363),(517,363),(518,363),(519,363),(520,363),(521,363),(561,363),(562,363),(585,363),(596,363),(495,364),(495,365),(496,365),(506,365),(508,365),(519,365),(603,365),(622,365),(650,365),(495,366),(495,367),(506,367),(527,367),(495,368),(505,368),(506,368),(507,368),(495,369),(501,369),(506,369),(495,370),(531,370),(495,371),(506,371),(495,372),(603,372),(629,372),(495,373),(506,373),(495,374),(534,374),(546,374),(583,374),(584,374),(650,374),(495,375),(506,375),(495,376),(506,376),(495,377),(495,378),(593,378),(495,379),(506,379),(495,380),(501,380),(506,380),(495,381),(506,381),(525,381),(528,381),(531,381),(533,381),(534,381),(536,381),(649,381),(652,381),(495,382),(495,383),(505,383),(557,383),(583,383),(584,383),(586,383),(589,383),(495,384),(495,385),(495,386),(495,387),(495,388),(594,388),(495,389),(506,389),(495,390),(501,390),(495,391),(506,391),(495,392),(506,392),(495,393),(506,393),(495,394),(496,394),(508,394),(519,394),(495,395),(523,395),(495,396),(495,397),(537,397),(495,398),(496,399),(508,399),(496,400),(508,400),(496,401),(508,401),(497,402),(510,402),(521,402),(498,403),(499,403),(500,403),(511,403),(512,403),(513,403),(517,403),(518,403),(521,403),(583,403),(584,403),(585,403),(500,404),(500,405),(500,406),(500,407),(501,408),(505,409),(505,410),(505,411),(505,412),(505,413),(557,413),(583,413),(584,413),(585,413),(587,413),(618,413),(505,414),(506,415),(507,415),(506,416),(506,417),(507,417),(518,417),(521,417),(506,418),(506,419),(506,420),(531,420),(506,421),(507,421),(525,421),(506,422),(506,423),(506,424),(603,424),(609,424),(610,424),(636,424),(644,424),(506,425),(506,426),(603,426),(506,427),(506,428),(506,429),(506,430),(506,431),(506,432),(507,432),(506,433),(506,434),(506,435),(507,435),(586,435),(506,436),(506,437),(507,438),(518,438),(521,438),(507,439),(528,439),(534,439),(538,439),(508,440),(508,441),(508,442),(508,443),(508,444),(508,445),(536,445),(659,445),(509,446),(520,446),(603,446),(518,447),(524,448),(525,449),(527,449),(534,449),(538,449),(606,449),(639,449),(525,450),(528,450),(531,450),(532,450),(533,450),(538,450),(546,450),(525,451),(591,451),(594,451),(525,452),(536,452),(560,452),(525,453),(527,453),(538,453),(609,453),(610,453),(629,453),(527,454),(574,454),(527,455),(579,455),(527,456),(527,457),(527,458),(577,458),(603,458),(631,458),(527,459),(527,460),(539,460),(540,460),(541,460),(542,460),(546,460),(547,460),(548,460),(650,460),(528,461),(530,461),(533,461),(528,462),(528,463),(534,463),(528,464),(531,464),(532,464),(534,464),(536,464),(538,464),(652,464),(528,465),(533,465),(534,465),(652,465),(528,466),(529,466),(533,466),(534,466),(655,466),(656,466),(657,466),(528,467),(533,467),(531,468),(532,468),(531,469),(531,470),(531,471),(603,471),(609,471),(610,471),(531,472),(532,472),(531,473),(532,473),(531,474),(652,474),(531,475),(532,475),(546,475),(590,475),(593,475),(594,475),(650,475),(531,476),(531,477),(532,477),(533,477),(531,478),(531,479),(532,480),(583,480),(584,480),(586,480),(532,481),(534,482),(537,482),(555,482),(586,482),(588,482),(649,482),(652,482),(534,483),(536,483),(546,483),(583,483),(584,483),(534,484),(534,485),(534,486),(553,486),(555,486),(557,486),(558,486),(575,486),(578,486),(579,486),(589,486),(603,486),(639,486),(641,486),(650,486),(655,486),(656,486),(657,486),(534,487),(534,488),(536,488),(534,489),(534,490),(534,491),(534,492),(534,493),(534,494),(534,495),(534,496),(534,497),(534,498),(534,499),(536,499),(535,500),(536,501),(536,502),(536,503),(536,504),(536,505),(536,506),(536,507),(539,508),(540,508),(541,508),(542,508),(539,509),(540,509),(541,509),(542,509),(548,509),(563,509),(539,510),(540,510),(541,510),(542,510),(539,511),(540,511),(541,511),(542,511),(548,511),(539,512),(540,512),(541,512),(542,512),(548,512),(539,513),(540,513),(541,513),(542,513),(547,513),(548,513),(539,514),(540,514),(541,514),(542,514),(543,514),(544,514),(545,514),(548,514),(539,515),(540,515),(541,515),(542,515),(543,515),(544,515),(545,515),(548,515),(539,516),(540,516),(541,516),(542,516),(548,516),(539,517),(540,517),(541,517),(542,517),(548,517),(557,517),(539,518),(540,518),(541,518),(542,518),(547,518),(539,519),(540,519),(541,519),(542,519),(539,520),(540,520),(541,520),(542,520),(546,520),(547,520),(548,520),(543,521),(544,521),(545,521),(543,522),(544,522),(545,522),(549,522),(550,522),(553,522),(546,523),(603,523),(631,523),(644,523),(650,523),(546,524),(583,524),(584,524),(547,525),(547,526),(556,526),(599,526),(642,526),(646,526),(547,527),(547,528),(547,529),(547,530),(547,531),(599,531),(642,531),(646,531),(547,532),(548,533),(559,533),(561,533),(562,533),(548,534),(548,535),(549,536),(550,536),(549,537),(550,537),(603,537),(604,537),(605,537),(650,537),(549,538),(550,538),(551,538),(553,538),(604,538),(605,538),(630,538),(653,538),(549,539),(550,539),(552,540),(553,541),(555,541),(557,541),(558,541),(639,541),(641,541),(650,541),(553,542),(553,543),(553,544),(553,545),(553,546),(553,547),(553,548),(553,549),(553,550),(553,551),(553,552),(553,553),(553,554),(553,555),(553,556),(553,557),(553,558),(553,559),(553,560),(553,561),(553,562),(553,563),(553,564),(554,565),(554,566),(554,567),(554,568),(554,569),(554,570),(554,571),(554,572),(554,573),(586,573),(556,574),(557,575),(557,576),(558,576),(557,577),(557,578),(557,579),(557,580),(557,581),(558,581),(558,582),(560,583),(586,583),(561,584),(562,584),(565,585),(575,585),(578,585),(579,585),(567,586),(568,587),(569,588),(570,589),(571,590),(571,591),(572,592),(573,593),(575,594),(576,595),(578,596),(579,597),(579,598),(579,599),(580,600),(581,600),(582,600),(580,601),(581,601),(582,601),(580,602),(581,602),(582,602),(580,603),(581,603),(582,603),(580,604),(581,604),(582,604),(580,605),(581,605),(582,605),(580,606),(581,606),(582,606),(580,607),(580,608),(580,609),(581,609),(582,609),(580,610),(581,610),(582,610),(580,611),(580,612),(580,613),(580,614),(581,614),(582,614),(580,615),(581,615),(582,615),(580,616),(581,616),(582,616),(581,617),(581,618),(582,618),(582,619),(583,620),(584,620),(583,621),(584,621),(586,621),(583,622),(584,622),(583,623),(584,623),(586,623),(583,624),(584,624),(586,624),(583,625),(584,625),(586,625),(583,626),(584,626),(586,626),(583,627),(584,627),(586,627),(583,628),(584,628),(583,629),(584,629),(586,629),(583,630),(584,630),(586,630),(583,631),(584,631),(586,631),(583,632),(584,632),(586,632),(586,633),(586,634),(586,635),(588,635),(586,636),(586,637),(588,637),(586,638),(588,638),(633,638),(650,638),(586,639),(586,640),(586,641),(586,642),(654,642),(586,643),(586,644),(588,645),(588,646),(590,647),(593,647),(594,647),(650,647),(591,648),(591,649),(594,650),(655,650),(656,650),(657,650),(594,651),(595,652),(595,653),(595,654),(595,655),(597,656),(597,657),(598,657),(603,657),(598,658),(599,659),(600,660),(601,660),(602,661),(603,662),(608,662),(603,663),(620,663),(621,663),(603,664),(623,664),(603,665),(624,665),(603,666),(628,666),(603,667),(640,667),(650,667),(603,668),(603,669),(622,669),(603,670),(636,670),(603,671),(620,671),(621,671),(603,672),(604,672),(605,672),(606,672),(607,672),(608,672),(609,672),(610,672),(611,672),(612,672),(613,672),(614,672),(615,672),(616,672),(618,672),(620,672),(621,672),(622,672),(623,672),(624,672),(625,672),(626,672),(627,672),(628,672),(629,672),(630,672),(631,672),(632,672),(633,672),(634,672),(635,672),(636,672),(637,672),(638,672),(639,672),(640,672),(641,672),(642,672),(643,672),(644,672),(645,672),(646,672),(647,672),(603,673),(622,673),(627,673),(630,673),(635,673),(641,673),(642,673),(643,673),(650,673),(603,674),(645,674),(603,675),(646,675),(603,676),(647,676),(606,677),(648,677),(606,678),(625,678),(639,678),(623,679),(626,680),(634,680),(632,681),(637,682),(638,683),(639,684),(650,685),(650,686),(650,687),(650,688),(650,689),(650,690),(650,691),(650,692),(651,693),(652,694),(655,695),(656,695),(657,695),(655,696),(656,696),(657,696),(655,697),(656,697),(657,697),(655,698),(656,698),(657,698),(655,699),(656,699),(657,699);
/*!40000 ALTER TABLE `help_relation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `help_topic`
--

DROP TABLE IF EXISTS `help_topic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `help_topic` (
  `help_topic_id` int(10) unsigned NOT NULL,
  `name` char(64) NOT NULL,
  `help_category_id` smallint(5) unsigned NOT NULL,
  `description` text NOT NULL,
  `example` text NOT NULL,
  `url` text NOT NULL,
  PRIMARY KEY (`help_topic_id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='help topics';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `help_topic`
--

LOCK TABLES `help_topic` WRITE;
/*!40000 ALTER TABLE `help_topic` DISABLE KEYS */;
INSERT INTO `help_topic` VALUES (0,'HELP_DATE',1,'This help information was generated from the MySQL 5.7 Reference Manual\non: 2019-12-17\n','',''),(1,'HELP_VERSION',1,'This help information was generated from the MySQL 5.7 Reference Manual\non: 2019-12-17 (revision: 64567)\n\nThis information applies to MySQL 5.7 through 5.7.30.\n','',''),(2,'AUTO_INCREMENT',2,'The AUTO_INCREMENT attribute can be used to generate a unique identity\nfor new rows:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/example-auto-increment.html\n\n','CREATE TABLE animals (\n     id MEDIUMINT NOT NULL AUTO_INCREMENT,\n     name CHAR(30) NOT NULL,\n     PRIMARY KEY (id)\n);\n\nINSERT INTO animals (name) VALUES\n    (\'dog\'),(\'cat\'),(\'penguin\'),\n    (\'lax\'),(\'whale\'),(\'ostrich\');\n\nSELECT * FROM animals;\n','https://dev.mysql.com/doc/refman/5.7/en/example-auto-increment.html'),(3,'HELP COMMAND',3,'Syntax:\nmysql> help search_string\n\nIf you provide an argument to the help command, mysql uses it as a\nsearch string to access server-side help from the contents of the MySQL\nReference Manual. The proper operation of this command requires that\nthe help tables in the mysql database be initialized with help topic\ninformation (see\nhttps://dev.mysql.com/doc/refman/5.7/en/server-side-help-support.html).\n\nIf there is no match for the search string, the search fails:\n\nmysql> help me\n\nNothing found\nPlease try to run \'help contents\' for a list of all accessible topics\n\nUse help contents to see a list of the help categories:\n\nmysql> help contents\nYou asked for help about help category: \"Contents\"\nFor more information, type \'help <item>\', where <item> is one of the\nfollowing categories:\n   Account Management\n   Administration\n   Data Definition\n   Data Manipulation\n   Data Types\n   Functions\n   Functions and Modifiers for Use with GROUP BY\n   Geographic Features\n   Language Structure\n   Plugins\n   Storage Engines\n   Stored Routines\n   Table Maintenance\n   Transactions\n   Triggers\n\nIf the search string matches multiple items, mysql shows a list of\nmatching topics:\n\nmysql> help logs\nMany help items for your request exist.\nTo make a more specific request, please type \'help <item>\',\nwhere <item> is one of the following topics:\n   SHOW\n   SHOW BINARY LOGS\n   SHOW ENGINE\n   SHOW LOGS\n\nUse a topic as the search string to see the help entry for that topic:\n\nmysql> help show binary logs\nName: \'SHOW BINARY LOGS\'\nDescription:\nSyntax:\nSHOW BINARY LOGS\nSHOW MASTER LOGS\n\nLists the binary log files on the server. This statement is used as\npart of the procedure described in [purge-binary-logs], that shows how\nto determine which logs can be purged.\n\nmysql> SHOW BINARY LOGS;\n+---------------+-----------+\n| Log_name      | File_size |\n+---------------+-----------+\n| binlog.000015 |    724935 |\n| binlog.000016 |    733481 |\n+---------------+-----------+\n\nThe search string can contain the wildcard characters % and _. These\nhave the same meaning as for pattern-matching operations performed with\nthe LIKE operator. For example, HELP rep% returns a list of topics that\nbegin with rep:\n\nmysql> HELP rep%\nMany help items for your request exist.\nTo make a more specific request, please type \'help <item>\',\nwhere <item> is one of the following\ntopics:\n   REPAIR TABLE\n   REPEAT FUNCTION\n   REPEAT LOOP\n   REPLACE\n   REPLACE FUNCTION\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mysql-server-side-help.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/mysql-server-side-help.html'),(4,'PROCEDURE ANALYSE',4,'Syntax:\nANALYSE([max_elements[,max_memory]])\n\n*Note*:\n\nPROCEDURE ANALYSE() is deprecated as of MySQL 5.7.18, and is removed in\nMySQL 8.0.\n\nANALYSE() examines the result from a query and returns an analysis of\nthe results that suggests optimal data types for each column that may\nhelp reduce table sizes. To obtain this analysis, append PROCEDURE\nANALYSE to the end of a SELECT statement:\n\nSELECT ... FROM ... WHERE ... PROCEDURE ANALYSE([max_elements,[max_memory]])\n\nFor example:\n\nSELECT col1, col2 FROM table1 PROCEDURE ANALYSE(10, 2000);\n\nThe results show some statistics for the values returned by the query,\nand propose an optimal data type for the columns. This can be helpful\nfor checking your existing tables, or after importing new data. You may\nneed to try different settings for the arguments so that PROCEDURE\nANALYSE() does not suggest the ENUM data type when it is not\nappropriate.\n\nThe arguments are optional and are used as follows:\n\no max_elements (default 256) is the maximum number of distinct values\n  that ANALYSE() notices per column. This is used by ANALYSE() to check\n  whether the optimal data type should be of type ENUM; if there are\n  more than max_elements distinct values, then ENUM is not a suggested\n  type.\n\no max_memory (default 8192) is the maximum amount of memory that\n  ANALYSE() should allocate per column while trying to find all\n  distinct values.\n\nA PROCEDURE clause is not permitted in a UNION statement.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/procedure-analyse.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/procedure-analyse.html'),(5,'FLUSH QUERY CACHE',3,'You can defragment the query cache to better utilize its memory with\nthe FLUSH QUERY CACHE statement. The statement does not remove any\nqueries from the cache.\n\nThe RESET QUERY CACHE statement removes all query results from the\nquery cache. The FLUSH TABLES statement also does this.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/query-cache-status-and-maintenance.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/query-cache-status-and-maintenance.html'),(6,'TRUE',5,'The constants TRUE and FALSE evaluate to 1 and 0, respectively. The\nconstant names can be written in any lettercase.\n\nmysql> SELECT TRUE, true, FALSE, false;\n        -> 1, 1, 0, 0\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/boolean-literals.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/boolean-literals.html'),(7,'FALSE',5,'The constants TRUE and FALSE evaluate to 1 and 0, respectively. The\nconstant names can be written in any lettercase.\n\nmysql> SELECT TRUE, true, FALSE, false;\n        -> 1, 1, 0, 0\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/boolean-literals.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/boolean-literals.html'),(8,'BIT',2,'BIT[(M)]\n\nA bit-value type. M indicates the number of bits per value, from 1 to\n64. The default is 1 if M is omitted.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(9,'TINYINT',2,'TINYINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA very small integer. The signed range is -128 to 127. The unsigned\nrange is 0 to 255.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(10,'BOOLEAN',2,'BOOL, BOOLEAN\n\nThese types are synonyms for TINYINT(1). A value of zero is considered\nfalse. Nonzero values are considered true:\n\nmysql> SELECT IF(0, \'true\', \'false\');\n+------------------------+\n| IF(0, \'true\', \'false\') |\n+------------------------+\n| false                  |\n+------------------------+\n\nmysql> SELECT IF(1, \'true\', \'false\');\n+------------------------+\n| IF(1, \'true\', \'false\') |\n+------------------------+\n| true                   |\n+------------------------+\n\nmysql> SELECT IF(2, \'true\', \'false\');\n+------------------------+\n| IF(2, \'true\', \'false\') |\n+------------------------+\n| true                   |\n+------------------------+\n\nHowever, the values TRUE and FALSE are merely aliases for 1 and 0,\nrespectively, as shown here:\n\nmysql> SELECT IF(0 = FALSE, \'true\', \'false\');\n+--------------------------------+\n| IF(0 = FALSE, \'true\', \'false\') |\n+--------------------------------+\n| true                           |\n+--------------------------------+\n\nmysql> SELECT IF(1 = TRUE, \'true\', \'false\');\n+-------------------------------+\n| IF(1 = TRUE, \'true\', \'false\') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT IF(2 = TRUE, \'true\', \'false\');\n+-------------------------------+\n| IF(2 = TRUE, \'true\', \'false\') |\n+-------------------------------+\n| false                         |\n+-------------------------------+\n\nmysql> SELECT IF(2 = FALSE, \'true\', \'false\');\n+--------------------------------+\n| IF(2 = FALSE, \'true\', \'false\') |\n+--------------------------------+\n| false                          |\n+--------------------------------+\n\nThe last two statements display the results shown because 2 is equal to\nneither 1 nor 0.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(11,'SMALLINT',2,'SMALLINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA small integer. The signed range is -32768 to 32767. The unsigned\nrange is 0 to 65535.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(12,'MEDIUMINT',2,'MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA medium-sized integer. The signed range is -8388608 to 8388607. The\nunsigned range is 0 to 16777215.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(13,'INT',2,'INT[(M)] [UNSIGNED] [ZEROFILL]\n\nA normal-size integer. The signed range is -2147483648 to 2147483647.\nThe unsigned range is 0 to 4294967295.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(14,'INTEGER',2,'INTEGER[(M)] [UNSIGNED] [ZEROFILL]\n\nThis type is a synonym for INT.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(15,'BIGINT',2,'BIGINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA large integer. The signed range is -9223372036854775808 to\n9223372036854775807. The unsigned range is 0 to 18446744073709551615.\n\nSERIAL is an alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(16,'DECIMAL',2,'DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]\n\nA packed \"exact\" fixed-point number. M is the total number of digits\n(the precision) and D is the number of digits after the decimal point\n(the scale). The decimal point and (for negative numbers) the - sign\nare not counted in M. If D is 0, values have no decimal point or\nfractional part. The maximum number of digits (M) for DECIMAL is 65.\nThe maximum number of supported decimals (D) is 30. If D is omitted,\nthe default is 0. If M is omitted, the default is 10.\n\nUNSIGNED, if specified, disallows negative values.\n\nAll basic calculations (+, -, *, /) with DECIMAL columns are done with\na precision of 65 digits.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(17,'DEC',2,'DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED]\n[ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL]\n\nThese types are synonyms for DECIMAL. The FIXED synonym is available\nfor compatibility with other database systems.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(18,'FLOAT',2,'FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]\n\nA small (single-precision) floating-point number. Permissible values\nare -3.402823466E+38 to -1.175494351E-38, 0, and 1.175494351E-38 to\n3.402823466E+38. These are the theoretical limits, based on the IEEE\nstandard. The actual range might be slightly smaller depending on your\nhardware or operating system.\n\nM is the total number of digits and D is the number of digits following\nthe decimal point. If M and D are omitted, values are stored to the\nlimits permitted by the hardware. A single-precision floating-point\nnumber is accurate to approximately 7 decimal places.\n\nFLOAT(M,D) is a nonstandard MySQL extension.\n\nUNSIGNED, if specified, disallows negative values.\n\nUsing FLOAT might give you some unexpected problems because all\ncalculations in MySQL are done with double precision. See\nhttps://dev.mysql.com/doc/refman/5.7/en/no-matching-rows.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(19,'DOUBLE',2,'DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]\n\nA normal-size (double-precision) floating-point number. Permissible\nvalues are -1.7976931348623157E+308 to -2.2250738585072014E-308, 0, and\n2.2250738585072014E-308 to 1.7976931348623157E+308. These are the\ntheoretical limits, based on the IEEE standard. The actual range might\nbe slightly smaller depending on your hardware or operating system.\n\nM is the total number of digits and D is the number of digits following\nthe decimal point. If M and D are omitted, values are stored to the\nlimits permitted by the hardware. A double-precision floating-point\nnumber is accurate to approximately 15 decimal places.\n\nDOUBLE(M,D) is a nonstandard MySQL extension.\n\nUNSIGNED, if specified, disallows negative values.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(20,'DOUBLE PRECISION',2,'DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL], REAL[(M,D)] [UNSIGNED]\n[ZEROFILL]\n\nThese types are synonyms for DOUBLE. Exception: If the REAL_AS_FLOAT\nSQL mode is enabled, REAL is a synonym for FLOAT rather than DOUBLE.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/numeric-type-overview.html'),(21,'DATE',2,'DATE\n\nA date. The supported range is \'1000-01-01\' to \'9999-12-31\'. MySQL\ndisplays DATE values in \'YYYY-MM-DD\' format, but permits assignment of\nvalues to DATE columns using either strings or numbers.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html'),(22,'DATETIME',2,'DATETIME[(fsp)]\n\nA date and time combination. The supported range is \'1000-01-01\n00:00:00.000000\' to \'9999-12-31 23:59:59.999999\'. MySQL displays\nDATETIME values in \'YYYY-MM-DD hh:mm:ss[.fraction]\' format, but permits\nassignment of values to DATETIME columns using either strings or\nnumbers.\n\nAn optional fsp value in the range from 0 to 6 may be given to specify\nfractional seconds precision. A value of 0 signifies that there is no\nfractional part. If omitted, the default precision is 0.\n\nAutomatic initialization and updating to the current date and time for\nDATETIME columns can be specified using DEFAULT and ON UPDATE column\ndefinition clauses, as described in\nhttps://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html'),(23,'TIMESTAMP',2,'TIMESTAMP[(fsp)]\n\nA timestamp. The range is \'1970-01-01 00:00:01.000000\' UTC to\n\'2038-01-19 03:14:07.999999\' UTC. TIMESTAMP values are stored as the\nnumber of seconds since the epoch (\'1970-01-01 00:00:00\' UTC). A\nTIMESTAMP cannot represent the value \'1970-01-01 00:00:00\' because that\nis equivalent to 0 seconds from the epoch and the value 0 is reserved\nfor representing \'0000-00-00 00:00:00\', the \"zero\" TIMESTAMP value.\n\nAn optional fsp value in the range from 0 to 6 may be given to specify\nfractional seconds precision. A value of 0 signifies that there is no\nfractional part. If omitted, the default precision is 0.\n\nThe way the server handles TIMESTAMP definitions depends on the value\nof the explicit_defaults_for_timestamp system variable (see\nhttps://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html).\n\nIf explicit_defaults_for_timestamp is enabled, there is no automatic\nassignment of the DEFAULT CURRENT_TIMESTAMP or ON UPDATE\nCURRENT_TIMESTAMP attributes to any TIMESTAMP column. They must be\nincluded explicitly in the column definition. Also, any TIMESTAMP not\nexplicitly declared as NOT NULL permits NULL values.\n\nIf explicit_defaults_for_timestamp is disabled, the server handles\nTIMESTAMP as follows:\n\nUnless specified otherwise, the first TIMESTAMP column in a table is\ndefined to be automatically set to the date and time of the most recent\nmodification if not explicitly assigned a value. This makes TIMESTAMP\nuseful for recording the timestamp of an INSERT or UPDATE operation.\nYou can also set any TIMESTAMP column to the current date and time by\nassigning it a NULL value, unless it has been defined with the NULL\nattribute to permit NULL values.\n\nAutomatic initialization and updating to the current date and time can\nbe specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE\nCURRENT_TIMESTAMP column definition clauses. By default, the first\nTIMESTAMP column has these properties, as previously noted. However,\nany TIMESTAMP column in a table can be defined to have these\nproperties.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html'),(24,'TIME',2,'TIME[(fsp)]\n\nA time. The range is \'-838:59:59.000000\' to \'838:59:59.000000\'. MySQL\ndisplays TIME values in \'hh:mm:ss[.fraction]\' format, but permits\nassignment of values to TIME columns using either strings or numbers.\n\nAn optional fsp value in the range from 0 to 6 may be given to specify\nfractional seconds precision. A value of 0 signifies that there is no\nfractional part. If omitted, the default precision is 0.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html'),(25,'YEAR DATA TYPE',2,'YEAR[(4)]\n\nA year in 4-digit format. MySQL displays YEAR values in YYYY format,\nbut permits assignment of values to YEAR columns using either strings\nor numbers. Values display as 1901 to 2155, or 0000.\n\n*Note*:\n\nThe YEAR(2) data type is deprecated and support for it is removed in\nMySQL 5.7.5. To convert 2-digit YEAR(2) columns to 4-digit YEAR\ncolumns, see\nhttps://dev.mysql.com/doc/refman/5.7/en/migrating-from-year2.html.\n\nFor additional information about YEAR display format and interpretation\nof input values, see https://dev.mysql.com/doc/refman/5.7/en/year.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-type-overview.html'),(26,'CHAR',2,'[NATIONAL] CHAR[(M)] [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nA fixed-length string that is always right-padded with spaces to the\nspecified length when stored. M represents the column length in\ncharacters. The range of M is 0 to 255. If M is omitted, the length is\n1.\n\n*Note*:\n\nTrailing spaces are removed when CHAR values are retrieved unless the\nPAD_CHAR_TO_FULL_LENGTH SQL mode is enabled.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(27,'CHAR BYTE',2,'The CHAR BYTE data type is an alias for the BINARY data type. This is a\ncompatibility feature.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(28,'VARCHAR',2,'[NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nA variable-length string. M represents the maximum column length in\ncharacters. The range of M is 0 to 65,535. The effective maximum length\nof a VARCHAR is subject to the maximum row size (65,535 bytes, which is\nshared among all columns) and the character set used. For example, utf8\ncharacters can require up to three bytes per character, so a VARCHAR\ncolumn that uses the utf8 character set can be declared to be a maximum\nof 21,844 characters. See\nhttps://dev.mysql.com/doc/refman/5.7/en/column-count-limit.html.\n\nMySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plus\ndata. The length prefix indicates the number of bytes in the value. A\nVARCHAR column uses one length byte if values require no more than 255\nbytes, two length bytes if values may require more than 255 bytes.\n\n*Note*:\n\nMySQL follows the standard SQL specification, and does not remove\ntrailing spaces from VARCHAR values.\n\nVARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the\nstandard SQL way to define that a VARCHAR column should use some\npredefined character set. MySQL uses utf8 as this predefined character\nset. https://dev.mysql.com/doc/refman/5.7/en/charset-national.html.\nNVARCHAR is shorthand for NATIONAL VARCHAR.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(29,'BINARY',2,'BINARY[(M)]\n\nThe BINARY type is similar to the CHAR type, but stores binary byte\nstrings rather than nonbinary character strings. An optional length M\nrepresents the column length in bytes. If omitted, M defaults to 1.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(30,'VARBINARY',2,'VARBINARY(M)\n\nThe VARBINARY type is similar to the VARCHAR type, but stores binary\nbyte strings rather than nonbinary character strings. M represents the\nmaximum column length in bytes.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(31,'TINYBLOB',2,'TINYBLOB\n\nA BLOB column with a maximum length of 255 (28 − 1) bytes. Each\nTINYBLOB value is stored using a 1-byte length prefix that indicates\nthe number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(32,'TINYTEXT',2,'TINYTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 255 (28 − 1) characters. The\neffective maximum length is less if the value contains multibyte\ncharacters. Each TINYTEXT value is stored using a 1-byte length prefix\nthat indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(33,'BLOB',2,'BLOB[(M)]\n\nA BLOB column with a maximum length of 65,535 (216 − 1) bytes. Each\nBLOB value is stored using a 2-byte length prefix that indicates the\nnumber of bytes in the value.\n\nAn optional length M can be given for this type. If this is done, MySQL\ncreates the column as the smallest BLOB type large enough to hold\nvalues M bytes long.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(34,'TEXT',2,'TEXT[(M)] [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 65,535 (216 − 1) characters.\nThe effective maximum length is less if the value contains multibyte\ncharacters. Each TEXT value is stored using a 2-byte length prefix that\nindicates the number of bytes in the value.\n\nAn optional length M can be given for this type. If this is done, MySQL\ncreates the column as the smallest TEXT type large enough to hold\nvalues M characters long.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(35,'MEDIUMBLOB',2,'MEDIUMBLOB\n\nA BLOB column with a maximum length of 16,777,215 (224 − 1) bytes.\nEach MEDIUMBLOB value is stored using a 3-byte length prefix that\nindicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(36,'MEDIUMTEXT',2,'MEDIUMTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 16,777,215 (224 − 1)\ncharacters. The effective maximum length is less if the value contains\nmultibyte characters. Each MEDIUMTEXT value is stored using a 3-byte\nlength prefix that indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(37,'LONGBLOB',2,'LONGBLOB\n\nA BLOB column with a maximum length of 4,294,967,295 or 4GB (232 − 1)\nbytes. The effective maximum length of LONGBLOB columns depends on the\nconfigured maximum packet size in the client/server protocol and\navailable memory. Each LONGBLOB value is stored using a 4-byte length\nprefix that indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(38,'LONGTEXT',2,'LONGTEXT [CHARACTER SET charset_name] [COLLATE collation_name]\n\nA TEXT column with a maximum length of 4,294,967,295 or 4GB (232 − 1)\ncharacters. The effective maximum length is less if the value contains\nmultibyte characters. The effective maximum length of LONGTEXT columns\nalso depends on the configured maximum packet size in the client/server\nprotocol and available memory. Each LONGTEXT value is stored using a\n4-byte length prefix that indicates the number of bytes in the value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(39,'ENUM',2,'ENUM(\'value1\',\'value2\',...) [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nAn enumeration. A string object that can have only one value, chosen\nfrom the list of values \'value1\', \'value2\', ..., NULL or the special \'\'\nerror value. ENUM values are represented internally as integers.\n\nAn ENUM column can have a maximum of 65,535 distinct elements. (The\npractical limit is less than 3000.) A table can have no more than 255\nunique element list definitions among its ENUM and SET columns\nconsidered as a group. For more information on these limits, see\nhttps://dev.mysql.com/doc/refman/5.7/en/create-table-files.html#limits-\nfrm-file.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(40,'SET DATA TYPE',2,'SET(\'value1\',\'value2\',...) [CHARACTER SET charset_name] [COLLATE\ncollation_name]\n\nA set. A string object that can have zero or more values, each of which\nmust be chosen from the list of values \'value1\', \'value2\', ... SET\nvalues are represented internally as integers.\n\nA SET column can have a maximum of 64 distinct members. A table can\nhave no more than 255 unique element list definitions among its ENUM\nand SET columns considered as a group. For more information on this\nlimit, see\nhttps://dev.mysql.com/doc/refman/5.7/en/create-table-files.html#limits-\nfrm-file.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html'),(41,'BLOB DATA TYPE',2,'A BLOB is a binary large object that can hold a variable amount of\ndata. The four BLOB types are TINYBLOB, BLOB, MEDIUMBLOB, and LONGBLOB.\nThese differ only in the maximum length of the values they can hold.\nThe four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. These\ncorrespond to the four BLOB types and have the same maximum lengths and\nstorage requirements. See\nhttps://dev.mysql.com/doc/refman/5.7/en/storage-requirements.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/blob.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/blob.html'),(42,'GEOMETRY HIERARCHY',6,'Geometry is the base class. It is an abstract class. The instantiable\nsubclasses of Geometry are restricted to zero-, one-, and\ntwo-dimensional geometric objects that exist in two-dimensional\ncoordinate space. All instantiable geometry classes are defined so that\nvalid instances of a geometry class are topologically closed (that is,\nall defined geometries include their boundary).\n\nThe base Geometry class has subclasses for Point, Curve, Surface, and\nGeometryCollection:\n\no Point represents zero-dimensional objects.\n\no Curve represents one-dimensional objects, and has subclass\n  LineString, with sub-subclasses Line and LinearRing.\n\no Surface is designed for two-dimensional objects and has subclass\n  Polygon.\n\no GeometryCollection has specialized zero-, one-, and two-dimensional\n  collection classes named MultiPoint, MultiLineString, and\n  MultiPolygon for modeling geometries corresponding to collections of\n  Points, LineStrings, and Polygons, respectively. MultiCurve and\n  MultiSurface are introduced as abstract superclasses that generalize\n  the collection interfaces to handle Curves and Surfaces.\n\nGeometry, Curve, Surface, MultiCurve, and MultiSurface are defined as\nnoninstantiable classes. They define a common set of methods for their\nsubclasses and are included for extensibility.\n\nPoint, LineString, Polygon, GeometryCollection, MultiPoint,\nMultiLineString, and MultiPolygon are instantiable classes.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-geometry-class-hierarchy.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-geometry-class-hierarchy.html'),(43,'MBR DEFINITION',7,'Its MBR (minimum bounding rectangle), or envelope. This is the bounding\ngeometry, formed by the minimum and maximum (X,Y) coordinates:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-class-geometry.html\n\n','((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n','https://dev.mysql.com/doc/refman/5.7/en/gis-class-geometry.html'),(44,'WKT DEFINITION',8,'The Well-Known Text (WKT) representation of geometry values is designed\nfor exchanging geometry data in ASCII form. The OpenGIS specification\nprovides a Backus-Naur grammar that specifies the formal production\nrules for writing WKT values (see\nhttps://dev.mysql.com/doc/refman/5.7/en/spatial-types.html).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-data-formats.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-data-formats.html'),(45,'SPATIAL COLUMNS',6,'MySQL provides a standard way of creating spatial columns for geometry\ntypes, for example, with CREATE TABLE or ALTER TABLE. Spatial columns\nare supported for MyISAM, InnoDB, NDB, and ARCHIVE tables. See also the\nnotes about spatial indexes under [HELP SPATIAL indexes].\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/creating-spatial-columns.html\n\n','CREATE TABLE geom (g GEOMETRY);\n','https://dev.mysql.com/doc/refman/5.7/en/creating-spatial-columns.html'),(46,'SPATIAL INDEXES',6,'For InnoDB and MyISAM tables, MySQL can create spatial indexes using\nsyntax similar to that for creating regular indexes, but using the\nSPATIAL keyword. Columns in spatial indexes must be declared NOT NULL.\nThe following examples demonstrate how to create spatial indexes:\n\no With CREATE TABLE:\n\nCREATE TABLE geom (g GEOMETRY NOT NULL, SPATIAL INDEX(g));\n\no With ALTER TABLE:\n\nCREATE TABLE geom (g GEOMETRY NOT NULL);\nALTER TABLE geom ADD SPATIAL INDEX(g);\n\no With CREATE INDEX:\n\nCREATE TABLE geom (g GEOMETRY NOT NULL);\nCREATE SPATIAL INDEX g ON geom (g);\n\nSPATIAL INDEX creates an R-tree index. For storage engines that support\nnonspatial indexing of spatial columns, the engine creates a B-tree\nindex. A B-tree index on spatial values is useful for exact-value\nlookups, but not for range scans.\n\nFor more information on indexing spatial columns, see [HELP CREATE\nINDEX].\n\nTo drop spatial indexes, use ALTER TABLE or DROP INDEX:\n\no With ALTER TABLE:\n\nALTER TABLE geom DROP INDEX g;\n\no With DROP INDEX:\n\nDROP INDEX g ON geom;\n\nExample: Suppose that a table geom contains more than 32,000\ngeometries, which are stored in the column g of type GEOMETRY. The\ntable also has an AUTO_INCREMENT column fid for storing object ID\nvalues.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/creating-spatial-indexes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/creating-spatial-indexes.html'),(47,'=',10,'=\n\nEqual:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 1 = 0;\n        -> 0\nmysql> SELECT \'0\' = 0;\n        -> 1\nmysql> SELECT \'0.0\' = 0;\n        -> 1\nmysql> SELECT \'0.01\' = 0;\n        -> 0\nmysql> SELECT \'.01\' = 0.01;\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(48,'<=>',10,'Syntax:\n<=>\n\nNULL-safe equal. This operator performs an equality comparison like the\n= operator, but returns 1 rather than NULL if both operands are NULL,\nand 0 rather than NULL if one operand is NULL.\n\nThe <=> operator is equivalent to the standard SQL IS NOT DISTINCT FROM\noperator.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1, 1, 0\nmysql> SELECT 1 = 1, NULL = NULL, 1 = NULL;\n        -> 1, NULL, NULL\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(49,'!=',10,'Syntax:\n<>, !=\n\nNot equal:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT \'.01\' <> \'0.01\';\n        -> 1\nmysql> SELECT .01 <> \'0.01\';\n        -> 0\nmysql> SELECT \'zapp\' <> \'zappp\';\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(50,'<=',10,'Syntax:\n<=\n\nLess than or equal:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 0.1 <= 2;\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(51,'<',10,'Syntax:\n<\n\nLess than:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 2 < 2;\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(52,'>=',10,'Syntax:\n>=\n\nGreater than or equal:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 2 >= 2;\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(53,'>',10,'Syntax:\n>\n\nGreater than:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 2 > 2;\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(54,'BETWEEN AND',10,'Syntax:\nexpr BETWEEN min AND max\n\nIf expr is greater than or equal to min and expr is less than or equal\nto max, BETWEEN returns 1, otherwise it returns 0. This is equivalent\nto the expression (min <= expr AND expr <= max) if all the arguments\nare of the same type. Otherwise type conversion takes place according\nto the rules described in\nhttps://dev.mysql.com/doc/refman/5.7/en/type-conversion.html, but\napplied to all the three arguments.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 2 BETWEEN 1 AND 3, 2 BETWEEN 3 and 1;\n        -> 1, 0\nmysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT \'b\' BETWEEN \'a\' AND \'c\';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND \'3\';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND \'x-3\';\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(55,'NOT BETWEEN',10,'Syntax:\nexpr NOT BETWEEN min AND max\n\nThis is the same as NOT (expr BETWEEN min AND max).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(56,'COALESCE',10,'Syntax:\nCOALESCE(value,...)\n\nReturns the first non-NULL value in the list, or NULL if there are no\nnon-NULL values.\n\nThe return type of COALESCE() is the aggregated type of the argument\ntypes.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(57,'GREATEST',10,'Syntax:\nGREATEST(value1,value2,...)\n\nWith two or more arguments, returns the largest (maximum-valued)\nargument. The arguments are compared using the same rules as for\nLEAST().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST(\'B\',\'A\',\'C\');\n        -> \'C\'\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(58,'IN',10,'Syntax:\nexpr IN (value,...)\n\nReturns 1 (true) if expr is equal to any of the values in the IN()\nlist, else returns 0 (false).\n\nType conversion takes place according to the rules described in\nhttps://dev.mysql.com/doc/refman/5.7/en/type-conversion.html, applied\nto all the arguments. If no type conversion is needed for the values in\nthe IN() list, they are all constants of the same type, and expr can be\ncompared to each of them as a value of the same type (possibly after\ntype conversion), an optimization takes place. The values the list are\nsorted and the search for expr is done using a binary search, which\nmakes the IN() operation very quick.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 2 IN (0,3,5,7);\n        -> 0\nmysql> SELECT \'wefwf\' IN (\'wee\',\'wefwf\',\'weg\');\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(59,'NOT IN',10,'Syntax:\nexpr NOT IN (value,...)\n\nThis is the same as NOT (expr IN (value,...)).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(60,'INTERVAL',10,'Syntax:\nINTERVAL(N,N1,N2,N3,...)\n\nReturns 0 if N < N1, 1 if N < N2 and so on or -1 if N is NULL. All\narguments are treated as integers. It is required that N1 < N2 < N3 <\n... < Nn for this function to work correctly. This is because a binary\nsearch is used (very fast).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(61,'IS',10,'Syntax:\nIS boolean_value\n\nTests a value against a boolean value, where boolean_value can be TRUE,\nFALSE, or UNKNOWN.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 1 IS TRUE, 0 IS FALSE, NULL IS UNKNOWN;\n        -> 1, 1, 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(62,'IS NOT',10,'Syntax:\nIS NOT boolean_value\n\nTests a value against a boolean value, where boolean_value can be TRUE,\nFALSE, or UNKNOWN.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 1 IS NOT UNKNOWN, 0 IS NOT UNKNOWN, NULL IS NOT UNKNOWN;\n        -> 1, 1, 0\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(63,'IS NULL',10,'Syntax:\nIS NULL\n\nTests whether a value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0, 0, 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(64,'IS NOT NULL',10,'Syntax:\nIS NOT NULL\n\nTests whether a value is not NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1, 1, 0\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(65,'ISNULL',10,'Syntax:\nISNULL(expr)\n\nIf expr is NULL, ISNULL() returns 1, otherwise it returns 0.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(66,'LEAST',10,'Syntax:\nLEAST(value1,value2,...)\n\nWith two or more arguments, returns the smallest (minimum-valued)\nargument. The arguments are compared using the following rules:\n\no If any argument is NULL, the result is NULL. No comparison is needed.\n\no If all arguments are integer-valued, they are compared as integers.\n\no If at least one argument is double precision, they are compared as\n  double-precision values. Otherwise, if at least one argument is a\n  DECIMAL value, they are compared as DECIMAL values.\n\no If the arguments comprise a mix of numbers and strings, they are\n  compared as numbers.\n\no If any argument is a nonbinary (character) string, the arguments are\n  compared as nonbinary strings.\n\no In all other cases, the arguments are compared as binary strings.\n\nThe return type of LEAST() is the aggregated type of the comparison\nargument types.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html\n\n','mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST(\'B\',\'A\',\'C\');\n        -> \'A\'\n','https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html'),(67,'!',11,'Syntax:\nNOT, !\n\nLogical NOT. Evaluates to 1 if the operand is 0, to 0 if the operand is\nnonzero, and NOT NULL returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html\n\n','mysql> SELECT NOT 10;\n        -> 0\nmysql> SELECT NOT 0;\n        -> 1\nmysql> SELECT NOT NULL;\n        -> NULL\nmysql> SELECT ! (1+1);\n        -> 0\nmysql> SELECT ! 1+1;\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html'),(68,'AND',11,'Syntax:\nAND, &&\n\nLogical AND. Evaluates to 1 if all operands are nonzero and not NULL,\nto 0 if one or more operands are 0, otherwise NULL is returned.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html\n\n','mysql> SELECT 1 AND 1;\n        -> 1\nmysql> SELECT 1 AND 0;\n        -> 0\nmysql> SELECT 1 AND NULL;\n        -> NULL\nmysql> SELECT 0 AND NULL;\n        -> 0\nmysql> SELECT NULL AND 0;\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html'),(69,'OR',11,'Syntax:\nOR, ||\n\nLogical OR. When both operands are non-NULL, the result is 1 if any\noperand is nonzero, and 0 otherwise. With a NULL operand, the result is\n1 if the other operand is nonzero, and NULL otherwise. If both operands\nare NULL, the result is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html\n\n','mysql> SELECT 1 OR 1;\n        -> 1\nmysql> SELECT 1 OR 0;\n        -> 1\nmysql> SELECT 0 OR 0;\n        -> 0\nmysql> SELECT 0 OR NULL;\n        -> NULL\nmysql> SELECT 1 OR NULL;\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html'),(70,'XOR',11,'Syntax:\nXOR\n\nLogical XOR. Returns NULL if either operand is NULL. For non-NULL\noperands, evaluates to 1 if an odd number of operands is nonzero,\notherwise 0 is returned.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html\n\n','mysql> SELECT 1 XOR 1;\n        -> 0\nmysql> SELECT 1 XOR 0;\n        -> 1\nmysql> SELECT 1 XOR NULL;\n        -> NULL\nmysql> SELECT 1 XOR 1 XOR 1;\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html'),(71,'ASSIGN-VALUE',11,'Syntax:\n:=\n\nAssignment operator. Causes the user variable on the left hand side of\nthe operator to take on the value to its right. The value on the right\nhand side may be a literal value, another variable storing a value, or\nany legal expression that yields a scalar value, including the result\nof a query (provided that this value is a scalar value). You can\nperform multiple assignments in the same SET statement. You can perform\nmultiple assignments in the same statement.\n\nUnlike =, the := operator is never interpreted as a comparison\noperator. This means you can use := in any valid SQL statement (not\njust in SET statements) to assign a value to a variable.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html\n\n','mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n\nmysql> SELECT @var1:=COUNT(*) FROM t1;\n        -> 4\nmysql> SELECT @var1;\n        -> 4\n','https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html'),(72,'ASSIGN-EQUAL',11,'Syntax:\n=\n\nThis operator is used to perform value assignments in two cases,\ndescribed in the next two paragraphs.\n\nWithin a SET statement, = is treated as an assignment operator that\ncauses the user variable on the left hand side of the operator to take\non the value to its right. (In other words, when used in a SET\nstatement, = is treated identically to :=.) The value on the right hand\nside may be a literal value, another variable storing a value, or any\nlegal expression that yields a scalar value, including the result of a\nquery (provided that this value is a scalar value). You can perform\nmultiple assignments in the same SET statement.\n\nIn the SET clause of an UPDATE statement, = also acts as an assignment\noperator; in this case, however, it causes the column named on the left\nhand side of the operator to assume the value given to the right,\nprovided any WHERE conditions that are part of the UPDATE are met. You\ncan make multiple assignments in the same SET clause of an UPDATE\nstatement.\n\nIn any other context, = is treated as a comparison operator.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html\n\n','mysql> SELECT @var1, @var2;\n        -> NULL, NULL\nmysql> SELECT @var1 := 1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2;\n        -> 1, NULL\nmysql> SELECT @var1, @var2 := @var1;\n        -> 1, 1\nmysql> SELECT @var1, @var2;\n        -> 1, 1\n','https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html'),(73,'CASE OPERATOR',12,'Syntax:\nCASE value WHEN [compare_value] THEN result [WHEN [compare_value] THEN\nresult ...] [ELSE result] END\n\nCASE WHEN [condition] THEN result [WHEN [condition] THEN result ...]\n[ELSE result] END\n\nThe first CASE syntax returns the result for the first\nvalue=compare_value comparison that is true. The second syntax returns\nthe result for the first condition that is true. If no comparison or\ncondition is true, the result after ELSE is returned, or NULL if there\nis no ELSE part.\n\n*Note*:\n\nThe syntax of the CASE expr described here differs slightly from that\nof the SQL CASE statement described in [HELP CASE statement], for use\ninside stored programs. The CASE statement cannot have an ELSE NULL\nclause, and it is terminated with END CASE instead of END.\n\nThe return type of a CASE expression result is the aggregated type of\nall result values.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html\n\n','mysql> SELECT CASE 1 WHEN 1 THEN \'one\'\n    ->     WHEN 2 THEN \'two\' ELSE \'more\' END;\n        -> \'one\'\nmysql> SELECT CASE WHEN 1>0 THEN \'true\' ELSE \'false\' END;\n        -> \'true\'\nmysql> SELECT CASE BINARY \'B\'\n    ->     WHEN \'a\' THEN 1 WHEN \'b\' THEN 2 END;\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html'),(74,'IF FUNCTION',12,'Syntax:\nIF(expr1,expr2,expr3)\n\nIf expr1 is TRUE (expr1 <> 0 and expr1 <> NULL), IF() returns expr2.\nOtherwise, it returns expr3.\n\n*Note*:\n\nThere is also an IF statement, which differs from the IF() function\ndescribed here. See [HELP IF statement].\n\nIf only one of expr2 or expr3 is explicitly NULL, the result type of\nthe IF() function is the type of the non-NULL expression.\n\nThe default return type of IF() (which may matter when it is stored\ninto a temporary table) is calculated as follows:\n\no If expr2 or expr3 produce a string, the result is a string.\n\n  If expr2 and expr3 are both strings, the result is case-sensitive if\n  either string is case-sensitive.\n\no If expr2 or expr3 produce a floating-point value, the result is a\n  floating-point value.\n\no If expr2 or expr3 produce an integer, the result is an integer.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html\n\n','mysql> SELECT IF(1>2,2,3);\n        -> 3\nmysql> SELECT IF(1<2,\'yes\',\'no\');\n        -> \'yes\'\nmysql> SELECT IF(STRCMP(\'test\',\'test1\'),\'no\',\'yes\');\n        -> \'no\'\n','https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html'),(75,'IFNULL',12,'Syntax:\nIFNULL(expr1,expr2)\n\nIf expr1 is not NULL, IFNULL() returns expr1; otherwise it returns\nexpr2.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html\n\n','mysql> SELECT IFNULL(1,0);\n        -> 1\nmysql> SELECT IFNULL(NULL,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,\'yes\');\n        -> \'yes\'\n','https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html'),(76,'NULLIF',12,'Syntax:\nNULLIF(expr1,expr2)\n\nReturns NULL if expr1 = expr2 is true, otherwise returns expr1. This is\nthe same as CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END.\n\nThe return value has the same type as the first argument.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html\n\n','mysql> SELECT NULLIF(1,1);\n        -> NULL\nmysql> SELECT NULLIF(1,2);\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html'),(77,'ASCII',13,'Syntax:\nASCII(str)\n\nReturns the numeric value of the leftmost character of the string str.\nReturns 0 if str is the empty string. Returns NULL if str is NULL.\nASCII() works for 8-bit characters.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT ASCII(\'2\');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII(\'dx\');\n        -> 100\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(78,'BIN',13,'Syntax:\nBIN(N)\n\nReturns a string representation of the binary value of N, where N is a\nlonglong (BIGINT) number. This is equivalent to CONV(N,10,2). Returns\nNULL if N is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT BIN(12);\n        -> \'1100\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(79,'BIT_LENGTH',13,'Syntax:\nBIT_LENGTH(str)\n\nReturns the length of the string str in bits.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT BIT_LENGTH(\'text\');\n        -> 32\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(80,'CHAR FUNCTION',13,'Syntax:\nCHAR(N,... [USING charset_name])\n\nCHAR() interprets each argument N as an integer and returns a string\nconsisting of the characters given by the code values of those\nintegers. NULL values are skipped.\n\nBy default, CHAR() returns a binary string. To produce a string in a\ngiven character set, use the optional USING clause:\n\nmysql> SELECT CHARSET(CHAR(X\'65\')), CHARSET(CHAR(X\'65\' USING utf8));\n+----------------------+---------------------------------+\n| CHARSET(CHAR(X\'65\')) | CHARSET(CHAR(X\'65\' USING utf8)) |\n+----------------------+---------------------------------+\n| binary               | utf8                            |\n+----------------------+---------------------------------+\n\nIf USING is given and the result string is illegal for the given\ncharacter set, a warning is issued. Also, if strict SQL mode is\nenabled, the result from CHAR() becomes NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT CHAR(77,121,83,81,\'76\');\n        -> \'MySQL\'\nmysql> SELECT CHAR(77,77.3,\'77.3\');\n        -> \'MMM\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(81,'CHAR_LENGTH',13,'Syntax:\nCHAR_LENGTH(str)\n\nReturns the length of the string str, measured in characters. A\nmultibyte character counts as a single character. This means that for a\nstring containing five 2-byte characters, LENGTH() returns 10, whereas\nCHAR_LENGTH() returns 5.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(82,'CHARACTER_LENGTH',13,'Syntax:\nCHARACTER_LENGTH(str)\n\nCHARACTER_LENGTH() is a synonym for CHAR_LENGTH().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(83,'CONCAT',13,'Syntax:\nCONCAT(str1,str2,...)\n\nReturns the string that results from concatenating the arguments. May\nhave one or more arguments. If all arguments are nonbinary strings, the\nresult is a nonbinary string. If the arguments include any binary\nstrings, the result is a binary string. A numeric argument is converted\nto its equivalent nonbinary string form.\n\nCONCAT() returns NULL if any argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT CONCAT(\'My\', \'S\', \'QL\');\n        -> \'MySQL\'\nmysql> SELECT CONCAT(\'My\', NULL, \'QL\');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> \'14.3\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(84,'CONCAT_WS',13,'Syntax:\nCONCAT_WS(separator,str1,str2,...)\n\nCONCAT_WS() stands for Concatenate With Separator and is a special form\nof CONCAT(). The first argument is the separator for the rest of the\narguments. The separator is added between the strings to be\nconcatenated. The separator can be a string, as can the rest of the\narguments. If the separator is NULL, the result is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT CONCAT_WS(\',\',\'First name\',\'Second name\',\'Last Name\');\n        -> \'First name,Second name,Last Name\'\nmysql> SELECT CONCAT_WS(\',\',\'First name\',NULL,\'Last Name\');\n        -> \'First name,Last Name\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(85,'ELT',13,'Syntax:\nELT(N,str1,str2,str3,...)\n\nELT() returns the Nth element of the list of strings: str1 if N = 1,\nstr2 if N = 2, and so on. Returns NULL if N is less than 1 or greater\nthan the number of arguments. ELT() is the complement of FIELD().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT ELT(1, \'Aa\', \'Bb\', \'Cc\', \'Dd\');\n        -> \'Aa\'\nmysql> SELECT ELT(4, \'Aa\', \'Bb\', \'Cc\', \'Dd\');\n        -> \'Dd\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(86,'EXPORT_SET',13,'Syntax:\nEXPORT_SET(bits,on,off[,separator[,number_of_bits]])\n\nReturns a string such that for every bit set in the value bits, you get\nan on string and for every bit not set in the value, you get an off\nstring. Bits in bits are examined from right to left (from low-order to\nhigh-order bits). Strings are added to the result from left to right,\nseparated by the separator string (the default being the comma\ncharacter ,). The number of bits examined is given by number_of_bits,\nwhich has a default of 64 if not specified. number_of_bits is silently\nclipped to 64 if larger than 64. It is treated as an unsigned integer,\nso a value of −1 is effectively the same as 64.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT EXPORT_SET(5,\'Y\',\'N\',\',\',4);\n        -> \'Y,N,Y,N\'\nmysql> SELECT EXPORT_SET(6,\'1\',\'0\',\',\',10);\n        -> \'0,1,1,0,0,0,0,0,0,0\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(87,'FIELD',13,'Syntax:\nFIELD(str,str1,str2,str3,...)\n\nReturns the index (position) of str in the str1, str2, str3, ... list.\nReturns 0 if str is not found.\n\nIf all arguments to FIELD() are strings, all arguments are compared as\nstrings. If all arguments are numbers, they are compared as numbers.\nOtherwise, the arguments are compared as double.\n\nIf str is NULL, the return value is 0 because NULL fails equality\ncomparison with any value. FIELD() is the complement of ELT().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT FIELD(\'Bb\', \'Aa\', \'Bb\', \'Cc\', \'Dd\', \'Ff\');\n        -> 2\nmysql> SELECT FIELD(\'Gg\', \'Aa\', \'Bb\', \'Cc\', \'Dd\', \'Ff\');\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(88,'FIND_IN_SET',13,'Syntax:\nFIND_IN_SET(str,strlist)\n\nReturns a value in the range of 1 to N if the string str is in the\nstring list strlist consisting of N substrings. A string list is a\nstring composed of substrings separated by , characters. If the first\nargument is a constant string and the second is a column of type SET,\nthe FIND_IN_SET() function is optimized to use bit arithmetic. Returns\n0 if str is not in strlist or if strlist is the empty string. Returns\nNULL if either argument is NULL. This function does not work properly\nif the first argument contains a comma (,) character.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT FIND_IN_SET(\'b\',\'a,b,c,d\');\n        -> 2\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(89,'FORMAT',13,'Syntax:\nFORMAT(X,D[,locale])\n\nFormats the number X to a format like \'#,###,###.##\', rounded to D\ndecimal places, and returns the result as a string. If D is 0, the\nresult has no decimal point or fractional part.\n\nThe optional third parameter enables a locale to be specified to be\nused for the result number\'s decimal point, thousands separator, and\ngrouping between separators. Permissible locale values are the same as\nthe legal values for the lc_time_names system variable (see\nhttps://dev.mysql.com/doc/refman/5.7/en/locale-support.html). If no\nlocale is specified, the default is \'en_US\'.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT FORMAT(12332.123456, 4);\n        -> \'12,332.1235\'\nmysql> SELECT FORMAT(12332.1,4);\n        -> \'12,332.1000\'\nmysql> SELECT FORMAT(12332.2,0);\n        -> \'12,332\'\nmysql> SELECT FORMAT(12332.2,2,\'de_DE\');\n        -> \'12.332,20\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(90,'FROM_BASE64',13,'Syntax:\nFROM_BASE64(str)\n\nTakes a string encoded with the base-64 encoded rules used by\nTO_BASE64() and returns the decoded result as a binary string. The\nresult is NULL if the argument is NULL or not a valid base-64 string.\nSee the description of TO_BASE64() for details about the encoding and\ndecoding rules.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT TO_BASE64(\'abc\'), FROM_BASE64(TO_BASE64(\'abc\'));\n        -> \'JWJj\', \'abc\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(91,'HEX',13,'Syntax:\nHEX(str), HEX(N)\n\nFor a string argument str, HEX() returns a hexadecimal string\nrepresentation of str where each byte of each character in str is\nconverted to two hexadecimal digits. (Multibyte characters therefore\nbecome more than two digits.) The inverse of this operation is\nperformed by the UNHEX() function.\n\nFor a numeric argument N, HEX() returns a hexadecimal string\nrepresentation of the value of N treated as a longlong (BIGINT) number.\nThis is equivalent to CONV(N,10,16). The inverse of this operation is\nperformed by CONV(HEX(N),16,10).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT X\'616263\', HEX(\'abc\'), UNHEX(HEX(\'abc\'));\n        -> \'abc\', 616263, \'abc\'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n        -> \'FF\', 255\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(92,'INSERT FUNCTION',13,'Syntax:\nINSERT(str,pos,len,newstr)\n\nReturns the string str, with the substring beginning at position pos\nand len characters long replaced by the string newstr. Returns the\noriginal string if pos is not within the length of the string. Replaces\nthe rest of the string from position pos if len is not within the\nlength of the rest of the string. Returns NULL if any argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT INSERT(\'Quadratic\', 3, 4, \'What\');\n        -> \'QuWhattic\'\nmysql> SELECT INSERT(\'Quadratic\', -1, 4, \'What\');\n        -> \'Quadratic\'\nmysql> SELECT INSERT(\'Quadratic\', 3, 100, \'What\');\n        -> \'QuWhat\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(93,'INSTR',13,'Syntax:\nINSTR(str,substr)\n\nReturns the position of the first occurrence of substring substr in\nstring str. This is the same as the two-argument form of LOCATE(),\nexcept that the order of the arguments is reversed.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT INSTR(\'foobarbar\', \'bar\');\n        -> 4\nmysql> SELECT INSTR(\'xbar\', \'foobar\');\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(94,'LCASE',13,'Syntax:\nLCASE(str)\n\nLCASE() is a synonym for LOWER().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(95,'LEFT',13,'Syntax:\nLEFT(str,len)\n\nReturns the leftmost len characters from the string str, or NULL if any\nargument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT LEFT(\'foobarbar\', 5);\n        -> \'fooba\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(96,'LENGTH',13,'Syntax:\nLENGTH(str)\n\nReturns the length of the string str, measured in bytes. A multibyte\ncharacter counts as multiple bytes. This means that for a string\ncontaining five 2-byte characters, LENGTH() returns 10, whereas\nCHAR_LENGTH() returns 5.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT LENGTH(\'text\');\n        -> 4\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(97,'LOAD_FILE',13,'Syntax:\nLOAD_FILE(file_name)\n\nReads the file and returns the file contents as a string. To use this\nfunction, the file must be located on the server host, you must specify\nthe full path name to the file, and you must have the FILE privilege.\nThe file must be readable by all and its size less than\nmax_allowed_packet bytes. If the secure_file_priv system variable is\nset to a nonempty directory name, the file to be loaded must be located\nin that directory.\n\nIf the file does not exist or cannot be read because one of the\npreceding conditions is not satisfied, the function returns NULL.\n\nThe character_set_filesystem system variable controls interpretation of\nfile names that are given as literal strings.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> UPDATE t\n            SET blob_col=LOAD_FILE(\'/tmp/picture\')\n            WHERE id=1;\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(98,'LOCATE',13,'Syntax:\nLOCATE(substr,str), LOCATE(substr,str,pos)\n\nThe first syntax returns the position of the first occurrence of\nsubstring substr in string str. The second syntax returns the position\nof the first occurrence of substring substr in string str, starting at\nposition pos. Returns 0 if substr is not in str. Returns NULL if substr\nor str is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT LOCATE(\'bar\', \'foobarbar\');\n        -> 4\nmysql> SELECT LOCATE(\'xbar\', \'foobar\');\n        -> 0\nmysql> SELECT LOCATE(\'bar\', \'foobarbar\', 5);\n        -> 7\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(99,'LOWER',13,'Syntax:\nLOWER(str)\n\nReturns the string str with all characters changed to lowercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).\n\nmysql> SELECT LOWER(\'QUADRATICALLY\');\n        -> \'quadratically\'\n\nLOWER() (and UPPER()) are ineffective when applied to binary strings\n(BINARY, VARBINARY, BLOB). To perform lettercase conversion of a binary\nstring, first convert it to a nonbinary string using a character set\nappropriate for the data stored in the string:\n\nmysql> SET @str = BINARY \'New York\';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING latin1));\n+-------------+-----------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING latin1)) |\n+-------------+-----------------------------------+\n| New York    | new york                          |\n+-------------+-----------------------------------+\n\nFor collations of Unicode character sets, LOWER() and UPPER() work\naccording to the Unicode Collation Algorithm (UCA) version in the\ncollation name, if there is one, and UCA 4.0.0 if no version is\nspecified. For example, utf8_unicode_520_ci works according to UCA\n5.2.0, whereas utf8_unicode_ci works according to UCA 4.0.0. See\nhttps://dev.mysql.com/doc/refman/5.7/en/charset-unicode-sets.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(100,'LPAD',13,'Syntax:\nLPAD(str,len,padstr)\n\nReturns the string str, left-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT LPAD(\'hi\',4,\'??\');\n        -> \'??hi\'\nmysql> SELECT LPAD(\'hi\',1,\'??\');\n        -> \'h\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(101,'LTRIM',13,'Syntax:\nLTRIM(str)\n\nReturns the string str with leading space characters removed.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT LTRIM(\'  barbar\');\n        -> \'barbar\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(102,'MAKE_SET',13,'Syntax:\nMAKE_SET(bits,str1,str2,...)\n\nReturns a set value (a string containing substrings separated by ,\ncharacters) consisting of the strings that have the corresponding bit\nin bits set. str1 corresponds to bit 0, str2 to bit 1, and so on. NULL\nvalues in str1, str2, ... are not appended to the result.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT MAKE_SET(1,\'a\',\'b\',\'c\');\n        -> \'a\'\nmysql> SELECT MAKE_SET(1 | 4,\'hello\',\'nice\',\'world\');\n        -> \'hello,world\'\nmysql> SELECT MAKE_SET(1 | 4,\'hello\',\'nice\',NULL,\'world\');\n        -> \'hello\'\nmysql> SELECT MAKE_SET(0,\'a\',\'b\',\'c\');\n        -> \'\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(103,'MID',13,'Syntax:\nMID(str,pos,len)\n\nMID(str,pos,len) is a synonym for SUBSTRING(str,pos,len).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(104,'OCT',13,'Syntax:\nOCT(N)\n\nReturns a string representation of the octal value of N, where N is a\nlonglong (BIGINT) number. This is equivalent to CONV(N,10,8). Returns\nNULL if N is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT OCT(12);\n        -> \'14\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(105,'OCTET_LENGTH',13,'Syntax:\nOCTET_LENGTH(str)\n\nOCTET_LENGTH() is a synonym for LENGTH().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(106,'ORD',13,'Syntax:\nORD(str)\n\nIf the leftmost character of the string str is a multibyte character,\nreturns the code for that character, calculated from the numeric values\nof its constituent bytes using this formula:\n\n  (1st byte code)\n+ (2nd byte code * 256)\n+ (3rd byte code * 256^2) ...\n\nIf the leftmost character is not a multibyte character, ORD() returns\nthe same value as the ASCII() function.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT ORD(\'2\');\n        -> 50\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(107,'POSITION',13,'Syntax:\nPOSITION(substr IN str)\n\nPOSITION(substr IN str) is a synonym for LOCATE(substr,str).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(108,'QUOTE',13,'Syntax:\nQUOTE(str)\n\nQuotes a string to produce a result that can be used as a properly\nescaped data value in an SQL statement. The string is returned enclosed\nby single quotation marks and with each instance of backslash (\\),\nsingle quote (\'), ASCII NUL, and Control+Z preceded by a backslash. If\nthe argument is NULL, the return value is the word \"NULL\" without\nenclosing single quotation marks.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT QUOTE(\'Don\\\'t!\');\n        -> \'Don\\\'t!\'\nmysql> SELECT QUOTE(NULL);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(109,'REPEAT FUNCTION',13,'Syntax:\nREPEAT(str,count)\n\nReturns a string consisting of the string str repeated count times. If\ncount is less than 1, returns an empty string. Returns NULL if str or\ncount are NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT REPEAT(\'MySQL\', 3);\n        -> \'MySQLMySQLMySQL\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(110,'REPLACE FUNCTION',13,'Syntax:\nREPLACE(str,from_str,to_str)\n\nReturns the string str with all occurrences of the string from_str\nreplaced by the string to_str. REPLACE() performs a case-sensitive\nmatch when searching for from_str.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT REPLACE(\'www.mysql.com\', \'w\', \'Ww\');\n        -> \'WwWwWw.mysql.com\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(111,'REVERSE',13,'Syntax:\nREVERSE(str)\n\nReturns the string str with the order of the characters reversed.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT REVERSE(\'abc\');\n        -> \'cba\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(112,'RIGHT',13,'Syntax:\nRIGHT(str,len)\n\nReturns the rightmost len characters from the string str, or NULL if\nany argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT RIGHT(\'foobarbar\', 4);\n        -> \'rbar\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(113,'RPAD',13,'Syntax:\nRPAD(str,len,padstr)\n\nReturns the string str, right-padded with the string padstr to a length\nof len characters. If str is longer than len, the return value is\nshortened to len characters.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT RPAD(\'hi\',5,\'?\');\n        -> \'hi???\'\nmysql> SELECT RPAD(\'hi\',1,\'?\');\n        -> \'h\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(114,'RTRIM',13,'Syntax:\nRTRIM(str)\n\nReturns the string str with trailing space characters removed.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT RTRIM(\'barbar   \');\n        -> \'barbar\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(115,'SOUNDEX',13,'Syntax:\nSOUNDEX(str)\n\nReturns a soundex string from str. Two strings that sound almost the\nsame should have identical soundex strings. A standard soundex string\nis four characters long, but the SOUNDEX() function returns an\narbitrarily long string. You can use SUBSTRING() on the result to get a\nstandard soundex string. All nonalphabetic characters in str are\nignored. All international alphabetic characters outside the A-Z range\nare treated as vowels.\n\n*Important*:\n\nWhen using SOUNDEX(), you should be aware of the following limitations:\n\no This function, as currently implemented, is intended to work well\n  with strings that are in the English language only. Strings in other\n  languages may not produce reliable results.\n\no This function is not guaranteed to provide consistent results with\n  strings that use multibyte character sets, including utf-8. See Bug\n  #22638 for more information.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT SOUNDEX(\'Hello\');\n        -> \'H400\'\nmysql> SELECT SOUNDEX(\'Quadratically\');\n        -> \'Q36324\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(116,'SOUNDS LIKE',13,'Syntax:\nexpr1 SOUNDS LIKE expr2\n\nThis is the same as SOUNDEX(expr1) = SOUNDEX(expr2).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(117,'SPACE',13,'Syntax:\nSPACE(N)\n\nReturns a string consisting of N space characters.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT SPACE(6);\n        -> \'      \'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(118,'SUBSTR',13,'Syntax:\nSUBSTR(str,pos), SUBSTR(str FROM pos), SUBSTR(str,pos,len), SUBSTR(str\nFROM pos FOR len)\n\nSUBSTR() is a synonym for SUBSTRING().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(119,'SUBSTRING',13,'Syntax:\nSUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len),\nSUBSTRING(str FROM pos FOR len)\n\nThe forms without a len argument return a substring from string str\nstarting at position pos. The forms with a len argument return a\nsubstring len characters long from string str, starting at position\npos. The forms that use FROM are standard SQL syntax. It is also\npossible to use a negative value for pos. In this case, the beginning\nof the substring is pos characters from the end of the string, rather\nthan the beginning. A negative value may be used for pos in any of the\nforms of this function. A value of 0 for pos returns an empty string.\n\nFor all forms of SUBSTRING(), the position of the first character in\nthe string from which the substring is to be extracted is reckoned as\n1.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT SUBSTRING(\'Quadratically\',5);\n        -> \'ratically\'\nmysql> SELECT SUBSTRING(\'foobarbar\' FROM 4);\n        -> \'barbar\'\nmysql> SELECT SUBSTRING(\'Quadratically\',5,6);\n        -> \'ratica\'\nmysql> SELECT SUBSTRING(\'Sakila\', -3);\n        -> \'ila\'\nmysql> SELECT SUBSTRING(\'Sakila\', -5, 3);\n        -> \'aki\'\nmysql> SELECT SUBSTRING(\'Sakila\' FROM -4 FOR 2);\n        -> \'ki\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(120,'SUBSTRING_INDEX',13,'Syntax:\nSUBSTRING_INDEX(str,delim,count)\n\nReturns the substring from string str before count occurrences of the\ndelimiter delim. If count is positive, everything to the left of the\nfinal delimiter (counting from the left) is returned. If count is\nnegative, everything to the right of the final delimiter (counting from\nthe right) is returned. SUBSTRING_INDEX() performs a case-sensitive\nmatch when searching for delim.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT SUBSTRING_INDEX(\'www.mysql.com\', \'.\', 2);\n        -> \'www.mysql\'\nmysql> SELECT SUBSTRING_INDEX(\'www.mysql.com\', \'.\', -2);\n        -> \'mysql.com\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(121,'TO_BASE64',13,'Syntax:\nTO_BASE64(str)\n\nConverts the string argument to base-64 encoded form and returns the\nresult as a character string with the connection character set and\ncollation. If the argument is not a string, it is converted to a string\nbefore conversion takes place. The result is NULL if the argument is\nNULL. Base-64 encoded strings can be decoded using the FROM_BASE64()\nfunction.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT TO_BASE64(\'abc\'), FROM_BASE64(TO_BASE64(\'abc\'));\n        -> \'JWJj\', \'abc\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(122,'TRIM',13,'Syntax:\nTRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr\nFROM] str)\n\nReturns the string str with all remstr prefixes or suffixes removed. If\nnone of the specifiers BOTH, LEADING, or TRAILING is given, BOTH is\nassumed. remstr is optional and, if not specified, spaces are removed.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT TRIM(\'  bar   \');\n        -> \'bar\'\nmysql> SELECT TRIM(LEADING \'x\' FROM \'xxxbarxxx\');\n        -> \'barxxx\'\nmysql> SELECT TRIM(BOTH \'x\' FROM \'xxxbarxxx\');\n        -> \'bar\'\nmysql> SELECT TRIM(TRAILING \'xyz\' FROM \'barxxyz\');\n        -> \'barx\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(123,'UCASE',13,'Syntax:\nUCASE(str)\n\nUCASE() is a synonym for UPPER().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(124,'UNHEX',13,'Syntax:\nUNHEX(str)\n\nFor a string argument str, UNHEX(str) interprets each pair of\ncharacters in the argument as a hexadecimal number and converts it to\nthe byte represented by the number. The return value is a binary\nstring.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','mysql> SELECT UNHEX(\'4D7953514C\');\n        -> \'MySQL\'\nmysql> SELECT X\'4D7953514C\';\n        -> \'MySQL\'\nmysql> SELECT UNHEX(HEX(\'string\'));\n        -> \'string\'\nmysql> SELECT HEX(UNHEX(\'1267\'));\n        -> \'1267\'\n','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(125,'UPPER',13,'Syntax:\nUPPER(str)\n\nReturns the string str with all characters changed to uppercase\naccording to the current character set mapping. The default is latin1\n(cp1252 West European).\n\nmysql> SELECT UPPER(\'Hej\');\n        -> \'HEJ\'\n\nSee the description of LOWER() for information that also applies to\nUPPER(). This included information about how to perform lettercase\nconversion of binary strings (BINARY, VARBINARY, BLOB) for which these\nfunctions are ineffective, and information about case folding for\nUnicode character sets.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(126,'WEIGHT_STRING',13,'Syntax:\nWEIGHT_STRING(str [AS {CHAR|BINARY}(N)] [LEVEL levels] [flags])\n\nlevels: N [ASC|DESC|REVERSE] [, N [ASC|DESC|REVERSE]] ...\n\nThis function returns the weight string for the input string. The\nreturn value is a binary string that represents the comparison and\nsorting value of the string. It has these properties:\n\no If WEIGHT_STRING(str1) = WEIGHT_STRING(str2), then str1 = str2 (str1\n  and str2 are considered equal)\n\no If WEIGHT_STRING(str1) < WEIGHT_STRING(str2), then str1 < str2 (str1\n  sorts before str2)\n\nWEIGHT_STRING() is a debugging function intended for internal use. Its\nbehavior can change without notice between MySQL versions. It can be\nused for testing and debugging of collations, especially if you are\nadding a new collation. See\nhttps://dev.mysql.com/doc/refman/5.7/en/adding-collation.html.\n\nThis list briefly summarizes the arguments. More details are given in\nthe discussion following the list.\n\no str: The input string expression.\n\no AS clause: Optional; cast the input string to a given type and\n  length.\n\no LEVEL clause: Optional; specify weight levels for the return value.\n\no flags: Optional; unused.\n\nThe input string, str, is a string expression. If the input is a\nnonbinary (character) string such as a CHAR, VARCHAR, or TEXT value,\nthe return value contains the collation weights for the string. If the\ninput is a binary (byte) string such as a BINARY, VARBINARY, or BLOB\nvalue, the return value is the same as the input (the weight for each\nbyte in a binary string is the byte value). If the input is NULL,\nWEIGHT_STRING() returns NULL.\n\nExamples:\n\nmysql> SET @s = _latin1 \'AB\' COLLATE latin1_swedish_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+\n\nmysql> SET @s = _latin1 \'ab\' COLLATE latin1_swedish_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 4142                   |\n+------+---------+------------------------+\n\nmysql> SET @s = CAST(\'AB\' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB   | 4142    | 4142                   |\n+------+---------+------------------------+\n\nmysql> SET @s = CAST(\'ab\' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s   | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab   | 6162    | 6162                   |\n+------+---------+------------------------+\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-functions.html'),(127,'LIKE',13,'Syntax:\nexpr LIKE pat [ESCAPE \'escape_char\']\n\nPattern matching using an SQL pattern. Returns 1 (TRUE) or 0 (FALSE).\nIf either expr or pat is NULL, the result is NULL.\n\nThe pattern need not be a literal string. For example, it can be\nspecified as a string expression or table column.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html\n\n','mysql> SELECT \'David!\' LIKE \'David_\';\n        -> 1\nmysql> SELECT \'David!\' LIKE \'%D%v%\';\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html'),(128,'NOT LIKE',13,'Syntax:\nexpr NOT LIKE pat [ESCAPE \'escape_char\']\n\nThis is the same as NOT (expr LIKE pat [ESCAPE \'escape_char\']).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html'),(129,'STRCMP',13,'Syntax:\nSTRCMP(expr1,expr2)\n\nSTRCMP() returns 0 if the strings are the same, -1 if the first\nargument is smaller than the second according to the current sort\norder, and 1 otherwise.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html\n\n','mysql> SELECT STRCMP(\'text\', \'text2\');\n        -> -1\nmysql> SELECT STRCMP(\'text2\', \'text\');\n        -> 1\nmysql> SELECT STRCMP(\'text\', \'text\');\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html'),(130,'NOT REGEXP',13,'Syntax:\nexpr NOT REGEXP pat, expr NOT RLIKE pat\n\nThis is the same as NOT (expr REGEXP pat).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/regexp.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/regexp.html'),(131,'REGEXP',13,'Syntax:\nexpr REGEXP pat, expr RLIKE pat\n\nReturns 1 if the string expr matches the regular expression specified\nby the pattern pat, 0 otherwise. If either expr or pat is NULL, the\nreturn value is NULL.\n\nRLIKE is a synonym for REGEXP.\n\nThe pattern can be an extended regular expression, the syntax for which\nis discussed in\nhttps://dev.mysql.com/doc/refman/5.7/en/regexp.html#regexp-syntax. The\npattern need not be a literal string. For example, it can be specified\nas a string expression or table column.\n\n*Note*:\n\nBecause MySQL uses the C escape syntax in strings (for example, \\n to\nrepresent the newline character), you must double any \\ that you use in\nyour REGEXP arguments.\n\nRegular expression operations use the character set and collation of\nthe string expression and pattern arguments when deciding the type of a\ncharacter and performing the comparison. If the arguments have\ndifferent character sets or collations, coercibility rules apply as\ndescribed in\nhttps://dev.mysql.com/doc/refman/5.7/en/charset-collation-coercibility.\nhtml. If either argument is a binary string, the arguments are handled\nin case-sensitive fashion as binary strings.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/regexp.html\n\n','mysql> SELECT \'Michael!\' REGEXP \'.*\';\n+------------------------+\n| \'Michael!\' REGEXP \'.*\' |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT \'new*\\n*line\' REGEXP \'new\\\\*.\\\\*line\';\n+---------------------------------------+\n| \'new*\\n*line\' REGEXP \'new\\\\*.\\\\*line\' |\n+---------------------------------------+\n|                                     0 |\n+---------------------------------------+\nmysql> SELECT \'a\' REGEXP \'^[a-d]\';\n+---------------------+\n| \'a\' REGEXP \'^[a-d]\' |\n+---------------------+\n|                   1 |\n+---------------------+\nmysql> SELECT \'a\' REGEXP \'A\', \'a\' REGEXP BINARY \'A\';\n+----------------+-----------------------+\n| \'a\' REGEXP \'A\' | \'a\' REGEXP BINARY \'A\' |\n+----------------+-----------------------+\n|              1 |                     0 |\n+----------------+-----------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/regexp.html'),(132,'+',14,'Syntax:\n+\n\nAddition:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html\n\n','mysql> SELECT 3+5;\n        -> 8\n','https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html'),(133,'- BINARY',14,'Syntax:\n-\n\nSubtraction:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html\n\n','mysql> SELECT 3-5;\n        -> -2\n','https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html'),(134,'- UNARY',14,'Syntax:\n-\n\nUnary minus. This operator changes the sign of the operand.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html\n\n','mysql> SELECT - 2;\n        -> -2\n','https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html'),(135,'*',14,'Syntax:\n*\n\nMultiplication:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html\n\n','mysql> SELECT 3*5;\n        -> 15\nmysql> SELECT 18014398509481984*18014398509481984.0;\n        -> 324518553658426726783156020576256.0\nmysql> SELECT 18014398509481984*18014398509481984;\n        -> out-of-range error\n','https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html'),(136,'/',14,'Syntax:\n/\n\nDivision:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html\n\n','mysql> SELECT 3/5;\n        -> 0.60\n','https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html'),(137,'DIV',14,'Syntax:\nDIV\n\nInteger division. Discards from the division result any fractional part\nto the right of the decimal point.\n\nIf either operand has a noninteger type, the operands are converted to\nDECIMAL and divided using DECIMAL arithmetic before converting the\nresult to BIGINT. If the result exceeds BIGINT range, an error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html\n\n','mysql> SELECT 5 DIV 2, -5 DIV 2, 5 DIV -2, -5 DIV -2;\n        -> 2, -2, -2, 2\n','https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html'),(138,'%',14,'Syntax:\nN % M, N MOD M\n\nModulo operation. Returns the remainder of N divided by M. For more\ninformation, see the description for the MOD() function in\nhttps://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/arithmetic-functions.html'),(139,'ABS',14,'Syntax:\nABS(X)\n\nReturns the absolute value of X.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(140,'ACOS',14,'Syntax:\nACOS(X)\n\nReturns the arc cosine of X, that is, the value whose cosine is X.\nReturns NULL if X is not in the range -1 to 1.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT ACOS(1);\n        -> 0\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.5707963267949\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(141,'ASIN',14,'Syntax:\nASIN(X)\n\nReturns the arc sine of X, that is, the value whose sine is X. Returns\nNULL if X is not in the range -1 to 1.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT ASIN(0.2);\n        -> 0.20135792079033\nmysql> SELECT ASIN(\'foo\');\n\n+-------------+\n| ASIN(\'foo\') |\n+-------------+\n|           0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level   | Code | Message                                 |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: \'foo\' |\n+---------+------+-----------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(142,'ATAN',14,'Syntax:\nATAN(X)\n\nReturns the arc tangent of X, that is, the value whose tangent is X.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT ATAN(2);\n        -> 1.1071487177941\nmysql> SELECT ATAN(-2);\n        -> -1.1071487177941\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(143,'ATAN2',14,'Syntax:\nATAN(Y,X), ATAN2(Y,X)\n\nReturns the arc tangent of the two variables X and Y. It is similar to\ncalculating the arc tangent of Y / X, except that the signs of both\narguments are used to determine the quadrant of the result.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT ATAN(-2,2);\n        -> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.5707963267949\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(144,'CEIL',14,'Syntax:\nCEIL(X)\n\nCEIL() is a synonym for CEILING().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(145,'CEILING',14,'Syntax:\nCEILING(X)\n\nReturns the smallest integer value not less than X.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEILING(-1.23);\n        -> -1\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(146,'CONV',14,'Syntax:\nCONV(N,from_base,to_base)\n\nConverts numbers between different number bases. Returns a string\nrepresentation of the number N, converted from base from_base to base\nto_base. Returns NULL if any argument is NULL. The argument N is\ninterpreted as an integer, but may be specified as an integer or a\nstring. The minimum base is 2 and the maximum base is 36. If from_base\nis a negative number, N is regarded as a signed number. Otherwise, N is\ntreated as unsigned. CONV() works with 64-bit precision.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT CONV(\'a\',16,2);\n        -> \'1010\'\nmysql> SELECT CONV(\'6E\',18,8);\n        -> \'172\'\nmysql> SELECT CONV(-17,10,-18);\n        -> \'-H\'\nmysql> SELECT CONV(10+\'10\'+\'10\'+X\'0a\',10,10);\n        -> \'40\'\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(147,'COS',14,'Syntax:\nCOS(X)\n\nReturns the cosine of X, where X is given in radians.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT COS(PI());\n        -> -1\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(148,'COT',14,'Syntax:\nCOT(X)\n\nReturns the cotangent of X.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT COT(12);\n        -> -1.5726734063977\nmysql> SELECT COT(0);\n        -> out-of-range error\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(149,'CRC32',14,'Syntax:\nCRC32(expr)\n\nComputes a cyclic redundancy check value and returns a 32-bit unsigned\nvalue. The result is NULL if the argument is NULL. The argument is\nexpected to be a string and (if possible) is treated as one if it is\nnot.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT CRC32(\'MySQL\');\n        -> 3259397556\nmysql> SELECT CRC32(\'mysql\');\n        -> 2501908538\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(150,'DEGREES',14,'Syntax:\nDEGREES(X)\n\nReturns the argument X, converted from radians to degrees.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT DEGREES(PI());\n        -> 180\nmysql> SELECT DEGREES(PI() / 2);\n        -> 90\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(151,'EXP',14,'Syntax:\nEXP(X)\n\nReturns the value of e (the base of natural logarithms) raised to the\npower of X. The inverse of this function is LOG() (using a single\nargument only) or LN().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT EXP(2);\n        -> 7.3890560989307\nmysql> SELECT EXP(-2);\n        -> 0.13533528323661\nmysql> SELECT EXP(0);\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(152,'FLOOR',14,'Syntax:\nFLOOR(X)\n\nReturns the largest integer value not greater than X.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n        -> 1, -2\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(153,'LN',14,'Syntax:\nLN(X)\n\nReturns the natural logarithm of X; that is, the base-e logarithm of X.\nIf X is less than or equal to 0.0E0, the function returns NULL and a\nwarning \"Invalid argument for logarithm\" is reported.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT LN(2);\n        -> 0.69314718055995\nmysql> SELECT LN(-2);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(154,'LOG',14,'Syntax:\nLOG(X), LOG(B,X)\n\nIf called with one parameter, this function returns the natural\nlogarithm of X. If X is less than or equal to 0.0E0, the function\nreturns NULL and a warning \"Invalid argument for logarithm\" is\nreported.\n\nThe inverse of this function (when called with a single argument) is\nthe EXP() function.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT LOG(2);\n        -> 0.69314718055995\nmysql> SELECT LOG(-2);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(155,'LOG2',14,'Syntax:\nLOG2(X)\n\nReturns the base-2 logarithm of X. If X is less than or equal to 0.0E0,\nthe function returns NULL and a warning \"Invalid argument for\nlogarithm\" is reported.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT LOG2(65536);\n        -> 16\nmysql> SELECT LOG2(-100);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(156,'LOG10',14,'Syntax:\nLOG10(X)\n\nReturns the base-10 logarithm of X. If X is less than or equal to\n0.0E0, the function returns NULL and a warning \"Invalid argument for\nlogarithm\" is reported.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT LOG10(2);\n        -> 0.30102999566398\nmysql> SELECT LOG10(100);\n        -> 2\nmysql> SELECT LOG10(-100);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(157,'MOD',14,'Syntax:\nMOD(N,M), N % M, N MOD M\n\nModulo operation. Returns the remainder of N divided by M.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(158,'PI',14,'Syntax:\nPI()\n\nReturns the value of π (pi). The default number of decimal places\ndisplayed is seven, but MySQL uses the full double-precision value\ninternally.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793116\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(159,'POW',14,'Syntax:\nPOW(X,Y)\n\nReturns the value of X raised to the power of Y.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT POW(2,2);\n        -> 4\nmysql> SELECT POW(2,-2);\n        -> 0.25\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(160,'POWER',14,'Syntax:\nPOWER(X,Y)\n\nThis is a synonym for POW().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(161,'RADIANS',14,'Syntax:\nRADIANS(X)\n\nReturns the argument X, converted from degrees to radians. (Note that\nπ radians equals 180 degrees.)\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT RADIANS(90);\n        -> 1.5707963267949\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(162,'RAND',14,'Syntax:\nRAND([N])\n\nReturns a random floating-point value v in the range 0 <= v < 1.0. To\nobtain a random integer R in the range i <= R < j, use the expression\nFLOOR(i + RAND() * (j − i)). For example, to obtain a random integer\nin the range the range 7 <= R < 12, use the following statement:\n\nSELECT FLOOR(7 + (RAND() * 5));\n\nIf an integer argument N is specified, it is used as the seed value:\n\no With a constant initializer argument, the seed is initialized once\n  when the statement is prepared, prior to execution.\n\no With a nonconstant initializer argument (such as a column name), the\n  seed is initialized with the value for each invocation of RAND().\n\nOne implication of this behavior is that for equal argument values,\nRAND(N) returns the same value each time, and thus produces a\nrepeatable sequence of column values. In the following example, the\nsequence of values produced by RAND(3) is the same both places it\noccurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\n\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.61914388706828 |\n|    2 | 0.93845168309142 |\n|    3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i    | RAND()           |\n+------+------------------+\n|    1 | 0.35877890638893 |\n|    2 | 0.28941420772058 |\n|    3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i    | RAND(3)          |\n+------+------------------+\n|    1 | 0.90576975597606 |\n|    2 | 0.37307905813035 |\n|    3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(163,'ROUND',14,'Syntax:\nROUND(X), ROUND(X,D)\n\nRounds the argument X to D decimal places. The rounding algorithm\ndepends on the data type of X. D defaults to 0 if not specified. D can\nbe negative to cause D digits left of the decimal point of the value X\nto become zero.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(164,'SIGN',14,'Syntax:\nSIGN(X)\n\nReturns the sign of the argument as -1, 0, or 1, depending on whether X\nis negative, zero, or positive.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(165,'SIN',14,'Syntax:\nSIN(X)\n\nReturns the sine of X, where X is given in radians.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT SIN(PI());\n        -> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(166,'SQRT',14,'Syntax:\nSQRT(X)\n\nReturns the square root of a nonnegative number X.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT SQRT(4);\n        -> 2\nmysql> SELECT SQRT(20);\n        -> 4.4721359549996\nmysql> SELECT SQRT(-16);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(167,'TAN',14,'Syntax:\nTAN(X)\n\nReturns the tangent of X, where X is given in radians.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT TAN(PI());\n        -> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n        -> 1.5574077246549\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(168,'TRUNCATE',14,'Syntax:\nTRUNCATE(X,D)\n\nReturns the number X, truncated to D decimal places. If D is 0, the\nresult has no decimal point or fractional part. D can be negative to\ncause D digits left of the decimal point of the value X to become zero.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html\n\n','mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n       -> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n       -> 1028\n','https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html'),(169,'ADDDATE',15,'Syntax:\nADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days)\n\nWhen invoked with the INTERVAL form of the second argument, ADDDATE()\nis a synonym for DATE_ADD(). The related function SUBDATE() is a\nsynonym for DATE_SUB(). For information on the INTERVAL unit argument,\nsee\nhttps://dev.mysql.com/doc/refman/5.7/en/expressions.html#temporal-inter\nvals.\n\nmysql> SELECT DATE_ADD(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2008-02-02\'\nmysql> SELECT ADDDATE(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2008-02-02\'\n\nWhen invoked with the days form of the second argument, MySQL treats it\nas an integer number of days to be added to expr.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT ADDDATE(\'2008-01-02\', 31);\n        -> \'2008-02-02\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(170,'ADDTIME',15,'Syntax:\nADDTIME(expr1,expr2)\n\nADDTIME() adds expr2 to expr1 and returns the result. expr1 is a time\nor datetime expression, and expr2 is a time expression.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT ADDTIME(\'2007-12-31 23:59:59.999999\', \'1 1:1:1.000002\');\n        -> \'2008-01-02 01:01:01.000001\'\nmysql> SELECT ADDTIME(\'01:00:00.999999\', \'02:00:00.999998\');\n        -> \'03:00:01.999997\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(171,'CONVERT_TZ',15,'Syntax:\nCONVERT_TZ(dt,from_tz,to_tz)\n\nCONVERT_TZ() converts a datetime value dt from the time zone given by\nfrom_tz to the time zone given by to_tz and returns the resulting\nvalue. Time zones are specified as described in\nhttps://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html. This\nfunction returns NULL if the arguments are invalid.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT CONVERT_TZ(\'2004-01-01 12:00:00\',\'GMT\',\'MET\');\n        -> \'2004-01-01 13:00:00\'\nmysql> SELECT CONVERT_TZ(\'2004-01-01 12:00:00\',\'+00:00\',\'+10:00\');\n        -> \'2004-01-01 22:00:00\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(172,'CURDATE',15,'Syntax:\nCURDATE()\n\nReturns the current date as a value in \'YYYY-MM-DD\' or YYYYMMDD format,\ndepending on whether the function is used in a string or numeric\ncontext.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT CURDATE();\n        -> \'2008-06-13\'\nmysql> SELECT CURDATE() + 0;\n        -> 20080613\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(173,'CURRENT_DATE',15,'Syntax:\nCURRENT_DATE, CURRENT_DATE()\n\nCURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(174,'CURRENT_TIME',15,'Syntax:\nCURRENT_TIME, CURRENT_TIME([fsp])\n\nCURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(175,'CURRENT_TIMESTAMP',15,'Syntax:\nCURRENT_TIMESTAMP, CURRENT_TIMESTAMP([fsp])\n\nCURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(176,'CURTIME',15,'Syntax:\nCURTIME([fsp])\n\nReturns the current time as a value in \'hh:mm:ss\' or hhmmss format,\ndepending on whether the function is used in a string or numeric\ncontext. The value is expressed in the session time zone.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT CURTIME();\n        -> \'23:50:26\'\nmysql> SELECT CURTIME() + 0;\n        -> 235026.000000\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(177,'DATE FUNCTION',15,'Syntax:\nDATE(expr)\n\nExtracts the date part of the date or datetime expression expr.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DATE(\'2003-12-31 01:02:03\');\n        -> \'2003-12-31\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(178,'DATEDIFF',15,'Syntax:\nDATEDIFF(expr1,expr2)\n\nDATEDIFF() returns expr1 − expr2 expressed as a value in days from\none date to the other. expr1 and expr2 are date or date-and-time\nexpressions. Only the date parts of the values are used in the\ncalculation.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DATEDIFF(\'2007-12-31 23:59:59\',\'2007-12-30\');\n        -> 1\nmysql> SELECT DATEDIFF(\'2010-11-30 23:59:59\',\'2010-12-31\');\n        -> -31\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(179,'DATE_ADD',15,'Syntax:\nDATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)\n\nThese functions perform date arithmetic. The date argument specifies\nthe starting date or datetime value. expr is an expression specifying\nthe interval value to be added or subtracted from the starting date.\nexpr is evaluated as a string; it may start with a - for negative\nintervals. unit is a keyword indicating the units in which the\nexpression should be interpreted.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DATE_ADD(\'2018-05-01\',INTERVAL 1 DAY);\n        -> \'2018-05-02\'\nmysql> SELECT DATE_SUB(\'2018-05-01\',INTERVAL 1 YEAR);\n        -> \'2017-05-01\'\nmysql> SELECT DATE_ADD(\'2020-12-31 23:59:59\',\n    ->                 INTERVAL 1 SECOND);\n        -> \'2021-01-01 00:00:00\'\nmysql> SELECT DATE_ADD(\'2018-12-31 23:59:59\',\n    ->                 INTERVAL 1 DAY);\n        -> \'2019-01-01 23:59:59\'\nmysql> SELECT DATE_ADD(\'2100-12-31 23:59:59\',\n    ->                 INTERVAL \'1:1\' MINUTE_SECOND);\n        -> \'2101-01-01 00:01:00\'\nmysql> SELECT DATE_SUB(\'2025-01-01 00:00:00\',\n    ->                 INTERVAL \'1 1:1:1\' DAY_SECOND);\n        -> \'2024-12-30 22:58:59\'\nmysql> SELECT DATE_ADD(\'1900-01-01 00:00:00\',\n    ->                 INTERVAL \'-1 10\' DAY_HOUR);\n        -> \'1899-12-30 14:00:00\'\nmysql> SELECT DATE_SUB(\'1998-01-02\', INTERVAL 31 DAY);\n        -> \'1997-12-02\'\nmysql> SELECT DATE_ADD(\'1992-12-31 23:59:59.000002\',\n    ->            INTERVAL \'1.999999\' SECOND_MICROSECOND);\n        -> \'1993-01-01 00:00:01.000001\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(180,'DATE_FORMAT',15,'Syntax:\nDATE_FORMAT(date,format)\n\nFormats the date value according to the format string.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DATE_FORMAT(\'2009-10-04 22:23:00\', \'%W %M %Y\');\n        -> \'Sunday October 2009\'\nmysql> SELECT DATE_FORMAT(\'2007-10-04 22:23:00\', \'%H:%i:%s\');\n        -> \'22:23:00\'\nmysql> SELECT DATE_FORMAT(\'1900-10-04 22:23:00\',\n    ->                 \'%D %y %a %d %m %b %j\');\n        -> \'4th 00 Thu 04 10 Oct 277\'\nmysql> SELECT DATE_FORMAT(\'1997-10-04 22:23:00\',\n    ->                 \'%H %k %I %r %T %S %w\');\n        -> \'22 22 10 10:23:00 PM 22:23:00 00 6\'\nmysql> SELECT DATE_FORMAT(\'1999-01-01\', \'%X %V\');\n        -> \'1998 52\'\nmysql> SELECT DATE_FORMAT(\'2006-06-00\', \'%d\');\n        -> \'00\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(181,'DATE_SUB',15,'Syntax:\nDATE_SUB(date,INTERVAL expr unit)\n\nSee the description for DATE_ADD().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(182,'DAY',15,'Syntax:\nDAY(date)\n\nDAY() is a synonym for DAYOFMONTH().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(183,'DAYNAME',15,'Syntax:\nDAYNAME(date)\n\nReturns the name of the weekday for date. The language used for the\nname is controlled by the value of the lc_time_names system variable\n(https://dev.mysql.com/doc/refman/5.7/en/locale-support.html).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DAYNAME(\'2007-02-03\');\n        -> \'Saturday\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(184,'DAYOFMONTH',15,'Syntax:\nDAYOFMONTH(date)\n\nReturns the day of the month for date, in the range 1 to 31, or 0 for\ndates such as \'0000-00-00\' or \'2008-00-00\' that have a zero day part.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DAYOFMONTH(\'2007-02-03\');\n        -> 3\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(185,'DAYOFWEEK',15,'Syntax:\nDAYOFWEEK(date)\n\nReturns the weekday index for date (1 = Sunday, 2 = Monday, ..., 7 =\nSaturday). These index values correspond to the ODBC standard.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DAYOFWEEK(\'2007-02-03\');\n        -> 7\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(186,'DAYOFYEAR',15,'Syntax:\nDAYOFYEAR(date)\n\nReturns the day of the year for date, in the range 1 to 366.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DAYOFYEAR(\'2007-02-03\');\n        -> 34\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(187,'EXTRACT',15,'Syntax:\nEXTRACT(unit FROM date)\n\nThe EXTRACT() function uses the same kinds of unit specifiers as\nDATE_ADD() or DATE_SUB(), but extracts parts from the date rather than\nperforming date arithmetic. For information on the unit argument, see\nhttps://dev.mysql.com/doc/refman/5.7/en/expressions.html#temporal-inter\nvals.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT EXTRACT(YEAR FROM \'2019-07-02\');\n        -> 2019\nmysql> SELECT EXTRACT(YEAR_MONTH FROM \'2019-07-02 01:02:03\');\n        -> 201907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM \'2019-07-02 01:02:03\');\n        -> 20102\nmysql> SELECT EXTRACT(MICROSECOND\n    ->                FROM \'2003-01-02 10:30:00.000123\');\n        -> 123\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(188,'FROM_DAYS',15,'Syntax:\nFROM_DAYS(N)\n\nGiven a day number N, returns a DATE value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT FROM_DAYS(730669);\n        -> \'2000-07-03\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(189,'FROM_UNIXTIME',15,'Syntax:\nFROM_UNIXTIME(unix_timestamp[,format])\n\nReturns a representation of the unix_timestamp argument as a value in\n\'YYYY-MM-DD hh:mm:ss\' or YYYYMMDDhhmmss.uuuuuu format, depending on\nwhether the function is used in a string or numeric context.\nunix_timestamp is an internal timestamp value representing seconds\nsince \'1970-01-01 00:00:00\' UTC, such as produced by the\nUNIX_TIMESTAMP() function.\n\nThe return value is expressed in the session time zone. (Clients can\nset the session time zone as described in\nhttps://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html.) The\nformat string, if given, is used to format the result the same way as\ndescribed in the entry for the DATE_FORMAT() function.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT FROM_UNIXTIME(1447430881);\n        -> \'2015-11-13 10:08:01\'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n        -> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n    ->                      \'%Y %D %M %h:%i:%s %x\');\n        -> \'2015 13th November 10:08:01 2015\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(190,'GET_FORMAT',15,'Syntax:\nGET_FORMAT({DATE|TIME|DATETIME}, {\'EUR\'|\'USA\'|\'JIS\'|\'ISO\'|\'INTERNAL\'})\n\nReturns a format string. This function is useful in combination with\nthe DATE_FORMAT() and the STR_TO_DATE() functions.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT DATE_FORMAT(\'2003-10-03\',GET_FORMAT(DATE,\'EUR\'));\n        -> \'03.10.2003\'\nmysql> SELECT STR_TO_DATE(\'10.31.2003\',GET_FORMAT(DATE,\'USA\'));\n        -> \'2003-10-31\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(191,'HOUR',15,'Syntax:\nHOUR(time)\n\nReturns the hour for time. The range of the return value is 0 to 23 for\ntime-of-day values. However, the range of TIME values actually is much\nlarger, so HOUR can return values greater than 23.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT HOUR(\'10:05:03\');\n        -> 10\nmysql> SELECT HOUR(\'272:59:59\');\n        -> 272\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(192,'LAST_DAY',15,'Syntax:\nLAST_DAY(date)\n\nTakes a date or datetime value and returns the corresponding value for\nthe last day of the month. Returns NULL if the argument is invalid.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT LAST_DAY(\'2003-02-05\');\n        -> \'2003-02-28\'\nmysql> SELECT LAST_DAY(\'2004-02-05\');\n        -> \'2004-02-29\'\nmysql> SELECT LAST_DAY(\'2004-01-01 01:01:01\');\n        -> \'2004-01-31\'\nmysql> SELECT LAST_DAY(\'2003-03-32\');\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(193,'LOCALTIME',15,'Syntax:\nLOCALTIME, LOCALTIME([fsp])\n\nLOCALTIME and LOCALTIME() are synonyms for NOW().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(194,'LOCALTIMESTAMP',15,'Syntax:\nLOCALTIMESTAMP, LOCALTIMESTAMP([fsp])\n\nLOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(195,'MAKEDATE',15,'Syntax:\nMAKEDATE(year,dayofyear)\n\nReturns a date, given year and day-of-year values. dayofyear must be\ngreater than 0 or the result is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n        -> \'2011-01-31\', \'2011-02-01\'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n        -> \'2011-12-31\', \'2014-12-31\'\nmysql> SELECT MAKEDATE(2011,0);\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(196,'MAKETIME',15,'Syntax:\nMAKETIME(hour,minute,second)\n\nReturns a time value calculated from the hour, minute, and second\narguments.\n\nThe second argument can have a fractional part.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT MAKETIME(12,15,30);\n        -> \'12:15:30\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(197,'MICROSECOND',15,'Syntax:\nMICROSECOND(expr)\n\nReturns the microseconds from the time or datetime expression expr as a\nnumber in the range from 0 to 999999.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT MICROSECOND(\'12:00:00.123456\');\n        -> 123456\nmysql> SELECT MICROSECOND(\'2019-12-31 23:59:59.000010\');\n        -> 10\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(198,'MINUTE',15,'Syntax:\nMINUTE(time)\n\nReturns the minute for time, in the range 0 to 59.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT MINUTE(\'2008-02-03 10:05:03\');\n        -> 5\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(199,'MONTH',15,'Syntax:\nMONTH(date)\n\nReturns the month for date, in the range 1 to 12 for January to\nDecember, or 0 for dates such as \'0000-00-00\' or \'2008-00-00\' that have\na zero month part.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT MONTH(\'2008-02-03\');\n        -> 2\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(200,'MONTHNAME',15,'Syntax:\nMONTHNAME(date)\n\nReturns the full name of the month for date. The language used for the\nname is controlled by the value of the lc_time_names system variable\n(https://dev.mysql.com/doc/refman/5.7/en/locale-support.html).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT MONTHNAME(\'2008-02-03\');\n        -> \'February\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(201,'NOW',15,'Syntax:\nNOW([fsp])\n\nReturns the current date and time as a value in \'YYYY-MM-DD hh:mm:ss\'\nor YYYYMMDDhhmmss format, depending on whether the function is used in\na string or numeric context. The value is expressed in the session time\nzone.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT NOW();\n        -> \'2007-12-15 23:50:26\'\nmysql> SELECT NOW() + 0;\n        -> 20071215235026.000000\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(202,'PERIOD_ADD',15,'Syntax:\nPERIOD_ADD(P,N)\n\nAdds N months to period P (in the format YYMM or YYYYMM). Returns a\nvalue in the format YYYYMM.\n\n*Note*:\n\nThe period argument P is not a date value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT PERIOD_ADD(200801,2);\n        -> 200803\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(203,'PERIOD_DIFF',15,'Syntax:\nPERIOD_DIFF(P1,P2)\n\nReturns the number of months between periods P1 and P2. P1 and P2\nshould be in the format YYMM or YYYYMM. Note that the period arguments\nP1 and P2 are not date values.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT PERIOD_DIFF(200802,200703);\n        -> 11\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(204,'QUARTER',15,'Syntax:\nQUARTER(date)\n\nReturns the quarter of the year for date, in the range 1 to 4.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT QUARTER(\'2008-04-01\');\n        -> 2\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(205,'SECOND',15,'Syntax:\nSECOND(time)\n\nReturns the second for time, in the range 0 to 59.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT SECOND(\'10:05:03\');\n        -> 3\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(206,'SEC_TO_TIME',15,'Syntax:\nSEC_TO_TIME(seconds)\n\nReturns the seconds argument, converted to hours, minutes, and seconds,\nas a TIME value. The range of the result is constrained to that of the\nTIME data type. A warning occurs if the argument corresponds to a value\noutside that range.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT SEC_TO_TIME(2378);\n        -> \'00:39:38\'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(207,'STR_TO_DATE',15,'Syntax:\nSTR_TO_DATE(str,format)\n\nThis is the inverse of the DATE_FORMAT() function. It takes a string\nstr and a format string format. STR_TO_DATE() returns a DATETIME value\nif the format string contains both date and time parts, or a DATE or\nTIME value if the string contains only date or time parts. If the date,\ntime, or datetime value extracted from str is illegal, STR_TO_DATE()\nreturns NULL and produces a warning.\n\nThe server scans str attempting to match format to it. The format\nstring can contain literal characters and format specifiers beginning\nwith %. Literal characters in format must match literally in str.\nFormat specifiers in format must match a date or time part in str. For\nthe specifiers that can be used in format, see the DATE_FORMAT()\nfunction description.\n\nmysql> SELECT STR_TO_DATE(\'01,5,2013\',\'%d,%m,%Y\');\n        -> \'2013-05-01\'\nmysql> SELECT STR_TO_DATE(\'May 1, 2013\',\'%M %d,%Y\');\n        -> \'2013-05-01\'\n\nScanning starts at the beginning of str and fails if format is found\nnot to match. Extra characters at the end of str are ignored.\n\nmysql> SELECT STR_TO_DATE(\'a09:30:17\',\'a%h:%i:%s\');\n        -> \'09:30:17\'\nmysql> SELECT STR_TO_DATE(\'a09:30:17\',\'%h:%i:%s\');\n        -> NULL\nmysql> SELECT STR_TO_DATE(\'09:30:17a\',\'%h:%i:%s\');\n        -> \'09:30:17\'\n\nUnspecified date or time parts have a value of 0, so incompletely\nspecified values in str produce a result with some or all parts set to\n0:\n\nmysql> SELECT STR_TO_DATE(\'abc\',\'abc\');\n        -> \'0000-00-00\'\nmysql> SELECT STR_TO_DATE(\'9\',\'%m\');\n        -> \'0000-09-00\'\nmysql> SELECT STR_TO_DATE(\'9\',\'%s\');\n        -> \'00:00:09\'\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(208,'SUBDATE',15,'Syntax:\nSUBDATE(date,INTERVAL expr unit), SUBDATE(expr,days)\n\nWhen invoked with the INTERVAL form of the second argument, SUBDATE()\nis a synonym for DATE_SUB(). For information on the INTERVAL unit\nargument, see the discussion for DATE_ADD().\n\nmysql> SELECT DATE_SUB(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2007-12-02\'\nmysql> SELECT SUBDATE(\'2008-01-02\', INTERVAL 31 DAY);\n        -> \'2007-12-02\'\n\nThe second form enables the use of an integer value for days. In such\ncases, it is interpreted as the number of days to be subtracted from\nthe date or datetime expression expr.\n\nmysql> SELECT SUBDATE(\'2008-01-02 12:00:00\', 31);\n        -> \'2007-12-02 12:00:00\'\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(209,'SUBTIME',15,'Syntax:\nSUBTIME(expr1,expr2)\n\nSUBTIME() returns expr1 − expr2 expressed as a value in the same\nformat as expr1. expr1 is a time or datetime expression, and expr2 is a\ntime expression.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT SUBTIME(\'2007-12-31 23:59:59.999999\',\'1 1:1:1.000002\');\n        -> \'2007-12-30 22:58:58.999997\'\nmysql> SELECT SUBTIME(\'01:00:00.999999\', \'02:00:00.999998\');\n        -> \'-00:59:59.999999\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(210,'SYSDATE',15,'Syntax:\nSYSDATE([fsp])\n\nReturns the current date and time as a value in \'YYYY-MM-DD hh:mm:ss\'\nor YYYYMMDDhhmmss format, depending on whether the function is used in\na string or numeric context.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nSYSDATE() returns the time at which it executes. This differs from the\nbehavior for NOW(), which returns a constant time that indicates the\ntime at which the statement began to execute. (Within a stored function\nor trigger, NOW() returns the time at which the function or triggering\nstatement began to execute.)\n\nmysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW()               | SLEEP(2) | NOW()               |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 |        0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\n\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE()           | SLEEP(2) | SYSDATE()           |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 |        0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+\n\nIn addition, the SET TIMESTAMP statement affects the value returned by\nNOW() but not by SYSDATE(). This means that timestamp settings in the\nbinary log have no effect on invocations of SYSDATE().\n\nBecause SYSDATE() can return different values even within the same\nstatement, and is not affected by SET TIMESTAMP, it is nondeterministic\nand therefore unsafe for replication if statement-based binary logging\nis used. If that is a problem, you can use row-based logging.\n\nAlternatively, you can use the --sysdate-is-now option to cause\nSYSDATE() to be an alias for NOW(). This works if the option is used on\nboth the master and the slave.\n\nThe nondeterministic nature of SYSDATE() also means that indexes cannot\nbe used for evaluating expressions that refer to it.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(211,'TIME FUNCTION',15,'Syntax:\nTIME(expr)\n\nExtracts the time part of the time or datetime expression expr and\nreturns it as a string.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TIME(\'2003-12-31 01:02:03\');\n        -> \'01:02:03\'\nmysql> SELECT TIME(\'2003-12-31 01:02:03.000123\');\n        -> \'01:02:03.000123\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(212,'TIMEDIFF',15,'Syntax:\nTIMEDIFF(expr1,expr2)\n\nTIMEDIFF() returns expr1 − expr2 expressed as a time value. expr1 and\nexpr2 are time or date-and-time expressions, but both must be of the\nsame type.\n\nThe result returned by TIMEDIFF() is limited to the range allowed for\nTIME values. Alternatively, you can use either of the functions\nTIMESTAMPDIFF() and UNIX_TIMESTAMP(), both of which return integers.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TIMEDIFF(\'2000:01:01 00:00:00\',\n    ->                 \'2000:01:01 00:00:00.000001\');\n        -> \'-00:00:00.000001\'\nmysql> SELECT TIMEDIFF(\'2008-12-31 23:59:59.000001\',\n    ->                 \'2008-12-30 01:01:01.000002\');\n        -> \'46:58:57.999999\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(213,'TIMESTAMP FUNCTION',15,'Syntax:\nTIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n\nWith a single argument, this function returns the date or datetime\nexpression expr as a datetime value. With two arguments, it adds the\ntime expression expr2 to the date or datetime expression expr1 and\nreturns the result as a datetime value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TIMESTAMP(\'2003-12-31\');\n        -> \'2003-12-31 00:00:00\'\nmysql> SELECT TIMESTAMP(\'2003-12-31 12:00:00\',\'12:00:00\');\n        -> \'2004-01-01 00:00:00\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(214,'TIMESTAMPADD',15,'Syntax:\nTIMESTAMPADD(unit,interval,datetime_expr)\n\nAdds the integer expression interval to the date or datetime expression\ndatetime_expr. The unit for interval is given by the unit argument,\nwhich should be one of the following values: MICROSECOND\n(microseconds), SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, QUARTER, or\nYEAR.\n\nThe unit value may be specified using one of keywords as shown, or with\na prefix of SQL_TSI_. For example, DAY and SQL_TSI_DAY both are legal.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TIMESTAMPADD(MINUTE,1,\'2003-01-02\');\n        -> \'2003-01-02 00:01:00\'\nmysql> SELECT TIMESTAMPADD(WEEK,1,\'2003-01-02\');\n        -> \'2003-01-09\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(215,'TIMESTAMPDIFF',15,'Syntax:\nTIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n\nReturns datetime_expr2 − datetime_expr1, where datetime_expr1 and\ndatetime_expr2 are date or datetime expressions. One expression may be\na date and the other a datetime; a date value is treated as a datetime\nhaving the time part \'00:00:00\' where necessary. The unit for the\nresult (an integer) is given by the unit argument. The legal values for\nunit are the same as those listed in the description of the\nTIMESTAMPADD() function.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TIMESTAMPDIFF(MONTH,\'2003-02-01\',\'2003-05-01\');\n        -> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,\'2002-05-01\',\'2001-01-01\');\n        -> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,\'2003-02-01\',\'2003-05-01 12:05:55\');\n        -> 128885\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(216,'TIME_FORMAT',15,'Syntax:\nTIME_FORMAT(time,format)\n\nThis is used like the DATE_FORMAT() function, but the format string may\ncontain format specifiers only for hours, minutes, seconds, and\nmicroseconds. Other specifiers produce a NULL value or 0.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TIME_FORMAT(\'100:00:00\', \'%H %k %h %I %l\');\n        -> \'100 100 04 04 4\'\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(217,'TIME_TO_SEC',15,'Syntax:\nTIME_TO_SEC(time)\n\nReturns the time argument, converted to seconds.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TIME_TO_SEC(\'22:23:00\');\n        -> 80580\nmysql> SELECT TIME_TO_SEC(\'00:39:38\');\n        -> 2378\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(218,'TO_DAYS',15,'Syntax:\nTO_DAYS(date)\n\nGiven a date date, returns a day number (the number of days since year\n0).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS(\'2007-10-07\');\n        -> 733321\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(219,'TO_SECONDS',15,'Syntax:\nTO_SECONDS(expr)\n\nGiven a date or datetime expr, returns the number of seconds since the\nyear 0. If expr is not a valid date or datetime value, returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT TO_SECONDS(950501);\n        -> 62966505600\nmysql> SELECT TO_SECONDS(\'2009-11-29\');\n        -> 63426672000\nmysql> SELECT TO_SECONDS(\'2009-11-29 13:43:32\');\n        -> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n        -> 63426721458\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(220,'UNIX_TIMESTAMP',15,'Syntax:\nUNIX_TIMESTAMP([date])\n\nIf UNIX_TIMESTAMP() is called with no date argument, it returns a Unix\ntimestamp representing seconds since \'1970-01-01 00:00:00\' UTC.\n\nIf UNIX_TIMESTAMP() is called with a date argument, it returns the\nvalue of the argument as seconds since \'1970-01-01 00:00:00\' UTC. The\nserver interprets date as a value in the session time zone and converts\nit to an internal Unix timestamp value in UTC. (Clients can set the\nsession time zone as described in\nhttps://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html.) The\ndate argument may be a DATE, DATETIME, or TIMESTAMP string, or a number\nin YYMMDD, YYMMDDhhmmss, YYYYMMDD, or YYYYMMDDhhmmss format. If the\nargument includes a time part, it may optionally include a fractional\nseconds part.\n\nThe return value is an integer if no argument is given or the argument\ndoes not include a fractional seconds part, or DECIMAL if an argument\nis given that includes a fractional seconds part.\n\nWhen the date argument is a TIMESTAMP column, UNIX_TIMESTAMP() returns\nthe internal timestamp value directly, with no implicit\n\"string-to-Unix-timestamp\" conversion.\n\nThe valid range of argument values is the same as for the TIMESTAMP\ndata type: \'1970-01-01 00:00:01.000000\' UTC to \'2038-01-19\n03:14:07.999999\' UTC. If you pass an out-of-range date to\nUNIX_TIMESTAMP(), it returns 0.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT UNIX_TIMESTAMP();\n        -> 1447431666\nmysql> SELECT UNIX_TIMESTAMP(\'2015-11-13 10:20:19\');\n        -> 1447431619\nmysql> SELECT UNIX_TIMESTAMP(\'2015-11-13 10:20:19.012\');\n        -> 1447431619.012\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(221,'UTC_DATE',15,'Syntax:\nUTC_DATE, UTC_DATE()\n\nReturns the current UTC date as a value in \'YYYY-MM-DD\' or YYYYMMDD\nformat, depending on whether the function is used in a string or\nnumeric context.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> \'2003-08-14\', 20030814\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(222,'UTC_TIME',15,'Syntax:\nUTC_TIME, UTC_TIME([fsp])\n\nReturns the current UTC time as a value in \'hh:mm:ss\' or hhmmss format,\ndepending on whether the function is used in a string or numeric\ncontext.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> \'18:07:53\', 180753.000000\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(223,'UTC_TIMESTAMP',15,'Syntax:\nUTC_TIMESTAMP, UTC_TIMESTAMP([fsp])\n\nReturns the current UTC date and time as a value in \'YYYY-MM-DD\nhh:mm:ss\' or YYYYMMDDhhmmss format, depending on whether the function\nis used in a string or numeric context.\n\nIf the fsp argument is given to specify a fractional seconds precision\nfrom 0 to 6, the return value includes a fractional seconds part of\nthat many digits.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> \'2003-08-14 18:08:04\', 20030814180804.000000\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(224,'WEEK',15,'Syntax:\nWEEK(date[,mode])\n\nThis function returns the week number for date. The two-argument form\nof WEEK() enables you to specify whether the week starts on Sunday or\nMonday and whether the return value should be in the range from 0 to 53\nor from 1 to 53. If the mode argument is omitted, the value of the\ndefault_week_format system variable is used. See\nhttps://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT WEEK(\'2008-02-20\');\n        -> 7\nmysql> SELECT WEEK(\'2008-02-20\',0);\n        -> 7\nmysql> SELECT WEEK(\'2008-02-20\',1);\n        -> 8\nmysql> SELECT WEEK(\'2008-12-31\',1);\n        -> 53\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(225,'WEEKDAY',15,'Syntax:\nWEEKDAY(date)\n\nReturns the weekday index for date (0 = Monday, 1 = Tuesday, ... 6 =\nSunday).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT WEEKDAY(\'2008-02-03 22:23:00\');\n        -> 6\nmysql> SELECT WEEKDAY(\'2007-11-06\');\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(226,'WEEKOFYEAR',15,'Syntax:\nWEEKOFYEAR(date)\n\nReturns the calendar week of the date as a number in the range from 1\nto 53. WEEKOFYEAR() is a compatibility function that is equivalent to\nWEEK(date,3).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT WEEKOFYEAR(\'2008-02-20\');\n        -> 8\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(227,'YEAR',15,'Syntax:\nYEAR(date)\n\nReturns the year for date, in the range 1000 to 9999, or 0 for the\n\"zero\" date.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT YEAR(\'1987-01-01\');\n        -> 1987\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(228,'YEARWEEK',15,'Syntax:\nYEARWEEK(date), YEARWEEK(date,mode)\n\nReturns year and week for a date. The year in the result may be\ndifferent from the year in the date argument for the first and the last\nweek of the year.\n\nThe mode argument works exactly like the mode argument to WEEK(). For\nthe single-argument syntax, a mode value of 0 is used. Unlike WEEK(),\nthe value of default_week_format does not influence YEARWEEK().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html\n\n','mysql> SELECT YEARWEEK(\'1987-01-01\');\n        -> 198652\n','https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html'),(229,'MATCH AGAINST',13,'Syntax:\nMATCH (col1,col2,...) AGAINST (expr [search_modifier])\n\nMySQL has support for full-text indexing and searching:\n\no A full-text index in MySQL is an index of type FULLTEXT.\n\no Full-text indexes can be used only with InnoDB or MyISAM tables, and\n  can be created only for CHAR, VARCHAR, or TEXT columns.\n\no MySQL provides a built-in full-text ngram parser that supports\n  Chinese, Japanese, and Korean (CJK), and an installable MeCab\n  full-text parser plugin for Japanese. Parsing differences are\n  outlined in\n  https://dev.mysql.com/doc/refman/5.7/en/fulltext-search-ngram.html,\n  and\n  https://dev.mysql.com/doc/refman/5.7/en/fulltext-search-mecab.html.\n\no A FULLTEXT index definition can be given in the CREATE TABLE\n  statement when a table is created, or added later using ALTER TABLE\n  or CREATE INDEX.\n\no For large data sets, it is much faster to load your data into a table\n  that has no FULLTEXT index and then create the index after that, than\n  to load data into a table that has an existing FULLTEXT index.\n\nFull-text searching is performed using MATCH() ... AGAINST syntax.\nMATCH() takes a comma-separated list that names the columns to be\nsearched. AGAINST takes a string to search for, and an optional\nmodifier that indicates what type of search to perform. The search\nstring must be a string value that is constant during query evaluation.\nThis rules out, for example, a table column because that can differ for\neach row.\n\nThere are three types of full-text searches:\n\no A natural language search interprets the search string as a phrase in\n  natural human language (a phrase in free text). There are no special\n  operators, with the exception of double quote (\") characters. The\n  stopword list applies. For more information about stopword lists, see\n  https://dev.mysql.com/doc/refman/5.7/en/fulltext-stopwords.html.\n\n  Full-text searches are natural language searches if the IN NATURAL\n  LANGUAGE MODE modifier is given or if no modifier is given. For more\n  information, see\n  https://dev.mysql.com/doc/refman/5.7/en/fulltext-natural-language.htm\n  l.\n\no A boolean search interprets the search string using the rules of a\n  special query language. The string contains the words to search for.\n  It can also contain operators that specify requirements such that a\n  word must be present or absent in matching rows, or that it should be\n  weighted higher or lower than usual. Certain common words (stopwords)\n  are omitted from the search index and do not match if present in the\n  search string. The IN BOOLEAN MODE modifier specifies a boolean\n  search. For more information, see\n  https://dev.mysql.com/doc/refman/5.7/en/fulltext-boolean.html.\n\no A query expansion search is a modification of a natural language\n  search. The search string is used to perform a natural language\n  search. Then words from the most relevant rows returned by the search\n  are added to the search string and the search is done again. The\n  query returns the rows from the second search. The IN NATURAL\n  LANGUAGE MODE WITH QUERY EXPANSION or WITH QUERY EXPANSION modifier\n  specifies a query expansion search. For more information, see\n  https://dev.mysql.com/doc/refman/5.7/en/fulltext-query-expansion.html\n  .\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html\n\n','mysql> SELECT id, body, MATCH (title,body) AGAINST\n    (\'Security implications of running MySQL as root\'\n    IN NATURAL LANGUAGE MODE) AS score\n    FROM articles WHERE MATCH (title,body) AGAINST\n    (\'Security implications of running MySQL as root\'\n    IN NATURAL LANGUAGE MODE);\n+----+-------------------------------------+-----------------+\n| id | body                                | score           |\n+----+-------------------------------------+-----------------+\n|  4 | 1. Never run mysqld as root. 2. ... | 1.5219271183014 |\n|  6 | When configured properly, MySQL ... | 1.3114095926285 |\n+----+-------------------------------------+-----------------+\n2 rows in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/fulltext-search.html'),(230,'BINARY OPERATOR',13,'Syntax:\nBINARY expr\n\nThe BINARY operator converts the expression to a binary string (a\nstring that has the binary character set and binary collation). A\ncommon use for BINARY is to force a character string comparison to be\ndone byte by byte using numeric byte values rather than character by\ncharacter. The BINARY operator also causes trailing spaces in\ncomparisons to be significant. For information about the differences\nbetween the binary collation of the binary character set and the _bin\ncollations of nonbinary character sets, see\nhttps://dev.mysql.com/doc/refman/5.7/en/charset-binary-collations.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html\n\n','mysql> SELECT \'a\' = \'A\';\n        -> 1\nmysql> SELECT BINARY \'a\' = \'A\';\n        -> 0\nmysql> SELECT \'a\' = \'a \';\n        -> 1\nmysql> SELECT BINARY \'a\' = \'a \';\n        -> 0\n','https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html'),(231,'CAST',13,'Syntax:\nCAST(expr AS type)\n\nThe CAST() function takes an expression of any type and produces a\nresult value of the specified type, similar to CONVERT(). For more\ninformation, see the description of CONVERT().\n\nCAST() is standard SQL syntax.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html'),(232,'CONVERT',13,'Syntax:\nCONVERT(expr,type), CONVERT(expr USING transcoding_name)\n\nThe CONVERT() function takes an expression of any type and produces a\nresult value of the specified type.\n\nDiscussion of CONVERT(expr, type) syntax here also applies to CAST(expr\nAS type), which is equivalent.\n\nCONVERT(... USING ...) is standard SQL syntax. The non-USING form of\nCONVERT() is ODBC syntax.\n\nCONVERT() with USING converts data between different character sets. In\nMySQL, transcoding names are the same as the corresponding character\nset names. For example, this statement converts the string \'abc\' in the\ndefault character set to the corresponding string in the utf8 character\nset:\n\nSELECT CONVERT(\'abc\' USING utf8);\n\nCONVERT() without USING and CAST() take an expression and a type value\nspecifying the result type. These type values are permitted:\n\no BINARY[(N)]\n\n  Produces a string with the BINARY data type. For a description of how\n  this affects comparisons, see\n  https://dev.mysql.com/doc/refman/5.7/en/binary-varbinary.html. If the\n  optional length N is given, BINARY(N) causes the cast to use no more\n  than N bytes of the argument. Values shorter than N bytes are padded\n  with 0x00 bytes to a length of N.\n\no CHAR[(N)] [charset_info]\n\n  Produces a string with the CHAR data type. If the optional length N\n  is given, CHAR(N) causes the cast to use no more than N characters of\n  the argument. No padding occurs for values shorter than N characters.\n\n  With no charset_info clause, CHAR produces a string with the default\n  character set. To specify the character set explicitly, these\n  charset_info values are permitted:\n\n  o CHARACTER SET charset_name: Produces a string with the given\n    character set.\n\n  o ASCII: Shorthand for CHARACTER SET latin1.\n\n  o UNICODE: Shorthand for CHARACTER SET ucs2.\n\n  In all cases, the string has the character set default collation.\n\no DATE\n\n  Produces a DATE value.\n\no DATETIME\n\n  Produces a DATETIME value.\n\no DECIMAL[(M[,D])]\n\n  Produces a DECIMAL value. If the optional M and D values are given,\n  they specify the maximum number of digits (the precision) and the\n  number of digits following the decimal point (the scale).\n\no JSON\n\n  Produces a JSON value. For details on the rules for conversion of\n  values between JSON and other types, see\n  https://dev.mysql.com/doc/refman/5.7/en/json.html#json-comparison.\n\no NCHAR[(N)]\n\n  Like CHAR, but produces a string with the national character set. See\n  https://dev.mysql.com/doc/refman/5.7/en/charset-national.html.\n\n  Unlike CHAR, NCHAR does not permit trailing character set information\n  to be specified.\n\no SIGNED [INTEGER]\n\n  Produces a signed integer value.\n\no TIME\n\n  Produces a TIME value.\n\no UNSIGNED [INTEGER]\n\n  Produces an unsigned integer value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html'),(233,'EXTRACTVALUE',13,'Syntax:\nExtractValue(xml_frag, xpath_expr)\n\nExtractValue() takes two string arguments, a fragment of XML markup\nxml_frag and an XPath expression xpath_expr (also known as a locator);\nit returns the text (CDATA) of the first text node which is a child of\nthe element or elements matched by the XPath expression.\n\nUsing this function is the equivalent of performing a match using the\nxpath_expr after appending /text(). In other words,\nExtractValue(\'<a><b>Sakila</b></a>\', \'/a/b\') and\nExtractValue(\'<a><b>Sakila</b></a>\', \'/a/b/text()\') produce the same\nresult.\n\nIf multiple matches are found, the content of the first child text node\nof each matching element is returned (in the order matched) as a\nsingle, space-delimited string.\n\nIf no matching text node is found for the expression (including the\nimplicit /text())---for whatever reason, as long as xpath_expr is\nvalid, and xml_frag consists of elements which are properly nested and\nclosed---an empty string is returned. No distinction is made between a\nmatch on an empty element and no match at all. This is by design.\n\nIf you need to determine whether no matching element was found in\nxml_frag or such an element was found but contained no child text\nnodes, you should test the result of an expression that uses the XPath\ncount() function. For example, both of these statements return an empty\nstring, as shown here:\n\nmysql> SELECT ExtractValue(\'<a><b/></a>\', \'/a/b\');\n+-------------------------------------+\n| ExtractValue(\'<a><b/></a>\', \'/a/b\') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue(\'<a><c/></a>\', \'/a/b\');\n+-------------------------------------+\n| ExtractValue(\'<a><c/></a>\', \'/a/b\') |\n+-------------------------------------+\n|                                     |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nHowever, you can determine whether there was actually a matching\nelement using the following:\n\nmysql> SELECT ExtractValue(\'<a><b/></a>\', \'count(/a/b)\');\n+-------------------------------------+\n| ExtractValue(\'<a><b/></a>\', \'count(/a/b)\') |\n+-------------------------------------+\n| 1                                   |\n+-------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ExtractValue(\'<a><c/></a>\', \'count(/a/b)\');\n+-------------------------------------+\n| ExtractValue(\'<a><c/></a>\', \'count(/a/b)\') |\n+-------------------------------------+\n| 0                                   |\n+-------------------------------------+\n1 row in set (0.01 sec)\n\n*Important*:\n\nExtractValue() returns only CDATA, and does not return any tags that\nmight be contained within a matching tag, nor any of their content (see\nthe result returned as val1 in the following example).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html\n\n','mysql> SELECT\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/a\') AS val1,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/a/b\') AS val2,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'//b\') AS val3,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b></a>\', \'/b\') AS val4,\n    ->   ExtractValue(\'<a>ccc<b>ddd</b><b>eee</b></a>\', \'//b\') AS val5;\n\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5    |\n+------+------+------+------+---------+\n| ccc  | ddd  | ddd  |      | ddd eee |\n+------+------+------+------+---------+\n','https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html'),(234,'UPDATEXML',13,'Syntax:\nUpdateXML(xml_target, xpath_expr, new_xml)\n\nThis function replaces a single portion of a given fragment of XML\nmarkup xml_target with a new XML fragment new_xml, and then returns the\nchanged XML. The portion of xml_target that is replaced matches an\nXPath expression xpath_expr supplied by the user.\n\nIf no expression matching xpath_expr is found, or if multiple matches\nare found, the function returns the original xml_target XML fragment.\nAll three arguments should be strings.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html\n\n','mysql> SELECT\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/a\', \'<e>fff</e>\') AS val1,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/b\', \'<e>fff</e>\') AS val2,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'//b\', \'<e>fff</e>\') AS val3,\n    ->   UpdateXML(\'<a><b>ccc</b><d></d></a>\', \'/a/d\', \'<e>fff</e>\') AS val4,\n    ->   UpdateXML(\'<a><d></d><b>ccc</b><d></d></a>\', \'/a/d\', \'<e>fff</e>\') AS val5\n    -> \\G\n\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>\n','https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html'),(235,'|',16,'Syntax:\n|\n\nBitwise OR.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html\n\n','mysql> SELECT 29 | 15;\n        -> 31\n','https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html'),(236,'&',16,'Syntax:\n&\n\nBitwise AND.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html\n\n','mysql> SELECT 29 & 15;\n        -> 13\n','https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html'),(237,'^',16,'Syntax:\n^\n\nBitwise XOR.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html\n\n','mysql> SELECT 1 ^ 1;\n        -> 0\nmysql> SELECT 1 ^ 0;\n        -> 1\nmysql> SELECT 11 ^ 3;\n        -> 8\n','https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html'),(238,'<<',16,'Syntax:\n<<\n\nShifts a longlong (BIGINT) number to the left.\n\nThe result is an unsigned 64-bit integer. The value is truncated to 64\nbits. In particular, if the shift count is greater or equal to the\nwidth of an unsigned 64-bit number, the result is zero.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html\n\n','mysql> SELECT 1 << 2;\n        -> 4\n','https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html'),(239,'>>',16,'Syntax:\n>>\n\nShifts a longlong (BIGINT) number to the right.\n\nThe result is an unsigned 64-bit integer. The value is truncated to 64\nbits. In particular, if the shift count is greater or equal to the\nwidth of an unsigned 64-bit number, the result is zero.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html\n\n','mysql> SELECT 4 >> 2;\n        -> 1\n','https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html'),(240,'~',16,'Syntax:\n~\n\nInvert all bits.\n\nThe result is an unsigned 64-bit integer.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html\n\n','mysql> SELECT 5 & ~1;\n        -> 4\n','https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html'),(241,'BIT_COUNT',16,'Syntax:\nBIT_COUNT(N)\n\nReturns the number of bits that are set in the argument N as an\nunsigned 64-bit integer, or NULL if the argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html\n\n','mysql> SELECT BIT_COUNT(29), BIT_COUNT(b\'101010\');\n        -> 4, 3\n','https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html'),(242,'AES_DECRYPT',17,'Syntax:\nAES_DECRYPT(crypt_str,key_str[,init_vector])\n\nThis function decrypts data using the official AES (Advanced Encryption\nStandard) algorithm. For more information, see the description of\nAES_ENCRYPT().\n\nStatements that use AES_DECRYPT() are unsafe for statement-based\nreplication and cannot be stored in the query cache.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(243,'AES_ENCRYPT',17,'Syntax:\nAES_ENCRYPT(str,key_str[,init_vector])\n\nAES_ENCRYPT() and AES_DECRYPT() implement encryption and decryption of\ndata using the official AES (Advanced Encryption Standard) algorithm,\npreviously known as \"Rijndael.\" The AES standard permits various key\nlengths. By default these functions implement AES with a 128-bit key\nlength. Key lengths of 196 or 256 bits can be used, as described later.\nThe key length is a trade off between performance and security.\n\nAES_ENCRYPT() encrypts the string str using the key string key_str and\nreturns a binary string containing the encrypted output. AES_DECRYPT()\ndecrypts the encrypted string crypt_str using the key string key_str\nand returns the original plaintext string. If either function argument\nis NULL, the function returns NULL.\n\nThe str and crypt_str arguments can be any length, and padding is\nautomatically added to str so it is a multiple of a block as required\nby block-based algorithms such as AES. This padding is automatically\nremoved by the AES_DECRYPT() function. The length of crypt_str can be\ncalculated using this formula:\n\n16 * (trunc(string_length / 16) + 1)\n\nFor a key length of 128 bits, the most secure way to pass a key to the\nkey_str argument is to create a truly random 128-bit value and pass it\nas a binary value. For example:\n\nINSERT INTO t\nVALUES (1,AES_ENCRYPT(\'text\',UNHEX(\'F3229A0B371ED2D9441B830D21A390C3\')));\n\nA passphrase can be used to generate an AES key by hashing the\npassphrase. For example:\n\nINSERT INTO t\nVALUES (1,AES_ENCRYPT(\'text\', UNHEX(SHA2(\'My secret passphrase\',512))));\n\nDo not pass a password or passphrase directly to crypt_str, hash it\nfirst. Previous versions of this documentation suggested the former\napproach, but it is no longer recommended as the examples shown here\nare more secure.\n\nIf AES_DECRYPT() detects invalid data or incorrect padding, it returns\nNULL. However, it is possible for AES_DECRYPT() to return a non-NULL\nvalue (possibly garbage) if the input data or the key is invalid.\n\nAES_ENCRYPT() and AES_DECRYPT() permit control of the block encryption\nmode and take an optional init_vector initialization vector argument:\n\no The block_encryption_mode system variable controls the mode for\n  block-based encryption algorithms. Its default value is aes-128-ecb,\n  which signifies encryption using a key length of 128 bits and ECB\n  mode. For a description of the permitted values of this variable, see\n  https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html.\n\no The optional init_vector argument provides an initialization vector\n  for block encryption modes that require it.\n\nFor modes that require the optional init_vector argument, it must be 16\nbytes or longer (bytes in excess of 16 are ignored). An error occurs if\ninit_vector is missing.\n\nFor modes that do not require init_vector, it is ignored and a warning\nis generated if it is specified.\n\nA random string of bytes to use for the initialization vector can be\nproduced by calling RANDOM_BYTES(16). For encryption modes that require\nan initialization vector, the same vector must be used for encryption\nand decryption.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SET block_encryption_mode = \'aes-256-cbc\';\nmysql> SET @key_str = SHA2(\'My secret passphrase\',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT(\'text\',@key_str,@init_vector);\nmysql> SELECT AES_DECRYPT(@crypt_str,@key_str,@init_vector);\n+-----------------------------------------------+\n| AES_DECRYPT(@crypt_str,@key_str,@init_vector) |\n+-----------------------------------------------+\n| text                                          |\n+-----------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(244,'COMPRESS',17,'Syntax:\nCOMPRESS(string_to_compress)\n\nCompresses a string and returns the result as a binary string. This\nfunction requires MySQL to have been compiled with a compression\nlibrary such as zlib. Otherwise, the return value is always NULL. The\ncompressed string can be uncompressed with UNCOMPRESS().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT LENGTH(COMPRESS(REPEAT(\'a\',1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(\'\'));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS(\'a\'));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT(\'a\',16)));\n        -> 15\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(245,'DECODE',17,'Syntax:\nDECODE(crypt_str,pass_str)\n\nDECODE() decrypts the encrypted string crypt_str using pass_str as the\npassword. crypt_str should be a string returned from ENCODE().\n\n*Note*:\n\nThe ENCODE() and DECODE() functions are deprecated in MySQL 5.7, will\nbe removed in a future MySQL release, and should no longer be used.\nConsider using AES_ENCRYPT() and AES_DECRYPT() instead.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(246,'DES_DECRYPT',17,'Syntax:\nDES_DECRYPT(crypt_str[,key_str])\n\nDecrypts a string encrypted with DES_ENCRYPT(). If an error occurs,\nthis function returns NULL.\n\nThis function works only if MySQL has been configured with SSL support.\nSee https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html.\n\nIf no key_str argument is given, DES_DECRYPT() examines the first byte\nof the encrypted string to determine the DES key number that was used\nto encrypt the original string, and then reads the key from the DES key\nfile to decrypt the message. For this to work, the user must have the\nSUPER privilege. The key file can be specified with the --des-key-file\nserver option.\n\nIf you pass this function a key_str argument, that string is used as\nthe key for decrypting the message.\n\nIf the crypt_str argument does not appear to be an encrypted string,\nMySQL returns the given crypt_str.\n\n*Note*:\n\nThe DES_ENCRYPT() and DES_DECRYPT() functions are deprecated as of\nMySQL 5.7.6, will be removed in a future MySQL release, and should no\nlonger be used. Consider using AES_ENCRYPT() and AES_DECRYPT() instead.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(247,'DES_ENCRYPT',17,'Syntax:\nDES_ENCRYPT(str[,{key_num|key_str}])\n\nEncrypts the string with the given key using the Triple-DES algorithm.\n\nThis function works only if MySQL has been configured with SSL support.\nSee https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html.\n\nThe encryption key to use is chosen based on the second argument to\nDES_ENCRYPT(), if one was given. With no argument, the first key from\nthe DES key file is used. With a key_num argument, the given key number\n(0 to 9) from the DES key file is used. With a key_str argument, the\ngiven key string is used to encrypt str.\n\nThe key file can be specified with the --des-key-file server option.\n\nThe return string is a binary string where the first character is\nCHAR(128 | key_num). If an error occurs, DES_ENCRYPT() returns NULL.\n\nThe 128 is added to make it easier to recognize an encrypted key. If\nyou use a string key, key_num is 127.\n\nThe string length for the result is given by this formula:\n\nnew_len = orig_len + (8 - (orig_len % 8)) + 1\n\nEach line in the DES key file has the following format:\n\nkey_num des_key_str\n\nEach key_num value must be a number in the range from 0 to 9. Lines in\nthe file may be in any order. des_key_str is the string that is used to\nencrypt the message. There should be at least one space between the\nnumber and the key. The first key is the default key that is used if\nyou do not specify any key argument to DES_ENCRYPT().\n\nYou can tell MySQL to read new key values from the key file with the\nFLUSH DES_KEY_FILE statement. This requires the RELOAD privilege.\n\nOne benefit of having a set of default keys is that it gives\napplications a way to check for the existence of encrypted column\nvalues, without giving the end user the right to decrypt those values.\n\n*Note*:\n\nThe DES_ENCRYPT() and DES_DECRYPT() functions are deprecated as of\nMySQL 5.7.6, will be removed in a future MySQL release, and should no\nlonger be used. Consider using AES_ENCRYPT() and AES_DECRYPT() instead.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT customer_address FROM customer_table \n     > WHERE crypted_credit_card = DES_ENCRYPT(\'credit_card_number\');\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(248,'ENCODE',17,'Syntax:\nENCODE(str,pass_str)\n\nENCODE() encrypts str using pass_str as the password. The result is a\nbinary string of the same length as str. To decrypt the result, use\nDECODE().\n\n*Note*:\n\nThe ENCODE() and DECODE() functions are deprecated in MySQL 5.7, will\nbe removed in a future MySQL release, and should no longer be used.\n\nIf you still need to use ENCODE(), a salt value must be used with it to\nreduce risk. For example:\n\nENCODE(\'cleartext\', CONCAT(\'my_random_salt\',\'my_secret_password\'))\n\nA new random salt value must be used whenever a password is updated.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(249,'ENCRYPT',17,'Syntax:\nENCRYPT(str[,salt])\n\nEncrypts str using the Unix crypt() system call and returns a binary\nstring. The salt argument must be a string with at least two characters\nor the result will be NULL. If no salt argument is given, a random\nvalue is used.\n\n*Note*:\n\nThe ENCRYPT() function is deprecated as of MySQL 5.7.6, will be removed\nin a future MySQL release, and should no longer be used. For one-way\nhashing, consider using SHA2() instead.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT ENCRYPT(\'hello\');\n        -> \'VxuFAJXVARROc\'\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(250,'MD5',17,'Syntax:\nMD5(str)\n\nCalculates an MD5 128-bit checksum for the string. The value is\nreturned as a string of 32 hexadecimal digits, or NULL if the argument\nwas NULL. The return value can, for example, be used as a hash key. See\nthe notes at the beginning of this section about storing hash values\nefficiently.\n\nThe return value is a string in the connection character set.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT MD5(\'testing\');\n        -> \'ae2b1fca515949e5d54fb22b8ed95575\'\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(251,'OLD_PASSWORD',17,'Syntax:\nOLD_PASSWORD(str)\n\nOLD_PASSWORD() was added when the implementation of PASSWORD() was\nchanged in MySQL 4.1 to improve security. OLD_PASSWORD() returned the\nvalue of the pre-4.1 implementation of PASSWORD() as a string, and was\nintended to permit you to reset passwords for any pre-4.1 clients that\nneed to connect to your MySQL server without locking them out. See\nhttps://dev.mysql.com/doc/refman/5.7/en/password-hashing.html.\n\nPasswords that use the pre-4.1 hashing method are less secure than\npasswords that use the native password hashing method. Support for\npre-4.1 passwords was removed in MySQL 5.7.5, as was OLD_PASSWORD().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(252,'PASSWORD',17,'Syntax:\nPASSWORD(str)\n\n*Note*:\n\nThis function is deprecated as of MySQL 5.7.6 and will be removed in a\nfuture MySQL release.\n\nReturns a hashed password string calculated from the cleartext password\nstr. The return value is a string in the connection character set, or\nNULL if the argument is NULL. This function is the SQL interface to the\nalgorithm used by the server to encrypt MySQL passwords for storage in\nthe mysql.user grant table.\n\nThe old_passwords system variable controls the password hashing method\nused by the PASSWORD() function. It also influences password hashing\nperformed by CREATE USER and GRANT statements that specify a password\nusing an IDENTIFIED BY clause.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(253,'RANDOM_BYTES',17,'Syntax:\nRANDOM_BYTES(len)\n\nThis function returns a binary string of len random bytes generated\nusing the random number generator of the SSL library. Permitted values\nof len range from 1 to 1024. For values outside that range,\nRANDOM_BYTES() generates a warning and returns NULL.\n\nRANDOM_BYTES() can be used to provide the initialization vector for the\nAES_DECRYPT() and AES_ENCRYPT() functions. For use in that context, len\nmust be at least 16. Larger values are permitted, but bytes in excess\nof 16 are ignored.\n\nRANDOM_BYTES() generates a random value, which makes its result\nnondeterministic. Consequently, statements that use this function are\nunsafe for statement-based replication and cannot be stored in the\nquery cache.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(254,'SHA1',17,'Syntax:\nSHA1(str), SHA(str)\n\nCalculates an SHA-1 160-bit checksum for the string, as described in\nRFC 3174 (Secure Hash Algorithm). The value is returned as a string of\n40 hexadecimal digits, or NULL if the argument was NULL. One of the\npossible uses for this function is as a hash key. See the notes at the\nbeginning of this section about storing hash values efficiently. SHA()\nis synonymous with SHA1().\n\nThe return value is a string in the connection character set.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT SHA1(\'abc\');\n        -> \'a9993e364706816aba3e25717850c26c9cd0d89d\'\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(255,'SHA2',17,'Syntax:\nSHA2(str, hash_length)\n\nCalculates the SHA-2 family of hash functions (SHA-224, SHA-256,\nSHA-384, and SHA-512). The first argument is the plaintext string to be\nhashed. The second argument indicates the desired bit length of the\nresult, which must have a value of 224, 256, 384, 512, or 0 (which is\nequivalent to 256). If either argument is NULL or the hash length is\nnot one of the permitted values, the return value is NULL. Otherwise,\nthe function result is a hash value containing the desired number of\nbits. See the notes at the beginning of this section about storing hash\nvalues efficiently.\n\nThe return value is a string in the connection character set.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT SHA2(\'abc\', 224);\n        -> \'23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7\'\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(256,'UNCOMPRESS',17,'Syntax:\nUNCOMPRESS(string_to_uncompress)\n\nUncompresses a string compressed by the COMPRESS() function. If the\nargument is not a compressed value, the result is NULL. This function\nrequires MySQL to have been compiled with a compression library such as\nzlib. Otherwise, the return value is always NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT UNCOMPRESS(COMPRESS(\'any string\'));\n        -> \'any string\'\nmysql> SELECT UNCOMPRESS(\'any string\');\n        -> NULL\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(257,'UNCOMPRESSED_LENGTH',17,'Syntax:\nUNCOMPRESSED_LENGTH(compressed_string)\n\nReturns the length that the compressed string had before being\ncompressed.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT(\'a\',30)));\n        -> 30\n','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(258,'VALIDATE_PASSWORD_STRENGTH',17,'Syntax:\nVALIDATE_PASSWORD_STRENGTH(str)\n\nGiven an argument representing a plaintext password, this function\nreturns an integer to indicate how strong the password is. The return\nvalue ranges from 0 (weak) to 100 (strong).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/encryption-functions.html'),(259,'GET_LOCK',18,'Syntax:\nGET_LOCK(str,timeout)\n\nTries to obtain a lock with a name given by the string str, using a\ntimeout of timeout seconds. A negative timeout value means infinite\ntimeout. The lock is exclusive. While held by one session, other\nsessions cannot obtain a lock of the same name.\n\nReturns 1 if the lock was obtained successfully, 0 if the attempt timed\nout (for example, because another client has previously locked the\nname), or NULL if an error occurred (such as running out of memory or\nthe thread was killed with mysqladmin kill).\n\nA lock obtained with GET_LOCK() is released explicitly by executing\nRELEASE_LOCK() or implicitly when your session terminates (either\nnormally or abnormally). Locks obtained with GET_LOCK() are not\nreleased when transactions commit or roll back.\n\nIn MySQL 5.7, GET_LOCK() was reimplemented using the metadata locking\n(MDL) subsystem and its capabilities were extended. Multiple\nsimultaneous locks can be acquired and GET_LOCK() does not release any\nexisting locks.\n\nIt is even possible for a given session to acquire multiple locks for\nthe same name. Other sessions cannot acquire a lock with that name\nuntil the acquiring session releases all its locks for the name.\n\nAs a result of the MDL reimplementation, uniquely named locks acquired\nwith GET_LOCK() appear in the Performance Schema metadata_locks table.\nThe OBJECT_TYPE column says USER LEVEL LOCK and the OBJECT_NAME column\nindicates the lock name. In the case that multiple locks are acquired\nfor the same name, only the first lock for the name registers a row in\nthe metadata_locks table. Subsequent locks for the name increment a\ncounter in the lock but do not acquire additional metadata locks. The\nmetadata_locks row for the lock is deleted when the last lock instance\non the name is released.\n\nThe capability of acquiring multiple locks means there is the\npossibility of deadlock among clients. When this happens, the server\nchooses a caller and terminates its lock-acquisition request with an\nER_USER_LOCK_DEADLOCK error. This error does not cause transactions to\nroll back.\n\nBefore MySQL 5.7, only a single simultaneous lock can be acquired and\nGET_LOCK() releases any existing lock. The difference in lock\nacquisition behavior as of MySQL 5.7 can be seen by the following\nexample. Suppose that you execute these statements:\n\nSELECT GET_LOCK(\'lock1\',10);\nSELECT GET_LOCK(\'lock2\',10);\nSELECT RELEASE_LOCK(\'lock2\');\nSELECT RELEASE_LOCK(\'lock1\');\n\nIn MySQL 5.7 or later, the second GET_LOCK() acquires a second lock and\nboth RELEASE_LOCK() calls return 1 (success). Before MySQL 5.7, the\nsecond GET_LOCK() releases the first lock (\'lock1\') and the second\nRELEASE_LOCK() returns NULL (failure) because there is no \'lock1\' to\nrelease.\n\nMySQL 5.7 and later enforces a maximum length on lock names of 64\ncharacters. Previously, no limit was enforced.\n\nGET_LOCK() can be used to implement application locks or to simulate\nrecord locks. Names are locked on a server-wide basis. If a name has\nbeen locked within one session, GET_LOCK() blocks any request by\nanother session for a lock with the same name. This enables clients\nthat agree on a given lock name to use the name to perform cooperative\nadvisory locking. But be aware that it also enables a client that is\nnot among the set of cooperating clients to lock a name, either\ninadvertently or deliberately, and thus prevent any of the cooperating\nclients from locking that name. One way to reduce the likelihood of\nthis is to use lock names that are database-specific or\napplication-specific. For example, use lock names of the form\ndb_name.str or app_name.str.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html'),(260,'IS_FREE_LOCK',18,'Syntax:\nIS_FREE_LOCK(str)\n\nChecks whether the lock named str is free to use (that is, not locked).\nReturns 1 if the lock is free (no one is using the lock), 0 if the lock\nis in use, and NULL if an error occurs (such as an incorrect argument).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html'),(261,'IS_USED_LOCK',18,'Syntax:\nIS_USED_LOCK(str)\n\nChecks whether the lock named str is in use (that is, locked). If so,\nit returns the connection identifier of the client session that holds\nthe lock. Otherwise, it returns NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html'),(262,'RELEASE_ALL_LOCKS',18,'Syntax:\nRELEASE_ALL_LOCKS()\n\nReleases all named locks held by the current session and returns the\nnumber of locks released (0 if there were none)\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html'),(263,'RELEASE_LOCK',18,'Syntax:\nRELEASE_LOCK(str)\n\nReleases the lock named by the string str that was obtained with\nGET_LOCK(). Returns 1 if the lock was released, 0 if the lock was not\nestablished by this thread (in which case the lock is not released),\nand NULL if the named lock did not exist. The lock does not exist if it\nwas never obtained by a call to GET_LOCK() or if it has previously been\nreleased.\n\nThe DO statement is convenient to use with RELEASE_LOCK(). See [HELP\nDO].\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/locking-functions.html'),(264,'BENCHMARK',19,'Syntax:\nBENCHMARK(count,expr)\n\nThe BENCHMARK() function executes the expression expr repeatedly count\ntimes. It may be used to time how quickly MySQL processes the\nexpression. The result value is 0, or NULL for inappropriate arguments\nsuch as a NULL or negative repeat count.\n\nThe intended use is from within the mysql client, which reports query\nexecution times:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT(\'hello\',\'goodbye\'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT(\'hello\',\'goodbye\')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(265,'CHARSET',19,'Syntax:\nCHARSET(str)\n\nReturns the character set of the string argument.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT CHARSET(\'abc\');\n        -> \'latin1\'\nmysql> SELECT CHARSET(CONVERT(\'abc\' USING utf8));\n        -> \'utf8\'\nmysql> SELECT CHARSET(USER());\n        -> \'utf8\'\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(266,'COERCIBILITY',19,'Syntax:\nCOERCIBILITY(str)\n\nReturns the collation coercibility value of the string argument.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT COERCIBILITY(\'abc\' COLLATE latin1_swedish_ci);\n        -> 0\nmysql> SELECT COERCIBILITY(USER());\n        -> 3\nmysql> SELECT COERCIBILITY(\'abc\');\n        -> 4\nmysql> SELECT COERCIBILITY(1000);\n        -> 5\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(267,'COLLATION',19,'Syntax:\nCOLLATION(str)\n\nReturns the collation of the string argument.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT COLLATION(\'abc\');\n        -> \'latin1_swedish_ci\'\nmysql> SELECT COLLATION(_utf8\'abc\');\n        -> \'utf8_general_ci\'\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(268,'CONNECTION_ID',19,'Syntax:\nCONNECTION_ID()\n\nReturns the connection ID (thread ID) for the connection. Every\nconnection has an ID that is unique among the set of currently\nconnected clients.\n\nThe value returned by CONNECTION_ID() is the same type of value as\ndisplayed in the ID column of the INFORMATION_SCHEMA.PROCESSLIST table,\nthe Id column of SHOW PROCESSLIST output, and the PROCESSLIST_ID column\nof the Performance Schema threads table.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT CONNECTION_ID();\n        -> 23786\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(269,'CURRENT_USER',19,'Syntax:\nCURRENT_USER, CURRENT_USER()\n\nReturns the user name and host name combination for the MySQL account\nthat the server used to authenticate the current client. This account\ndetermines your access privileges. The return value is a string in the\nutf8 character set.\n\nThe value of CURRENT_USER() can differ from the value of USER().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT USER();\n        -> \'davida@localhost\'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user \'\'@\'localhost\' to\ndatabase \'mysql\'\nmysql> SELECT CURRENT_USER();\n        -> \'@localhost\'\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(270,'DATABASE',19,'Syntax:\nDATABASE()\n\nReturns the default (current) database name as a string in the utf8\ncharacter set. If there is no default database, DATABASE() returns\nNULL. Within a stored routine, the default database is the database\nthat the routine is associated with, which is not necessarily the same\nas the database that is the default in the calling context.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT DATABASE();\n        -> \'test\'\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(271,'FOUND_ROWS',19,'Syntax:\nFOUND_ROWS()\n\nA SELECT statement may include a LIMIT clause to restrict the number of\nrows the server returns to the client. In some cases, it is desirable\nto know how many rows the statement would have returned without the\nLIMIT, but without running the statement again. To obtain this row\ncount, include an SQL_CALC_FOUND_ROWS option in the SELECT statement,\nand then invoke FOUND_ROWS() afterward:\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n    -> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(272,'LAST_INSERT_ID',19,'Syntax:\nLAST_INSERT_ID(), LAST_INSERT_ID(expr)\n\nWith no argument, LAST_INSERT_ID() returns a BIGINT UNSIGNED (64-bit)\nvalue representing the first automatically generated value successfully\ninserted for an AUTO_INCREMENT column as a result of the most recently\nexecuted INSERT statement. The value of LAST_INSERT_ID() remains\nunchanged if no rows are successfully inserted.\n\nWith an argument, LAST_INSERT_ID() returns an unsigned integer.\n\nFor example, after inserting a row that generates an AUTO_INCREMENT\nvalue, you can get the value like this:\n\nmysql> SELECT LAST_INSERT_ID();\n        -> 195\n\nThe currently executing statement does not affect the value of\nLAST_INSERT_ID(). Suppose that you generate an AUTO_INCREMENT value\nwith one statement, and then refer to LAST_INSERT_ID() in a\nmultiple-row INSERT statement that inserts rows into a table with its\nown AUTO_INCREMENT column. The value of LAST_INSERT_ID() will remain\nstable in the second statement; its value for the second and later rows\nis not affected by the earlier row insertions. (However, if you mix\nreferences to LAST_INSERT_ID() and LAST_INSERT_ID(expr), the effect is\nundefined.)\n\nIf the previous statement returned an error, the value of\nLAST_INSERT_ID() is undefined. For transactional tables, if the\nstatement is rolled back due to an error, the value of LAST_INSERT_ID()\nis left undefined. For manual ROLLBACK, the value of LAST_INSERT_ID()\nis not restored to that before the transaction; it remains as it was at\nthe point of the ROLLBACK.\n\nWithin the body of a stored routine (procedure or function) or a\ntrigger, the value of LAST_INSERT_ID() changes the same way as for\nstatements executed outside the body of these kinds of objects. The\neffect of a stored routine or trigger upon the value of\nLAST_INSERT_ID() that is seen by following statements depends on the\nkind of routine:\n\no If a stored procedure executes statements that change the value of\n  LAST_INSERT_ID(), the changed value is seen by statements that follow\n  the procedure call.\n\no For stored functions and triggers that change the value, the value is\n  restored when the function or trigger ends, so following statements\n  will not see a changed value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(273,'ROW_COUNT',19,'Syntax:\nROW_COUNT()\n\nROW_COUNT() returns a value as follows:\n\no DDL statements: 0. This applies to statements such as CREATE TABLE or\n  DROP TABLE.\n\no DML statements other than SELECT: The number of affected rows. This\n  applies to statements such as UPDATE, INSERT, or DELETE (as before),\n  but now also to statements such as ALTER TABLE and LOAD DATA.\n\no SELECT: -1 if the statement returns a result set, or the number of\n  rows \"affected\" if it does not. For example, for SELECT * FROM t1,\n  ROW_COUNT() returns -1. For SELECT * FROM t1 INTO OUTFILE\n  \'file_name\', ROW_COUNT() returns the number of rows written to the\n  file.\n\no SIGNAL statements: 0.\n\nFor UPDATE statements, the affected-rows value by default is the number\nof rows actually changed. If you specify the CLIENT_FOUND_ROWS flag to\nmysql_real_connect() when connecting to mysqld, the affected-rows value\nis the number of rows \"found\"; that is, matched by the WHERE clause.\n\nFor REPLACE statements, the affected-rows value is 2 if the new row\nreplaced an old row, because in this case, one row was inserted after\nthe duplicate was deleted.\n\nFor INSERT ... ON DUPLICATE KEY UPDATE statements, the affected-rows\nvalue per row is 1 if the row is inserted as a new row, 2 if an\nexisting row is updated, and 0 if an existing row is set to its current\nvalues. If you specify the CLIENT_FOUND_ROWS flag, the affected-rows\nvalue is 1 (not 0) if an existing row is set to its current values.\n\nThe ROW_COUNT() value is similar to the value from the\nmysql_affected_rows() C API function and the row count that the mysql\nclient displays following statement execution.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           3 |\n+-------------+\n1 row in set (0.00 sec)\n\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\n\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n|           2 |\n+-------------+\n1 row in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(274,'SCHEMA',19,'Syntax:\nSCHEMA()\n\nThis function is a synonym for DATABASE().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(275,'SESSION_USER',19,'Syntax:\nSESSION_USER()\n\nSESSION_USER() is a synonym for USER().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(276,'SYSTEM_USER',19,'Syntax:\nSYSTEM_USER()\n\nSYSTEM_USER() is a synonym for USER().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(277,'USER',19,'Syntax:\nUSER()\n\nReturns the current MySQL user name and host name as a string in the\nutf8 character set.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT USER();\n        -> \'davida@localhost\'\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(278,'VERSION',19,'Syntax:\nVERSION()\n\nReturns a string that indicates the MySQL server version. The string\nuses the utf8 character set. The value might have a suffix in addition\nto the version number. See the description of the version system\nvariable in\nhttps://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/information-functions.html\n\n','mysql> SELECT VERSION();\n        -> \'5.7.30-standard\'\n','https://dev.mysql.com/doc/refman/5.7/en/information-functions.html'),(279,'GEOMCOLLFROMTEXT',21,'GeomCollFromText(wkt[, srid]), GeometryCollectionFromText(wkt[, srid])\n\nST_GeomCollFromText(), ST_GeometryCollectionFromText(),\nST_GeomCollFromTxt(), GeomCollFromText(), and\nGeometryCollectionFromText() are synonyms. For more information, see\nthe description of ST_GeomCollFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(280,'GEOMFROMTEXT',21,'GeomFromText(wkt[, srid]), GeometryFromText(wkt[, srid])\n\nST_GeomFromText(), ST_GeometryFromText(), GeomFromText(), and\nGeometryFromText() are synonyms. For more information, see the\ndescription of ST_GeomFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(281,'LINEFROMTEXT',21,'LineFromText(wkt[, srid]), LineStringFromText(wkt[, srid])\n\nST_LineFromText(), ST_LineStringFromText(), LineFromText(), and\nLineStringFromText() are synonyms. For more information, see the\ndescription of ST_LineFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(282,'MLINEFROMTEXT',21,'MLineFromText(wkt[, srid]), MultiLineStringFromText(wkt[, srid])\n\nST_MLineFromText(), ST_MultiLineStringFromText(), MLineFromText(), and\nMultiLineStringFromText() are synonyms. For more information, see the\ndescription of ST_MLineFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(283,'MPOINTFROMTEXT',21,'MPointFromText(wkt[, srid]), MultiPointFromText(wkt[, srid])\n\nST_MPointFromText(), ST_MultiPointFromText(), MPointFromText(), and\nMultiPointFromText() are synonyms. For more information, see the\ndescription of ST_MPointFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(284,'MPOLYFROMTEXT',21,'MPolyFromText(wkt[, srid]), MultiPolygonFromText(wkt[, srid])\n\nST_MPolyFromText(), ST_MultiPolygonFromText(), MPolyFromText(), and\nMultiPolygonFromText() are synonyms. For more information, see the\ndescription of ST_MPolyFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(285,'POINTFROMTEXT',21,'PointFromText(wkt[, srid])\n\nST_PointFromText() and PointFromText() are synonyms. For more\ninformation, see the description of ST_PointFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(286,'POLYFROMTEXT',21,'PolyFromText(wkt[, srid]), PolygonFromText(wkt[, srid])\n\nST_PolyFromText(), ST_PolygonFromText(), PolyFromText(), and\nPolygonFromText() are synonyms. For more information, see the\ndescription of ST_PolyFromText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(287,'ST_GEOMCOLLFROMTEXT',21,'ST_GeomCollFromText(wkt[, srid]), ST_GeometryCollectionFromText(wkt[,\nsrid]), ST_GeomCollFromTxt(wkt[, srid])\n\nConstructs a GeometryCollection value using its WKT representation and\nSRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g))         |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(288,'ST_GEOMFROMTEXT',21,'ST_GeomFromText(wkt[, srid]), ST_GeometryFromText(wkt[, srid])\n\nConstructs a geometry value of any type using its WKT representation\nand SRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(289,'ST_LINEFROMTEXT',21,'ST_LineFromText(wkt[, srid]), ST_LineStringFromText(wkt[, srid])\n\nConstructs a LineString value using its WKT representation and SRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(290,'ST_MLINEFROMTEXT',21,'ST_MLineFromText(wkt[, srid]), ST_MultiLineStringFromText(wkt[, srid])\n\nConstructs a MultiLineString value using its WKT representation and\nSRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(291,'ST_MPOINTFROMTEXT',21,'ST_MPointFromText(wkt[, srid]), ST_MultiPointFromText(wkt[, srid])\n\nConstructs a MultiPoint value using its WKT representation and SRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nAs of MySQL 5.7.9, spatial functions such as ST_MPointFromText() and\nST_GeomFromText() that accept WKT-format representations of MultiPoint\nvalues permit individual points within values to be surrounded by\nparentheses. For example, both of the following function calls are\nvalid, whereas before MySQL 5.7.9 the second one produces an error:\n\nST_MPointFromText(\'MULTIPOINT (1 1, 2 2, 3 3)\')\nST_MPointFromText(\'MULTIPOINT ((1 1), (2 2), (3 3))\')\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(292,'ST_MPOLYFROMTEXT',21,'ST_MPolyFromText(wkt[, srid]), ST_MultiPolygonFromText(wkt[, srid])\n\nConstructs a MultiPolygon value using its WKT representation and SRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(293,'ST_POINTFROMTEXT',21,'ST_PointFromText(wkt[, srid])\n\nConstructs a Point value using its WKT representation and SRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(294,'ST_POLYFROMTEXT',21,'ST_PolyFromText(wkt[, srid]), ST_PolygonFromText(wkt[, srid])\n\nConstructs a Polygon value using its WKT representation and SRID.\n\nIf the geometry argument is NULL or not a syntactically well-formed\ngeometry, or if the SRID argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkt-functions.html'),(295,'GEOMCOLLFROMWKB',22,'GeomCollFromWKB(wkb[, srid]), GeometryCollectionFromWKB(wkb[, srid])\n\nST_GeomCollFromWKB(), ST_GeometryCollectionFromWKB(),\nGeomCollFromWKB(), and GeometryCollectionFromWKB() are synonyms. For\nmore information, see the description of ST_GeomCollFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(296,'GEOMFROMWKB',22,'GeomFromWKB(wkb[, srid]), GeometryFromWKB(wkb[, srid])\n\nST_GeomFromWKB(), ST_GeometryFromWKB(), GeomFromWKB(), and\nGeometryFromWKB() are synonyms. For more information, see the\ndescription of ST_GeomFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(297,'LINEFROMWKB',22,'LineFromWKB(wkb[, srid]), LineStringFromWKB(wkb[, srid])\n\nST_LineFromWKB(), ST_LineStringFromWKB(), LineFromWKB(), and\nLineStringFromWKB() are synonyms. For more information, see the\ndescription of ST_LineFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(298,'MLINEFROMWKB',22,'MLineFromWKB(wkb[, srid]), MultiLineStringFromWKB(wkb[, srid])\n\nST_MLineFromWKB(), ST_MultiLineStringFromWKB(), MLineFromWKB(), and\nMultiLineStringFromWKB() are synonyms. For more information, see the\ndescription of ST_MLineFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(299,'MPOINTFROMWKB',22,'MPointFromWKB(wkb[, srid]), MultiPointFromWKB(wkb[, srid])\n\nST_MPointFromWKB(), ST_MultiPointFromWKB(), MPointFromWKB(), and\nMultiPointFromWKB() are synonyms. For more information, see the\ndescription of ST_MPointFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(300,'MPOLYFROMWKB',22,'MPolyFromWKB(wkb[, srid]), MultiPolygonFromWKB(wkb[, srid])\n\nST_MPolyFromWKB(), ST_MultiPolygonFromWKB(), MPolyFromWKB(), and\nMultiPolygonFromWKB() are synonyms. For more information, see the\ndescription of ST_MPolyFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(301,'POINTFROMWKB',22,'PointFromWKB(wkb[, srid])\n\nST_PointFromWKB() and PointFromWKB() are synonyms. For more\ninformation, see the description of ST_PointFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(302,'POLYFROMWKB',22,'PolyFromWKB(wkb[, srid]), PolygonFromWKB(wkb[, srid])\n\nST_PolyFromWKB(), ST_PolygonFromWKB(), PolyFromWKB(), and\nPolygonFromWKB() are synonyms. For more information, see the\ndescription of ST_PolyFromWKB().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(303,'ST_GEOMCOLLFROMWKB',22,'ST_GeomCollFromWKB(wkb[, srid]), ST_GeometryCollectionFromWKB(wkb[,\nsrid])\n\nConstructs a GeometryCollection value using its WKB representation and\nSRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(304,'ST_GEOMFROMWKB',22,'ST_GeomFromWKB(wkb[, srid]), ST_GeometryFromWKB(wkb[, srid])\n\nConstructs a geometry value of any type using its WKB representation\nand SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(305,'ST_LINEFROMWKB',22,'ST_LineFromWKB(wkb[, srid]), ST_LineStringFromWKB(wkb[, srid])\n\nConstructs a LineString value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(306,'ST_MLINEFROMWKB',22,'ST_MLineFromWKB(wkb[, srid]), ST_MultiLineStringFromWKB(wkb[, srid])\n\nConstructs a MultiLineString value using its WKB representation and\nSRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(307,'ST_MPOINTFROMWKB',22,'ST_MPointFromWKB(wkb[, srid]), ST_MultiPointFromWKB(wkb[, srid])\n\nConstructs a MultiPoint value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(308,'ST_MPOLYFROMWKB',22,'ST_MPolyFromWKB(wkb[, srid]), ST_MultiPolygonFromWKB(wkb[, srid])\n\nConstructs a MultiPolygon value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(309,'ST_POINTFROMWKB',22,'ST_PointFromWKB(wkb[, srid])\n\nConstructs a Point value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(310,'ST_POLYFROMWKB',22,'ST_PolyFromWKB(wkb[, srid]), ST_PolygonFromWKB(wkb[, srid])\n\nConstructs a Polygon value using its WKB representation and SRID.\n\nThe result is NULL if the WKB or SRID argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-wkb-functions.html'),(311,'GEOMETRYCOLLECTION',23,'GeometryCollection(g [, g] ...)\n\nConstructs a GeometryCollection value from the geometry arguments.\n\nGeometryCollection() returns all the proper geometries contained in the\narguments even if a nonsupported geometry is present.\n\nGeometryCollection() with no arguments is permitted as a way to create\nan empty geometry.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html'),(312,'LINESTRING',23,'LineString(pt [, pt] ...)\n\nConstructs a LineString value from a number of Point or WKB Point\narguments. If the number of arguments is less than two, the return\nvalue is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html'),(313,'MULTILINESTRING',23,'MultiLineString(ls [, ls] ...)\n\nConstructs a MultiLineString value using LineString or WKB LineString\narguments.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html'),(314,'MULTIPOINT',23,'MultiPoint(pt [, pt2] ...)\n\nConstructs a MultiPoint value using Point or WKB Point arguments.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html'),(315,'MULTIPOLYGON',23,'MultiPolygon(poly [, poly] ...)\n\nConstructs a MultiPolygon value from a set of Polygon or WKB Polygon\narguments.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html'),(316,'POINT',23,'Point(x, y)\n\nConstructs a Point using its coordinates.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html'),(317,'POLYGON',23,'Polygon(ls [, ls] ...)\n\nConstructs a Polygon value from a number of LineString or WKB\nLineString arguments. If any argument does not represent a LinearRing\n(that is, not a closed and simple LineString), the return value is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-mysql-specific-functions.html'),(318,'ASBINARY',22,'AsBinary(g), AsWKB(g)\n\nST_AsBinary(), ST_AsWKB(), AsBinary(), and AsWKB() are synonyms. For\nmore information, see the description of ST_AsBinary().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html'),(319,'ASTEXT',22,'AsText(g), AsWKT(g)\n\nST_AsText(), ST_AsWKT(), AsText(), and AsWKT() are synonyms. For more\ninformation, see the description of ST_AsText().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html'),(320,'ST_ASBINARY',22,'ST_AsBinary(g), ST_AsWKB(g)\n\nConverts a value in internal geometry format to its WKB representation\nand returns the binary result.\n\nIf the argument is NULL, the return value is NULL. If the argument is\nnot a syntactically well-formed geometry, an ER_GIS_INVALID_DATA error\noccurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html\n\n','SELECT ST_AsBinary(g) FROM geom;\n','https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html'),(321,'ST_ASTEXT',22,'ST_AsText(g), ST_AsWKT(g)\n\nConverts a value in internal geometry format to its WKT representation\nand returns the string result.\n\nIf the argument is NULL, the return value is NULL. If the argument is\nnot a syntactically well-formed geometry, an ER_GIS_INVALID_DATA error\noccurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html\n\n','mysql> SET @g = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3)        |\n+--------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-format-conversion-functions.html'),(322,'DIMENSION',24,'Dimension(g)\n\nST_Dimension() and Dimension() are synonyms. For more information, see\nthe description of ST_Dimension().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(323,'ENVELOPE',24,'Envelope(g)\n\nST_Envelope() and Envelope() are synonyms. For more information, see\nthe description of ST_Envelope().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(324,'GEOMETRYTYPE',24,'GeometryType(g)\n\nST_GeometryType() and GeometryType() are synonyms. For more\ninformation, see the description of ST_GeometryType().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(325,'ISEMPTY',24,'IsEmpty(g)\n\nST_IsEmpty() and IsEmpty() are synonyms. For more information, see the\ndescription of ST_IsEmpty().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(326,'ISSIMPLE',24,'IsSimple(g)\n\nST_IsSimple() and IsSimple() are synonyms. For more information, see\nthe description of ST_IsSimple().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(327,'SRID',24,'SRID(g)\n\nST_SRID() and SRID() are synonyms. For more information, see the\ndescription of ST_SRID().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(328,'ST_DIMENSION',24,'ST_Dimension(g)\n\nReturns the inherent dimension of the geometry value g, or NULL if the\nargument is NULL. The dimension can be −1, 0, 1, or 2. The meaning of\nthese values is given in\nhttps://dev.mysql.com/doc/refman/5.7/en/gis-class-geometry.html.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','mysql> SELECT ST_Dimension(ST_GeomFromText(\'LineString(1 1,2 2)\'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText(\'LineString(1 1,2 2)\')) |\n+------------------------------------------------------+\n|                                                    1 |\n+------------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(329,'ST_ENVELOPE',24,'ST_Envelope(g)\n\nReturns the minimum bounding rectangle (MBR) for the geometry value g,\nor NULL if the argument is NULL. The result is returned as a Polygon\nvalue that is defined by the corner points of the bounding box:\n\nPOLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n\nmysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText(\'LineString(1 1,2 2)\')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText(\'LineString(1 1,2 2)\'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                                 |\n+----------------------------------------------------------------+\n\nAs of MySQL 5.7.6, if the argument is a point or a vertical or\nhorizontal line segment, ST_Envelope() returns the point or the line\nsegment as its MBR rather than returning an invalid polygon:\n\nmysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText(\'LineString(1 1,1 2)\')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText(\'LineString(1 1,1 2)\'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2)                                            |\n+----------------------------------------------------------------+\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(330,'ST_GEOMETRYTYPE',24,'ST_GeometryType(g)\n\nReturns a binary string indicating the name of the geometry type of\nwhich the geometry instance g is a member, or NULL if the argument is\nNULL. The name corresponds to one of the instantiable Geometry\nsubclasses.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','mysql> SELECT ST_GeometryType(ST_GeomFromText(\'POINT(1 1)\'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText(\'POINT(1 1)\')) |\n+------------------------------------------------+\n| POINT                                          |\n+------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(331,'ST_ISEMPTY',24,'ST_IsEmpty(g)\n\nThis function is a placeholder that returns 0 for any valid geometry\nvalue, 1 for any invalid geometry value, or NULL if the argument is\nNULL.\n\nMySQL does not support GIS EMPTY values such as POINT EMPTY.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(332,'ST_ISSIMPLE',24,'ST_IsSimple(g)\n\nReturns 1 if the geometry value g has no anomalous geometric points,\nsuch as self-intersection or self-tangency. ST_IsSimple() returns 0 if\nthe argument is not simple, and NULL if the argument is NULL.\n\nThe descriptions of the instantiable geometric classes given under\nhttps://dev.mysql.com/doc/refman/5.7/en/opengis-geometry-model.html\nincludes the specific conditions that cause class instances to be\nclassified as not simple.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(333,'ST_SRID',24,'ST_SRID(g)\n\nReturns an integer indicating the spatial reference system ID\nassociated with the geometry value g, or NULL if the argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html\n\n','mysql> SELECT ST_SRID(ST_GeomFromText(\'LineString(1 1,2 2)\',101));\n+-----------------------------------------------------+\n| ST_SRID(ST_GeomFromText(\'LineString(1 1,2 2)\',101)) |\n+-----------------------------------------------------+\n|                                                 101 |\n+-----------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-general-property-functions.html'),(334,'ST_X',25,'ST_X(p)\n\nReturns the X-coordinate value for the Point object p as a\ndouble-precision number.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html\n\n','mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n|                     56.7 |\n+--------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html'),(335,'ST_Y',25,'ST_Y(p)\n\nReturns the Y-coordinate value for the Point object p as a\ndouble-precision number.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html\n\n','mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n|                    53.34 |\n+--------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html'),(336,'X',25,'X(p)\n\nST_X() and X() are synonyms. For more information, see the description\nof ST_X().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html'),(337,'Y',25,'Y(p)\n\nST_Y() and Y() are synonyms. For more information, see the description\nof ST_Y().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-point-property-functions.html'),(338,'ENDPOINT',26,'EndPoint(ls)\n\nST_EndPoint() and EndPoint() are synonyms. For more information, see\nthe description of ST_EndPoint().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(339,'GLENGTH',26,'GLength(ls)\n\nGLength() is a nonstandard name. It corresponds to the OpenGIS\nST_Length() function. (There is an existing SQL function Length() that\ncalculates the length of string values.)\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(340,'ISCLOSED',26,'IsClosed(ls)\n\nST_IsClosed() and IsClosed() are synonyms. For more information, see\nthe description of ST_IsClosed().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(341,'NUMPOINTS',26,'NumPoints(ls)\n\nST_NumPoints() and NumPoints() are synonyms. For more information, see\nthe description of ST_NumPoints().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(342,'POINTN',26,'PointN(ls, N)\n\nST_PointN() and PointN() are synonyms. For more information, see the\ndescription of ST_PointN().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(343,'ST_ENDPOINT',26,'ST_EndPoint(ls)\n\nReturns the Point that is the endpoint of the LineString value ls. If\nthe argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3)                                   |\n+----------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(344,'ST_ISCLOSED',26,'ST_IsClosed(ls)\n\nFor a LineString value ls, ST_IsClosed() returns 1 if ls is closed\n(that is, its ST_StartPoint() and ST_EndPoint() values are the same).\nIf the argument is NULL or an empty geometry, the return value is NULL.\n\nFor a MultiLineString value ls, ST_IsClosed() returns 1 if ls is closed\n(that is, the ST_StartPoint() and ST_EndPoint() values are the same for\neach LineString in ls).\n\nST_IsClosed() returns 0 if ls is not closed.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','mysql> SET @ls1 = \'LineString(1 1,2 2,3 3,2 2)\';\nmysql> SET @ls2 = \'LineString(1 1,2 2,3 3,1 1)\';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n|                                  1 |\n+------------------------------------+\n\nmysql> SET @ls3 = \'MultiLineString((1 1,2 2,3 3),(4 4,5 5))\';\n\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n|                                  0 |\n+------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(345,'ST_LENGTH',26,'ST_Length(ls)\n\nReturns a double-precision number indicating the length of the\nLineString or MultiLineString value ls in its associated spatial\nreference system. The length of a MultiLineString value is equal to the\nsum of the lengths of its elements. If the argument is NULL or an empty\ngeometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_Length(ST_GeomFromText(@ls));\n+---------------------------------+\n| ST_Length(ST_GeomFromText(@ls)) |\n+---------------------------------+\n|              2.8284271247461903 |\n+---------------------------------+\n\nmysql> SET @mls = \'MultiLineString((1 1,2 2,3 3),(4 4,5 5))\';\nmysql> SELECT ST_Length(ST_GeomFromText(@mls));\n+----------------------------------+\n| ST_Length(ST_GeomFromText(@mls)) |\n+----------------------------------+\n|                4.242640687119286 |\n+----------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(346,'ST_NUMPOINTS',26,'ST_NumPoints(ls)\n\nReturns the number of Point objects in the LineString value ls. If the\nargument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n|                                  3 |\n+------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(347,'ST_POINTN',26,'ST_PointN(ls, N)\n\nReturns the N-th Point in the Linestring value ls. Points are numbered\nbeginning with 1. If any argument is NULL or the geometry argument is\nan empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2)                                   |\n+----------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(348,'ST_STARTPOINT',26,'ST_StartPoint(ls)\n\nReturns the Point that is the start point of the LineString value ls.\nIf the argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','mysql> SET @ls = \'LineString(1 1,2 2,3 3)\';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1)                                     |\n+------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(349,'STARTPOINT',26,'StartPoint(ls)\n\nST_StartPoint() and StartPoint() are synonyms. For more information,\nsee the description of ST_StartPoint().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-linestring-property-functions.html'),(350,'AREA',27,'Area({poly|mpoly})\n\nST_Area() and Area() are synonyms. For more information, see the\ndescription of ST_Area().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(351,'CENTROID',27,'Centroid({poly|mpoly})\n\nST_Centroid() and Centroid() are synonyms. For more information, see\nthe description of ST_Centroid().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(352,'EXTERIORRING',27,'ExteriorRing(poly)\n\nST_ExteriorRing() and ExteriorRing() are synonyms. For more\ninformation, see the description of ST_ExteriorRing().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(353,'INTERIORRINGN',27,'InteriorRingN(poly, N)\n\nST_InteriorRingN() and InteriorRingN() are synonyms. For more\ninformation, see the description of ST_InteriorRingN().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(354,'NUMINTERIORRINGS',27,'NumInteriorRings(poly)\n\nST_NumInteriorRings() and NumInteriorRings() are synonyms. For more\ninformation, see the description of ST_NumInteriorRings().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(355,'ST_AREA',27,'ST_Area({poly|mpoly})\n\nReturns a double-precision number indicating the area of the Polygon or\nMultiPolygon argument, as measured in its spatial reference system. For\narguments of dimension 0 or 1, the result is 0. If the argument is an\nempty geometry the return value is 0. If the argument is NULL the\nreturn value is NULL.\n\nThe result is the sum of the area values of all components for a\ngeometry collection. If a geometry collection is empty, its area is\nreturned as 0.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))\';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n|                               4 |\n+---------------------------------+\n\nmysql> SET @mpoly =\n       \'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))\';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n|                                8 |\n+----------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(356,'ST_CENTROID',27,'ST_Centroid({poly|mpoly})\n\nReturns the mathematical centroid for the Polygon or MultiPolygon\nargument as a Point. The result is not guaranteed to be on the\nMultiPolygon. If the argument is NULL or an empty geometry, the return\nvalue is NULL.\n\nThis function processes geometry collections by computing the centroid\npoint for components of highest dimension in the collection. Such\ncomponents are extracted and made into a single MultiPolygon,\nMultiLineString, or MultiPoint for centroid computation. If the\nargument is an empty geometry collection, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','mysql> SET @poly =\n       ST_GeomFromText(\'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))\');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly))              |\n+------------------------+--------------------------------------------+\n| POLYGON                | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(357,'ST_EXTERIORRING',27,'ST_ExteriorRing(poly)\n\nReturns the exterior ring of the Polygon value poly as a LineString. If\nthe argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))\';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                    |\n+----------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(358,'ST_INTERIORRINGN',27,'ST_InteriorRingN(poly, N)\n\nReturns the N-th interior ring for the Polygon value poly as a\nLineString. Rings are numbered beginning with 1. If the argument is\nNULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))\';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                       |\n+-------------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(359,'ST_NUMINTERIORRINGS',27,'ST_NumInteriorRing(poly), ST_NumInteriorRings(poly)\n\nReturns the number of interior rings in the Polygon value poly. If the\nargument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html\n\n','mysql> SET @poly =\n       \'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))\';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-polygon-property-functions.html'),(360,'GEOMETRYN',28,'GeometryN(gc, N)\n\nST_GeometryN() and GeometryN() are synonyms. For more information, see\nthe description of ST_GeometryN().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html'),(361,'NUMGEOMETRIES',28,'NumGeometries(gc)\n\nST_NumGeometries() and NumGeometries() are synonyms. For more\ninformation, see the description of ST_NumGeometries().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html'),(362,'ST_GEOMETRYN',28,'ST_GeometryN(gc, N)\n\nReturns the N-th geometry in the GeometryCollection value gc.\nGeometries are numbered beginning with 1. If any argument is NULL or\nthe geometry argument is an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html\n\n','mysql> SET @gc = \'GeometryCollection(Point(1 1),LineString(2 2, 3 3))\';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1)                                      |\n+-------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html'),(363,'ST_NUMGEOMETRIES',28,'ST_NumGeometries(gc)\n\nReturns the number of geometries in the GeometryCollection value gc. If\nthe argument is NULL or an empty geometry, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html\n\n','mysql> SET @gc = \'GeometryCollection(Point(1 1),LineString(2 2, 3 3))\';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n|                                      2 |\n+----------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/gis-geometrycollection-property-functions.html'),(364,'BUFFER',28,'Buffer(g, d[, strategy1[, strategy2[, strategy3]]])\n\nST_Buffer() and Buffer() are synonyms. For more information, see the\ndescription of ST_Buffer().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(365,'CONVEXHULL',28,'ConvexHull(g)\n\nST_ConvexHull() and ConvexHull() are synonyms. For more information,\nsee the description of ST_ConvexHull().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(366,'ST_BUFFER',28,'ST_Buffer(g, d[, strategy1[, strategy2[, strategy3]]])\n\nReturns a geometry that represents all points whose distance from the\ngeometry value g is less than or equal to a distance of d, or NULL if\nany argument is NULL. The SRID of the geometry argument must be 0\nbecause ST_Buffer() supports only the Cartesian coordinate system. If\nany geometry argument is not a syntactically well-formed geometry, an\nER_GIS_INVALID_DATA error occurs.\n\nIf the geometry argument is empty, ST_Buffer() returns an empty\ngeometry.\n\nIf the distance is 0, ST_Buffer() returns the geometry argument\nunchanged:\n\nmysql> SET @pt = ST_GeomFromText(\'POINT(0 0)\');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0)                   |\n+------------------------------+\n\nST_Buffer() supports negative distances for Polygon and MultiPolygon\nvalues, and for geometry collections containing Polygon or MultiPolygon\nvalues. The result may be an empty geometry. An ER_WRONG_ARGUMENTS\nerror occurs for ST_Buffer() with a negative distance for Point,\nMultiPoint, LineString, and MultiLineString values, and for geometry\ncollections not containing any Polygon or MultiPolygon values.\n\nAs of MySQL 5.7.7, ST_Buffer() permits up to three optional strategy\narguments following the distance argument. Strategies influence buffer\ncomputation. These arguments are byte string values produced by the\nST_Buffer_Strategy() function, to be used for point, join, and end\nstrategies:\n\no Point strategies apply to Point and MultiPoint geometries. If no\n  point strategy is specified, the default is\n  ST_Buffer_Strategy(\'point_circle\', 32).\n\no Join strategies apply to LineString, MultiLineString, Polygon, and\n  MultiPolygon geometries. If no join strategy is specified, the\n  default is ST_Buffer_Strategy(\'join_round\', 32).\n\no End strategies apply to LineString and MultiLineString geometries. If\n  no end strategy is specified, the default is\n  ST_Buffer_Strategy(\'end_round\', 32).\n\nUp to one strategy of each type may be specified, and they may be given\nin any order. If multiple strategies of a given type are specified, an\nER_WRONG_ARGUMENTS error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','mysql> SET @pt = ST_GeomFromText(\'POINT(0 0)\');\nmysql> SET @pt_strategy = ST_Buffer_Strategy(\'point_square\');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2))       |\n+--------------------------------------------+\n\nmysql> SET @ls = ST_GeomFromText(\'LINESTRING(0 0,0 5,5 5)\');\nmysql> SET @end_strategy = ST_Buffer_Strategy(\'end_flat\');\nmysql> SET @join_strategy = ST_Buffer_Strategy(\'join_round\', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))   |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5))                                       |\n+---------------------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(367,'ST_BUFFER_STRATEGY',28,'ST_Buffer_Strategy(strategy[, points_per_circle])\n\nThis function returns a strategy byte string for use with ST_Buffer()\nto influence buffer computation. If any argument is NULL, the return\nvalue is NULL. If any argument is invalid, an ER_WRONG_ARGUMENTS error\noccurs.\n\nInformation about strategies is available at Boost.org\n(http://www.boost.org).\n\nThe first argument must be a string indicating a strategy option:\n\no For point strategies, permitted values are \'point_circle\' and\n  \'point_square\'.\n\no For join strategies, permitted values are \'join_round\' and\n  \'join_miter\'.\n\no For end strategies, permitted values are \'end_round\' and \'end_flat\'.\n\nIf the first argument is \'point_circle\', \'join_round\', \'join_miter\', or\n\'end_round\', the points_per_circle argument must be given as a positive\nnumeric value. The maximum points_per_circle value is the value of the\nmax_points_in_geometry system variable as of MySQL 5.7.8, 65,536 before\nthat. If the first argument is \'point_square\' or \'end_flat\', the\npoints_per_circle argument must not be given or an ER_WRONG_ARGUMENTS\nerror occurs.\n\nFor examples, see the description of ST_Buffer().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(368,'ST_CONVEXHULL',28,'ST_ConvexHull(g)\n\nReturns a geometry that represents the convex hull of the geometry\nvalue g. If the argument is NULL, the return value is NULL.\n\nThis function computes a geometry\'s convex hull by first checking\nwhether its vertex points are colinear. The function returns a linear\nhull if so, a polygon hull otherwise. This function processes geometry\ncollections by extracting all vertex points of all components of the\ncollection, creating a MultiPoint value from them, and computing its\nconvex hull. If the argument is an empty geometry collection, the\nreturn value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','mysql> SET @g = \'MULTIPOINT(5 0,25 0,15 10,15 25)\';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0))                 |\n+-----------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(369,'ST_DIFFERENCE',28,'ST_Difference(g1, g2)\n\nReturns a geometry that represents the point set difference of the\ngeometry values g1 and g2. If any argument is NULL, the return value is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1)                         |\n+------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(370,'ST_INTERSECTION',28,'ST_Intersection(g1, g2)\n\nReturns a geometry that represents the point set intersection of the\ngeometry values g1 and g2. If any argument is NULL, the return value is\nNULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'LineString(1 1, 3 3)\');\nmysql> SET @g2 = ST_GeomFromText(\'LineString(1 3, 3 1)\');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2)                           |\n+--------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(371,'ST_SYMDIFFERENCE',28,'ST_SymDifference(g1, g2)\n\nReturns a geometry that represents the point set symmetric difference\nof the geometry values g1 and g2, which is defined as:\n\ng1 symdifference g2 := (g1 union g2) difference (g1 intersection g2)\n\nOr, in function call notation:\n\nST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))\n\nIf any argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(2 2))               |\n+---------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(372,'ST_UNION',28,'ST_Union(g1, g2)\n\nReturns a geometry that represents the point set union of the geometry\nvalues g1 and g2. If any argument is NULL, the return value is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'LineString(1 1, 3 3)\');\nmysql> SET @g2 = ST_GeomFromText(\'LineString(1 3, 3 1)\');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2))        |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-operator-functions.html'),(373,'CROSSES',29,'Crosses(g1, g2)\n\nST_Crosses() and Crosses() are synonyms. For more information, see the\ndescription of ST_Crosses().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(374,'DISTANCE',29,'Distance(g1, g2)\n\nST_Distance() and Distance() are synonyms. For more information, see\nthe description of ST_Distance().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(375,'ST_CONTAINS',29,'ST_Contains(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 completely contains g2. This\ntests the opposite relationship as ST_Within().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(376,'ST_CROSSES',29,'ST_Crosses(g1, g2)\n\nThe term spatially crosses denotes a spatial relation between two given\ngeometries that has the following properties:\n\no The two geometries intersect.\n\no Their intersection results in a geometry that has a dimension that is\n  one less than the maximum dimension of the two given geometries.\n\no Their intersection is not equal to either of the two given\n  geometries.\n\nThis function returns 1 or 0 to indicate whether g1 spatially crosses\ng2. If g1 is a Polygon or a MultiPolygon, or if g2 is a Point or a\nMultiPoint, the return value is NULL.\n\nThis function returns 0 if called with an inapplicable geometry\nargument type combination. For example, it returns 0 if the first\nargument is a Polygon or MultiPolygon and/or the second argument is a\nPoint or MultiPoint.\n\nReturns 1 if g1 spatially crosses g2. Returns NULL if g1 is a Polygon\nor a MultiPolygon, or if g2 is a Point or a MultiPoint. Otherwise,\nreturns 0.\n\nThis function returns 0 if called with an inapplicable geometry\nargument type combination. For example, it returns 0 if the first\nargument is a Polygon or MultiPolygon and/or the second argument is a\nPoint or MultiPoint.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(377,'ST_DISJOINT',29,'ST_Disjoint(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially disjoint from (does\nnot intersect) g2.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(378,'ST_DISTANCE',29,'ST_Distance(g1, g2)\n\nReturns the distance between g1 and g2. If either argument is NULL or\nan empty geometry, the return value is NULL.\n\nThis function processes geometry collections by returning the shortest\ndistance among all combinations of the components of the two geometry\narguments.\n\nIf an intermediate or final result produces NaN or a negative number,\nan ER_GIS_INVALID_DATA error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','mysql> SET @g1 = Point(1,1);\nmysql> SET @g2 = Point(2,2);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n|    1.4142135623730951 |\n+-----------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(379,'ST_EQUALS',29,'ST_Equals(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially equal to g2.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n|                   1 |                   0 |\n+---------------------+---------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(380,'ST_INTERSECTS',29,'ST_Intersects(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 spatially intersects g2.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(381,'ST_OVERLAPS',29,'ST_Overlaps(g1, g2)\n\nTwo geometries spatially overlap if they intersect and their\nintersection results in a geometry of the same dimension but not equal\nto either of the given geometries.\n\nThis function returns 1 or 0 to indicate whether g1 spatially overlaps\ng2.\n\nThis function returns 0 if called with an inapplicable geometry\nargument type combination. For example, it returns 0 if called with\ngeometries of different dimensions or any argument is a Point.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(382,'ST_TOUCHES',29,'ST_Touches(g1, g2)\n\nTwo geometries spatially touch if their interiors do not intersect, but\nthe boundary of one of the geometries intersects either the boundary or\nthe interior of the other.\n\nThis function returns 1 or 0 to indicate whether g1 spatially touches\ng2.\n\nThis function returns 0 if called with an inapplicable geometry\nargument type combination. For example, it returns 0 if either of the\narguments is a Point or MultiPoint.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(383,'ST_WITHIN',29,'ST_Within(g1, g2)\n\nReturns 1 or 0 to indicate whether g1 is spatially within g2. This\ntests the opposite relationship as ST_Contains().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(384,'TOUCHES',29,'Touches(g1, g2)\n\nST_Touches() and Touches() are synonyms. For more information, see the\ndescription of ST_Touches().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-object-shapes.html'),(385,'MBRCONTAINS',30,'MBRContains(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\ncontains the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRWithin().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Point(1 1)\');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n|                    1 |                  1 |\n+----------------------+--------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(386,'MBRCOVEREDBY',30,'MBRCoveredBy(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\nis covered by the minimum bounding rectangle of g2. This tests the\nopposite relationship as MBRCovers().\n\nMBRCoveredBy() handles its arguments as follows:\n\no If either argument is NULL or an empty geometry, the return value is\n  NULL.\n\no If either argument is not a syntactically well-formed geometry byte\n  string, an ER_GIS_INVALID_DATA error occurs.\n\no Otherwise, the return value is non-NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Point(1 1)\');\nmysql> SELECT MBRCovers(@g1,@g2), MBRCoveredby(@g1,@g2);\n+--------------------+-----------------------+\n| MBRCovers(@g1,@g2) | MBRCoveredby(@g1,@g2) |\n+--------------------+-----------------------+\n|                  1 |                     0 |\n+--------------------+-----------------------+\nmysql> SELECT MBRCovers(@g2,@g1), MBRCoveredby(@g2,@g1);\n+--------------------+-----------------------+\n| MBRCovers(@g2,@g1) | MBRCoveredby(@g2,@g1) |\n+--------------------+-----------------------+\n|                  0 |                     1 |\n+--------------------+-----------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(387,'MBRCOVERS',30,'MBRCovers(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\ncovers the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRCoveredBy(). See the description of MBRCoveredBy()\nfor examples.\n\nMBRCovers() handles its arguments as follows:\n\no If either argument is NULL or an empty geometry, the return value is\n  NULL.\n\no If either argument is not a syntactically well-formed geometry byte\n  string, an ER_GIS_INVALID_DATA error occurs.\n\no Otherwise, the return value is non-NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(388,'MBRDISJOINT',30,'MBRDisjoint(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 are disjoint (do not intersect).\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(389,'MBREQUAL',30,'MBREqual(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 are the same.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(390,'MBREQUALS',30,'MBREquals(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 are the same.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(391,'MBRINTERSECTS',30,'MBRIntersects(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of\nthe two geometries g1 and g2 intersect.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(392,'MBROVERLAPS',30,'MBROverlaps(g1, g2)\n\nTwo geometries spatially overlap if they intersect and their\nintersection results in a geometry of the same dimension but not equal\nto either of the given geometries.\n\nThis function returns 1 or 0 to indicate whether the minimum bounding\nrectangles of the two geometries g1 and g2 overlap.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(393,'MBRTOUCHES',30,'MBRTouches(g1, g2)\n\nTwo geometries spatially touch if their interiors do not intersect, but\nthe boundary of one of the geometries intersects either the boundary or\nthe interior of the other.\n\nThis function returns 1 or 0 to indicate whether the minimum bounding\nrectangles of the two geometries g1 and g2 touch.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(394,'MBRWITHIN',30,'MBRWithin(g1, g2)\n\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of g1\nis within the minimum bounding rectangle of g2. This tests the opposite\nrelationship as MBRContains().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','mysql> SET @g1 = ST_GeomFromText(\'Polygon((0 0,0 3,3 3,3 0,0 0))\');\nmysql> SET @g2 = ST_GeomFromText(\'Polygon((0 0,0 5,5 5,5 0,0 0))\');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(395,'CONTAINS',30,'Contains(g1, g2)\n\nMBRContains() and Contains() are synonyms. For more information, see\nthe description of MBRContains().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(396,'DISJOINT',30,'Disjoint(g1, g2)\n\nMBRDisjoint() and Disjoint() are synonyms. For more information, see\nthe description of MBRDisjoint().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(397,'EQUALS',30,'Equals(g1, g2)\n\nMBREquals() and Equals() are synonyms. For more information, see the\ndescription of MBREquals().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(398,'INTERSECTS',30,'Intersects(g1, g2)\n\nMBRIntersects() and Intersects() are synonyms. For more information,\nsee the description of MBRIntersects().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(399,'OVERLAPS',30,'Overlaps(g1, g2)\n\nMBROverlaps() and Overlaps() are synonyms. For more information, see\nthe description of MBROverlaps().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(400,'WITHIN',30,'Within(g1, g2)\n\nMBRWithin() and Within() are synonyms. For more information, see the\ndescription of MBRWithin().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/spatial-relation-functions-mbr.html'),(401,'ST_GEOHASH',30,'ST_GeoHash(longitude, latitude, max_length), ST_GeoHash(point,\nmax_length)\n\nReturns a geohash string in the connection character set and collation.\n\nIf any argument is NULL, the return value is NULL. If any argument is\ninvalid, an error occurs.\n\nFor the first syntax, the longitude must be a number in the range\n[−180, 180], and the latitude must be a number in the range [−90,\n90]. For the second syntax, a POINT value is required, where the X and\nY coordinates are in the valid ranges for longitude and latitude,\nrespectively.\n\nThe resulting string is no longer than max_length characters, which has\nan upper limit of 100. The string might be shorter than max_length\ncharacters because the algorithm that creates the geohash value\ncontinues until it has created a string that is either an exact\nrepresentation of the location or max_length characters, whichever\ncomes first.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html\n\n','mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb           | 000000000000000         |\n+----------------------+-------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html'),(402,'ST_LATFROMGEOHASH',30,'ST_LatFromGeoHash(geohash_str)\n\nReturns the latitude from a geohash string value, as a DOUBLE value in\nthe range [−90, 90].\n\nIf the argument is NULL, the return value is NULL. If the argument is\ninvalid, an error occurs.\n\nThe ST_LatFromGeoHash() decoding function reads no more than 433\ncharacters from the geohash_str argument. That represents the upper\nlimit on information in the internal representation of coordinate\nvalues. Characters past the 433rd are ignored, even if they are\notherwise illegal and produce an error.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html\n\n','mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n|                                      -20 |\n+------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html'),(403,'ST_LONGFROMGEOHASH',30,'ST_LongFromGeoHash(geohash_str)\n\nReturns the longitude from a geohash string value, as a DOUBLE value in\nthe range [−180, 180].\n\nIf the argument is NULL, the return value is NULL. If the argument is\ninvalid, an error occurs.\n\nThe remarks in the description of ST_LatFromGeoHash() regarding the\nmaximum number of characters processed from the geohash_str argument\nalso apply to ST_LongFromGeoHash().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html\n\n','mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n|                                        45 |\n+-------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html'),(404,'ST_POINTFROMGEOHASH',30,'ST_PointFromGeoHash(geohash_str, srid)\n\nReturns a POINT value containing the decoded geohash value, given a\ngeohash string value.\n\nThe X and Y coordinates of the point are the longitude in the range\n[−180, 180] and the latitude in the range [−90, 90], respectively.\n\nIf any argument is NULL, the return value is NULL. If any argument is\ninvalid, an error occurs.\n\nThe srid argument is an unsigned 32-bit integer.\n\nThe remarks in the description of ST_LatFromGeoHash() regarding the\nmaximum number of characters processed from the geohash_str argument\nalso apply to ST_PointFromGeoHash().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html\n\n','mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20)                         |\n+---------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-geohash-functions.html'),(405,'ST_ASGEOJSON',30,'ST_AsGeoJSON(g [, max_dec_digits [, options]])\n\nGenerates a GeoJSON object from the geometry g. The object string has\nthe connection character set and collation.\n\nIf any argument is NULL, the return value is NULL. If any non-NULL\nargument is invalid, an error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-geojson-functions.html\n\n','mysql> SELECT ST_AsGeoJSON(ST_GeomFromText(\'POINT(11.11111 12.22222)\'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText(\'POINT(11.11111 12.22222)\'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]}            |\n+-------------------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-geojson-functions.html'),(406,'ST_GEOMFROMGEOJSON',30,'ST_GeomFromGeoJSON(str [, options [, srid]])\n\nParses a string str representing a GeoJSON object and returns a\ngeometry.\n\nIf any argument is NULL, the return value is NULL. If any non-NULL\nargument is invalid, an error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-geojson-functions.html\n\n','mysql> SET @json = \'{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}\';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(102 0)                         |\n+--------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-geojson-functions.html'),(407,'ST_DISTANCE_SPHERE',30,'ST_Distance_Sphere(g1, g2 [, radius])\n\nReturns the mimimum spherical distance between two points and/or\nmultipoints on a sphere, in meters, or NULL if any geometry argument is\nNULL or empty.\n\nCalculations use a spherical earth and a configurable radius. The\noptional radius argument should be given in meters. If omitted, the\ndefault radius is 6,370,986 meters. An ER_WRONG_ARGUMENTS error occurs\nif the radius argument is present but not positive.\n\nThe geometry arguments should consist of points that specify\n(longitude, latitude) coordinate values:\n\no Longitude and latitude are the first and second coordinates of the\n  point, respectively.\n\no Both coordinates are in degrees.\n\no Longitude values must be in the range (-180, 180]. Positive values\n  are east of the prime meridian.\n\no Latitude values must be in the range [-90, 90]. Positive values are\n  north of the equator.\n\nSupported argument combinations are (Point, Point), (Point,\nMultiPoint), and (MultiPoint, Point). An ER_GIS_UNSUPPORTED_ARGUMENT\nerror occurs for other combinations.\n\nIf any geometry argument is not a syntactically well-formed geometry\nbyte string, an ER_GIS_INVALID_DATA error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html\n\n','mysql> SET @pt1 = ST_GeomFromText(\'POINT(0 0)\');\nmysql> SET @pt2 = ST_GeomFromText(\'POINT(180 0)\');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n|             20015042.813723423 |\n+--------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html'),(408,'ST_ISVALID',30,'ST_IsValid(g)\n\nReturns 1 if the argument is syntactically well-formed and is\ngeometrically valid, 0 if the argument is not syntactically well-formed\nor is not geometrically valid. If the argument is NULL, the return\nvalue is NULL. Geometry validity is defined by the OGC specification.\n\nThe only valid empty geometry is represented in the form of an empty\ngeometry collection value. ST_IsValid() returns 1 in this case.\n\nST_IsValid() works only for the Cartesian coordinate system and\nrequires a geometry argument with an SRID of 0. An ER_WRONG_ARGUMENTS\nerror occurs otherwise.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html\n\n','mysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0,-0.00 0,0.0 0)\');\nmysql> SET @ls2 = ST_GeomFromText(\'LINESTRING(0 0, 1 1)\');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n|                0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n|                1 |\n+------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html'),(409,'ST_MAKEENVELOPE',30,'ST_MakeEnvelope(pt1, pt2)\n\nReturns the rectangle that forms the envelope around two points, as a\nPoint, LineString, or Polygon. If any argument is NULL, the return\nvalue is NULL.\n\nCalculations are done using the Cartesian coordinate system rather than\non a sphere, spheroid, or on earth.\n\nGiven two points pt1 and pt2, ST_MakeEnvelope() creates the result\ngeometry on an abstract plane like this:\n\no If pt1 and pt2 are equal, the result is the point pt1.\n\no Otherwise, if (pt1, pt2) is a vertical or horizontal line segment,\n  the result is the line segment (pt1, pt2).\n\no Otherwise, the result is a polygon using pt1 and pt2 as diagonal\n  points.\n\nThe result geometry has an SRID of 0.\n\nST_MakeEnvelope() requires Point geometry arguments with an SRID of 0.\nAn ER_WRONG_ARGUMENTS error occurs otherwise.\n\nIf any argument is not a syntactically well-formed geometry byte\nstring, or if any coordinate value of the two points is infinite or\nNaN, an ER_GIS_INVALID_DATA error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html\n\n','mysql> SET @pt1 = ST_GeomFromText(\'POINT(0 0)\');\nmysql> SET @pt2 = ST_GeomFromText(\'POINT(1 1)\');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0))         |\n+----------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html'),(410,'ST_SIMPLIFY',30,'ST_Simplify(g, max_distance)\n\nSimplifies a geometry using the Douglas-Peucker algorithm and returns a\nsimplified value of the same type. If any argument is NULL, the return\nvalue is NULL.\n\nThe geometry may be any geometry type, although the Douglas-Peucker\nalgorithm may not actually process every type. A geometry collection is\nprocessed by giving its components one by one to the simplification\nalgorithm, and the returned geometries are put into a geometry\ncollection as result.\n\nThe max_distance argument is the distance (in units of the input\ncoordinates) of a vertex to other segments to be removed. Vertices\nwithin this distance of the simplified linestring are removed. If the\nmax_distance argument is not positive, or is NaN, an ER_WRONG_ARGUMENTS\nerror occurs.\n\nAccording to Boost.Geometry, geometries might become invalid as a\nresult of the simplification process, and the process might create\nself-intersections. To check the validity of the result, pass it to\nST_IsValid().\n\nIf the geometry argument is not a syntactically well-formed geometry\nbyte string, an ER_GIS_INVALID_DATA error occurs.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html\n\n','mysql> SET @g = ST_GeomFromText(\'LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)\');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3)             |\n+---------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html'),(411,'ST_VALIDATE',30,'ST_Validate(g)\n\nValidates a geometry according to the OGC specification. A geometry can\nbe syntactically well-formed (WKB value plus SRID) but geometrically\ninvalid. For example, this polygon is geometrically invalid: POLYGON((0\n0, 0 0, 0 0, 0 0, 0 0))\n\nST_Validate() returns the geometry if it is syntactically well-formed\nand is geometrically valid, NULL if the argument is not syntactically\nwell-formed or is not geometrically valid or is NULL.\n\nST_Validate() can be used to filter out invalid geometry data, although\nat a cost. For applications that require more precise results not\ntainted by invalid data, this penalty may be worthwhile.\n\nIf the geometry argument is valid, it is returned as is, except that if\nan input Polygon or MultiPolygon has clockwise rings, those rings are\nreversed before checking for validity. If the geometry is valid, the\nvalue with the reversed rings is returned.\n\nThe only valid empty geometry is represented in the form of an empty\ngeometry collection value. ST_Validate() returns it directly without\nfurther checks in this case.\n\nST_Validate() works only for the Cartesian coordinate system and\nrequires a geometry argument with an SRID of 0. An ER_WRONG_ARGUMENTS\nerror occurs otherwise.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html\n\n','mysql> SET @ls1 = ST_GeomFromText(\'LINESTRING(0 0)\');\nmysql> SET @ls2 = ST_GeomFromText(\'LINESTRING(0 0, 1 1)\');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL                         |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1)          |\n+------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/spatial-convenience-functions.html'),(412,'JSON_ARRAY',30,'Syntax:\nJSON_ARRAY([val[, val] ...])\n\nEvaluates a (possibly empty) list of values and returns a JSON array\ncontaining those values.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html\n\n','mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"]   |\n+---------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html'),(413,'JSON_OBJECT',30,'Syntax:\nJSON_OBJECT([key, val[, key, val] ...])\n\nEvaluates a (possibly empty) list of key-value pairs and returns a JSON\nobject containing those pairs. An error occurs if any key name is NULL\nor the number of arguments is odd.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html\n\n','mysql> SELECT JSON_OBJECT(\'id\', 87, \'name\', \'carrot\');\n+-----------------------------------------+\n| JSON_OBJECT(\'id\', 87, \'name\', \'carrot\') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"}            |\n+-----------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html'),(414,'JSON_QUOTE',30,'Syntax:\nJSON_QUOTE(string)\n\nQuotes a string as a JSON value by wrapping it with double quote\ncharacters and escaping interior quote and other characters, then\nreturning the result as a utf8mb4 string. Returns NULL if the argument\nis NULL.\n\nThis function is typically used to produce a valid JSON string literal\nfor inclusion within a JSON document.\n\nCertain special characters are escaped with backslashes per the escape\nsequences shown in\nhttps://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.htm\nl#json-unquote-character-escape-sequences.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html\n\n','mysql> SELECT JSON_QUOTE(\'null\'), JSON_QUOTE(\'\"null\"\');\n+--------------------+----------------------+\n| JSON_QUOTE(\'null\') | JSON_QUOTE(\'\"null\"\') |\n+--------------------+----------------------+\n| \"null\"             | \"\\\"null\\\"\"           |\n+--------------------+----------------------+\nmysql> SELECT JSON_QUOTE(\'[1, 2, 3]\');\n+-------------------------+\n| JSON_QUOTE(\'[1, 2, 3]\') |\n+-------------------------+\n| \"[1, 2, 3]\"             |\n+-------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html'),(415,'JSON_CONTAINS',30,'Syntax:\nJSON_CONTAINS(target, candidate[, path])\n\nIndicates by returning 1 or 0 whether a given candidate JSON document\nis contained within a target JSON document, or---if a path argument was\nsupplied---whether the candidate is found at a specific path within the\ntarget. Returns NULL if any argument is NULL, or if the path argument\ndoes not identify a section of the target document. An error occurs if\ntarget or candidate is not a valid JSON document, or if the path\nargument is not a valid path expression or contains a * or ** wildcard.\n\nTo check only whether any data exists at the path, use\nJSON_CONTAINS_PATH() instead.\n\nThe following rules define containment:\n\no A candidate scalar is contained in a target scalar if and only if\n  they are comparable and are equal. Two scalar values are comparable\n  if they have the same JSON_TYPE() types, with the exception that\n  values of types INTEGER and DECIMAL are also comparable to each\n  other.\n\no A candidate array is contained in a target array if and only if every\n  element in the candidate is contained in some element of the target.\n\no A candidate nonarray is contained in a target array if and only if\n  the candidate is contained in some element of the target.\n\no A candidate object is contained in a target object if and only if for\n  each key in the candidate there is a key with the same name in the\n  target and the value associated with the candidate key is contained\n  in the value associated with the target key.\n\nOtherwise, the candidate value is not contained in the target document.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html\n\n','mysql> SET @j = \'{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}\';\nmysql> SET @j2 = \'1\';\nmysql> SELECT JSON_CONTAINS(@j, @j2, \'$.a\');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, \'$.a\') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, \'$.b\');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, \'$.b\') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\n\nmysql> SET @j2 = \'{\"d\": 4}\';\nmysql> SELECT JSON_CONTAINS(@j, @j2, \'$.a\');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, \'$.a\') |\n+-------------------------------+\n|                             0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, \'$.c\');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, \'$.c\') |\n+-------------------------------+\n|                             1 |\n+-------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html'),(416,'JSON_CONTAINS_PATH',30,'Syntax:\nJSON_CONTAINS_PATH(json_doc, one_or_all, path[, path] ...)\n\nReturns 0 or 1 to indicate whether a JSON document contains data at a\ngiven path or paths. Returns NULL if any argument is NULL. An error\noccurs if the json_doc argument is not a valid JSON document, any path\nargument is not a valid path expression, or one_or_all is not \'one\' or\n\'all\'.\n\nTo check for a specific value at a path, use JSON_CONTAINS() instead.\n\nThe return value is 0 if no specified path exists within the document.\nOtherwise, the return value depends on the one_or_all argument:\n\no \'one\': 1 if at least one path exists within the document, 0\n  otherwise.\n\no \'all\': 1 if all paths exist within the document, 0 otherwise.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html\n\n','mysql> SET @j = \'{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}\';\nmysql> SELECT JSON_CONTAINS_PATH(@j, \'one\', \'$.a\', \'$.e\');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, \'one\', \'$.a\', \'$.e\') |\n+---------------------------------------------+\n|                                           1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, \'all\', \'$.a\', \'$.e\');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, \'all\', \'$.a\', \'$.e\') |\n+---------------------------------------------+\n|                                           0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, \'one\', \'$.c.d\');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, \'one\', \'$.c.d\') |\n+----------------------------------------+\n|                                      1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, \'one\', \'$.a.d\');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, \'one\', \'$.a.d\') |\n+----------------------------------------+\n|                                      0 |\n+----------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html'),(417,'JSON_EXTRACT',30,'Syntax:\nJSON_EXTRACT(json_doc, path[, path] ...)\n\nReturns data from a JSON document, selected from the parts of the\ndocument matched by the path arguments. Returns NULL if any argument is\nNULL or no paths locate a value in the document. An error occurs if the\njson_doc argument is not a valid JSON document or any path argument is\nnot a valid path expression.\n\nThe return value consists of all values matched by the path arguments.\nIf it is possible that those arguments could return multiple values,\nthe matched values are autowrapped as an array, in the order\ncorresponding to the paths that produced them. Otherwise, the return\nvalue is the single matched value.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html\n\n','mysql> SELECT JSON_EXTRACT(\'[10, 20, [30, 40]]\', \'$[1]\');\n+--------------------------------------------+\n| JSON_EXTRACT(\'[10, 20, [30, 40]]\', \'$[1]\') |\n+--------------------------------------------+\n| 20                                         |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT(\'[10, 20, [30, 40]]\', \'$[1]\', \'$[0]\');\n+----------------------------------------------------+\n| JSON_EXTRACT(\'[10, 20, [30, 40]]\', \'$[1]\', \'$[0]\') |\n+----------------------------------------------------+\n| [20, 10]                                           |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT(\'[10, 20, [30, 40]]\', \'$[2][*]\');\n+-----------------------------------------------+\n| JSON_EXTRACT(\'[10, 20, [30, 40]]\', \'$[2][*]\') |\n+-----------------------------------------------+\n| [30, 40]                                      |\n+-----------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html'),(418,'->',30,'Syntax:\ncolumn->path\n\nIn MySQL 5.7.9 and later, the -> operator serves as an alias for the\nJSON_EXTRACT() function when used with two arguments, a column\nidentifier on the left and a JSON path on the right that is evaluated\nagainst the JSON document (the column value). You can use such\nexpressions in place of column identifiers wherever they occur in SQL\nstatements.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html\n\n','mysql> SELECT c, JSON_EXTRACT(c, \"$.id\"), g\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY JSON_EXTRACT(c, \"$.name\");\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)\n\nmysql> SELECT c, c->\"$.id\", g\n     > FROM jemp\n     > WHERE c->\"$.id\" > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+\n| c                             | c->\"$.id\" | g    |\n+-------------------------------+-----------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 |\n+-------------------------------+-----------+------+\n3 rows in set (0.00 sec)\n\nmysql> ALTER TABLE jemp ADD COLUMN n INT;\nQuery OK, 0 rows affected (0.68 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql> UPDATE jemp SET n=1 WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"4\", \"name\": \"Betty\"}  | \"4\"       |    4 |    1 |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n3 rows in set (0.00 sec)\n\nmysql> DELETE FROM jemp WHERE c->\"$.id\" = \"4\";\nQuery OK, 1 row affected (0.04 sec)\n\nmysql> SELECT c, c->\"$.id\", g, n\n     > FROM jemp\n     > WHERE JSON_EXTRACT(c, \"$.id\") > 1\n     > ORDER BY c->\"$.name\";\n+-------------------------------+-----------+------+------+\n| c                             | c->\"$.id\" | g    | n    |\n+-------------------------------+-----------+------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} | \"3\"       |    3 | NULL |\n| {\"id\": \"2\", \"name\": \"Wilma\"}  | \"2\"       |    2 | NULL |\n+-------------------------------+-----------+------+------+\n2 rows in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html'),(419,'->>',30,'Syntax:\ncolumn->>path\n\nThis is an improved, unquoting extraction operator available in MySQL\n5.7.13 and later. Whereas the -> operator simply extracts a value, the\n->> operator in addition unquotes the extracted result. In other words,\ngiven a JSON column value column and a path expression path, the\nfollowing three expressions return the same value:\n\no JSON_UNQUOTE( JSON_EXTRACT(column, path) )\n\no JSON_UNQUOTE(column -> path)\n\no column->>path\n\nThe ->> operator can be used wherever JSON_UNQUOTE(JSON_EXTRACT())\nwould be allowed. This includes (but is not limited to) SELECT lists,\nWHERE and HAVING clauses, and ORDER BY and GROUP BY clauses.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html\n\n','mysql> SELECT * FROM jemp WHERE g > 2;\n+-------------------------------+------+\n| c                             | g    |\n+-------------------------------+------+\n| {\"id\": \"3\", \"name\": \"Barney\"} |    3 |\n| {\"id\": \"4\", \"name\": \"Betty\"}  |    4 |\n+-------------------------------+------+\n2 rows in set (0.01 sec)\n\nmysql> SELECT c->\'$.name\' AS name\n    ->     FROM jemp WHERE g > 2;\n+----------+\n| name     |\n+----------+\n| \"Barney\" |\n| \"Betty\"  |\n+----------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT JSON_UNQUOTE(c->\'$.name\') AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT c->>\'$.name\' AS name\n    ->     FROM jemp WHERE g > 2;\n+--------+\n| name   |\n+--------+\n| Barney |\n| Betty  |\n+--------+\n2 rows in set (0.00 sec)\n\nmysql> CREATE TABLE tj10 (a JSON, b INT);\nQuery OK, 0 rows affected (0.26 sec)\n\nmysql> INSERT INTO tj10 VALUES\n    ->     (\'[3,10,5,\"x\",44]\', 33),\n    ->     (\'[3,10,5,17,[22,\"y\",66]]\', 0);\nQuery OK, 2 rows affected (0.04 sec)\nRecords: 2  Duplicates: 0  Warnings: 0\n\nmysql> SELECT a->\"$[3]\", a->\"$[4][1]\" FROM tj10;\n+-----------+--------------+\n| a->\"$[3]\" | a->\"$[4][1]\" |\n+-----------+--------------+\n| \"x\"       | NULL         |\n| 17        | \"y\"          |\n+-----------+--------------+\n2 rows in set (0.00 sec)\n\nmysql> SELECT a->>\"$[3]\", a->>\"$[4][1]\" FROM tj10;\n+------------+---------------+\n| a->>\"$[3]\" | a->>\"$[4][1]\" |\n+------------+---------------+\n| x          | NULL          |\n| 17         | y             |\n+------------+---------------+\n2 rows in set (0.00 sec)\n\nmysql> EXPLAIN SELECT c->>\'$.name\' AS name\n    ->     FROM jemp WHERE g > 2\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: jemp\n   partitions: NULL\n         type: range\npossible_keys: i\n          key: i\n      key_len: 5\n          ref: NULL\n         rows: 2\n     filtered: 100.00\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Note\n   Code: 1003\nMessage: /* select#1 */ select\njson_unquote(json_extract(`jtest`.`jemp`.`c`,\'$.name\')) AS `name` from\n`jtest`.`jemp` where (`jtest`.`jemp`.`g` > 2)\n1 row in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html'),(420,'JSON_KEYS',30,'Syntax:\nJSON_KEYS(json_doc[, path])\n\nReturns the keys from the top-level value of a JSON object as a JSON\narray, or, if a path argument is given, the top-level keys from the\nselected path. Returns NULL if any argument is NULL, the json_doc\nargument is not an object, or path, if given, does not locate an\nobject. An error occurs if the json_doc argument is not a valid JSON\ndocument or the path argument is not a valid path expression or\ncontains a * or ** wildcard.\n\nThe result array is empty if the selected object is empty. If the\ntop-level value has nested subobjects, the return value does not\ninclude keys from those subobjects.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html\n\n','mysql> SELECT JSON_KEYS(\'{\"a\": 1, \"b\": {\"c\": 30}}\');\n+---------------------------------------+\n| JSON_KEYS(\'{\"a\": 1, \"b\": {\"c\": 30}}\') |\n+---------------------------------------+\n| [\"a\", \"b\"]                            |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS(\'{\"a\": 1, \"b\": {\"c\": 30}}\', \'$.b\');\n+----------------------------------------------+\n| JSON_KEYS(\'{\"a\": 1, \"b\": {\"c\": 30}}\', \'$.b\') |\n+----------------------------------------------+\n| [\"c\"]                                        |\n+----------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html'),(421,'JSON_SEARCH',30,'Syntax:\nJSON_SEARCH(json_doc, one_or_all, search_str[, escape_char[, path]\n...])\n\nReturns the path to the given string within a JSON document. Returns\nNULL if any of the json_doc, search_str, or path arguments are NULL; no\npath exists within the document; or search_str is not found. An error\noccurs if the json_doc argument is not a valid JSON document, any path\nargument is not a valid path expression, one_or_all is not \'one\' or\n\'all\', or escape_char is not a constant expression.\n\nThe one_or_all argument affects the search as follows:\n\no \'one\': The search terminates after the first match and returns one\n  path string. It is undefined which match is considered first.\n\no \'all\': The search returns all matching path strings such that no\n  duplicate paths are included. If there are multiple strings, they are\n  autowrapped as an array. The order of the array elements is\n  undefined.\n\nWithin the search_str search string argument, the % and _ characters\nwork as for the LIKE operator: % matches any number of characters\n(including zero characters), and _ matches exactly one character.\n\nTo specify a literal % or _ character in the search string, precede it\nby the escape character. The default is \\ if the escape_char argument\nis missing or NULL. Otherwise, escape_char must be a constant that is\nempty or one character.\n\nFor more information about matching and escape character behavior, see\nthe description of LIKE in\nhttps://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.htm\nl. For escape character handling, a difference from the LIKE behavior\nis that the escape character for JSON_SEARCH() must evaluate to a\nconstant at compile time, not just at execution time. For example, if\nJSON_SEARCH() is used in a prepared statement and the escape_char\nargument is supplied using a ? parameter, the parameter value might be\nconstant at execution time, but is not at compile time.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html\n\n','mysql> SET @j = \'[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]\';\n\nmysql> SELECT JSON_SEARCH(@j, \'one\', \'abc\');\n+-------------------------------+\n| JSON_SEARCH(@j, \'one\', \'abc\') |\n+-------------------------------+\n| \"$[0]\"                        |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'abc\');\n+-------------------------------+\n| JSON_SEARCH(@j, \'all\', \'abc\') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'ghi\');\n+-------------------------------+\n| JSON_SEARCH(@j, \'all\', \'ghi\') |\n+-------------------------------+\n| NULL                          |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'10\');\n+------------------------------+\n| JSON_SEARCH(@j, \'all\', \'10\') |\n+------------------------------+\n| \"$[1][0].k\"                  |\n+------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$\');\n+-----------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$\') |\n+-----------------------------------------+\n| \"$[1][0].k\"                             |\n+-----------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[*]\');\n+--------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[*]\') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$**.k\');\n+---------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$**.k\') |\n+---------------------------------------------+\n| \"$[1][0].k\"                                 |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[*][0].k\');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[*][0].k\') |\n+-------------------------------------------------+\n| \"$[1][0].k\"                                     |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[1]\');\n+--------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[1]\') |\n+--------------------------------------------+\n| \"$[1][0].k\"                                |\n+--------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[1][0]\');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'10\', NULL, \'$[1][0]\') |\n+-----------------------------------------------+\n| \"$[1][0].k\"                                   |\n+-----------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'abc\', NULL, \'$[2]\');\n+---------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'abc\', NULL, \'$[2]\') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'%a%\');\n+-------------------------------+\n| JSON_SEARCH(@j, \'all\', \'%a%\') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"]            |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'%b%\');\n+-------------------------------+\n| JSON_SEARCH(@j, \'all\', \'%b%\') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"]  |\n+-------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'%b%\', NULL, \'$[0]\');\n+---------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'%b%\', NULL, \'$[0]\') |\n+---------------------------------------------+\n| \"$[0]\"                                      |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'%b%\', NULL, \'$[2]\');\n+---------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'%b%\', NULL, \'$[2]\') |\n+---------------------------------------------+\n| \"$[2].x\"                                    |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'%b%\', NULL, \'$[1]\');\n+---------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'%b%\', NULL, \'$[1]\') |\n+---------------------------------------------+\n| NULL                                        |\n+---------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'%b%\', \'\', \'$[1]\');\n+-------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'%b%\', \'\', \'$[1]\') |\n+-------------------------------------------+\n| NULL                                      |\n+-------------------------------------------+\n\nmysql> SELECT JSON_SEARCH(@j, \'all\', \'%b%\', \'\', \'$[3]\');\n+-------------------------------------------+\n| JSON_SEARCH(@j, \'all\', \'%b%\', \'\', \'$[3]\') |\n+-------------------------------------------+\n| \"$[3].y\"                                  |\n+-------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-search-functions.html'),(422,'JSON_APPEND',30,'Syntax:\nJSON_APPEND(json_doc, path, val[, path, val] ...)\n\nAppends values to the end of the indicated arrays within a JSON\ndocument and returns the result. This function was renamed to\nJSON_ARRAY_APPEND() in MySQL 5.7.9; the alias JSON_APPEND() is now\ndeprecated in MySQL 5.7, and is removed in MySQL 8.0.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(423,'JSON_ARRAY_APPEND',30,'Syntax:\nJSON_ARRAY_APPEND(json_doc, path, val[, path, val] ...)\n\nAppends values to the end of the indicated arrays within a JSON\ndocument and returns the result. Returns NULL if any argument is NULL.\nAn error occurs if the json_doc argument is not a valid JSON document\nor any path argument is not a valid path expression or contains a * or\n** wildcard.\n\nThe path-value pairs are evaluated left to right. The document produced\nby evaluating one pair becomes the new value against which the next\npair is evaluated.\n\nIf a path selects a scalar or object value, that value is autowrapped\nwithin an array and the new value is added to that array. Pairs for\nwhich the path does not identify any value in the JSON document are\nignored.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SET @j = \'[\"a\", [\"b\", \"c\"], \"d\"]\';\nmysql> SELECT JSON_ARRAY_APPEND(@j, \'$[1]\', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, \'$[1]\', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"]        |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, \'$[0]\', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, \'$[0]\', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"]      |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, \'$[1][0]\', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, \'$[1][0]\', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"]         |\n+-------------------------------------+\n\nmysql> SET @j = \'{\"a\": 1, \"b\": [2, 3], \"c\": 4}\';\nmysql> SELECT JSON_ARRAY_APPEND(@j, \'$.b\', \'x\');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, \'$.b\', \'x\')  |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, \'$.c\', \'y\');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, \'$.c\', \'y\')    |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\n\nmysql> SET @j = \'{\"a\": 1}\';\nmysql> SELECT JSON_ARRAY_APPEND(@j, \'$\', \'z\');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, \'$\', \'z\') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"]                 |\n+---------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(424,'JSON_ARRAY_INSERT',30,'Syntax:\nJSON_ARRAY_INSERT(json_doc, path, val[, path, val] ...)\n\nUpdates a JSON document, inserting into an array within the document\nand returning the modified document. Returns NULL if any argument is\nNULL. An error occurs if the json_doc argument is not a valid JSON\ndocument or any path argument is not a valid path expression or\ncontains a * or ** wildcard or does not end with an array element\nidentifier.\n\nThe path-value pairs are evaluated left to right. The document produced\nby evaluating one pair becomes the new value against which the next\npair is evaluated.\n\nPairs for which the path does not identify any array in the JSON\ndocument are ignored. If a path identifies an array element, the\ncorresponding value is inserted at that element position, shifting any\nfollowing values to the right. If a path identifies an array position\npast the end of an array, the value is inserted at the end of the\narray.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SET @j = \'[\"a\", {\"b\": [1, 2]}, [3, 4]]\';\nmysql> SELECT JSON_ARRAY_INSERT(@j, \'$[1]\', \'x\');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, \'$[1]\', \'x\') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]]  |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, \'$[100]\', \'x\');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, \'$[100]\', \'x\') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"]    |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, \'$[1].b[0]\', \'x\');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, \'$[1].b[0]\', \'x\') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]]       |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, \'$[2][1]\', \'y\');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, \'$[2][1]\', \'y\') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]]     |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, \'$[0]\', \'x\', \'$[2][1]\', \'y\');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, \'$[0]\', \'x\', \'$[2][1]\', \'y\') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]]                  |\n+----------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(425,'JSON_INSERT',30,'Syntax:\nJSON_INSERT(json_doc, path, val[, path, val] ...)\n\nInserts data into a JSON document and returns the result. Returns NULL\nif any argument is NULL. An error occurs if the json_doc argument is\nnot a valid JSON document or any path argument is not a valid path\nexpression or contains a * or ** wildcard.\n\nThe path-value pairs are evaluated left to right. The document produced\nby evaluating one pair becomes the new value against which the next\npair is evaluated.\n\nA path-value pair for an existing path in the document is ignored and\ndoes not overwrite the existing document value. A path-value pair for a\nnonexisting path in the document adds the value to the document if the\npath identifies one of these types of values:\n\no A member not present in an existing object. The member is added to\n  the object and associated with the new value.\n\no A position past the end of an existing array. The array is extended\n  with the new value. If the existing value is not an array, it is\n  autowrapped as an array, then extended with the new value.\n\nOtherwise, a path-value pair for a nonexisting path in the document is\nignored and has no effect.\n\nFor a comparison of JSON_INSERT(), JSON_REPLACE(), and JSON_SET(), see\nthe discussion of JSON_SET().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SET @j = \'{ \"a\": 1, \"b\": [2, 3]}\';\nmysql> SELECT JSON_INSERT(@j, \'$.a\', 10, \'$.c\', \'[true, false]\');\n+----------------------------------------------------+\n| JSON_INSERT(@j, \'$.a\', 10, \'$.c\', \'[true, false]\') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_INSERT(@j, \'$.a\', 10, \'$.c\', CAST(\'[true, false]\' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, \'$.a\', 10, \'$.c\', CAST(\'[true, false]\' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]}                        |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(426,'JSON_MERGE',30,'Syntax:\nJSON_MERGE(json_doc, json_doc[, json_doc] ...)\n\nMerges two or more JSON documents. Synonym for JSON_MERGE_PRESERVE();\ndeprecated in MySQL 5.7.22 and subject to removal in a future release.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SELECT JSON_MERGE(\'[1, 2]\', \'[true, false]\');\n+---------------------------------------+\n| JSON_MERGE(\'[1, 2]\', \'[true, false]\') |\n+---------------------------------------+\n| [1, 2, true, false]                   |\n+---------------------------------------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\n  Level: Warning\n   Code: 1287\nMessage: \'JSON_MERGE\' is deprecated and will be removed in a future release. \\\n Please use JSON_MERGE_PRESERVE/JSON_MERGE_PATCH instead\n1 row in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(427,'JSON_MERGE_PATCH()',30,'Syntax:\nJSON_MERGE_PATCH(json_doc, json_doc[, json_doc] ...)\n\nPerforms an RFC 7396 (https://tools.ietf.org/html/rfc7396) compliant\nmerge of two or more JSON documents and returns the merged result,\nwithout preserving members having duplicate keys. Raises an error if at\nleast one of the documents passed as arguments to this function is not\nvalid.\n\n*Note*:\n\nFor an explanation and example of the differences between this function\nand JSON_MERGE_PRESERVE(), see\nhttps://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.htm\nl#json-merge-patch-json-merge-preserve-compared.\n\nJSON_MERGE_PATCH() performs a merge as follows:\n\n1. If the first argument is not an object, the result of the merge is\n   the same as if an empty object had been merged with the second\n   argument.\n\n2. If the second argument is not an object, the result of the merge is\n   the second argument.\n\n3. If both arguments are objects, the result of the merge is an object\n   with the following members:\n\n  o All members of the first object which do not have a corresponding\n    member with the same key in the second object.\n\n  o All members of the second object which do not have a corresponding\n    key in the first object, and whose value is not the JSON null\n    literal.\n\n  o All members with a key that exists in both the first and the second\n    object, and whose value in the second object is not the JSON null\n    literal. The values of these members are the results of recursively\n    merging the value in the first object with the value in the second\n    object.\n\nFor additional information, see\nhttps://dev.mysql.com/doc/refman/5.7/en/json.html#json-normalization.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SELECT JSON_MERGE_PATCH(\'[1, 2]\', \'[true, false]\');\n+---------------------------------------------+\n| JSON_MERGE_PATCH(\'[1, 2]\', \'[true, false]\') |\n+---------------------------------------------+\n| [true, false]                               |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH(\'{\"name\": \"x\"}\', \'{\"id\": 47}\');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH(\'{\"name\": \"x\"}\', \'{\"id\": 47}\') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                         |\n+-------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH(\'1\', \'true\');\n+-------------------------------+\n| JSON_MERGE_PATCH(\'1\', \'true\') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH(\'[1, 2]\', \'{\"id\": 47}\');\n+------------------------------------------+\n| JSON_MERGE_PATCH(\'[1, 2]\', \'{\"id\": 47}\') |\n+------------------------------------------+\n| {\"id\": 47}                               |\n+------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH(\'{ \"a\": 1, \"b\":2 }\',\n     >     \'{ \"a\": 3, \"c\":4 }\');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH(\'{ \"a\": 1, \"b\":2 }\',\'{ \"a\": 3, \"c\":4 }\') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4}                                  |\n+-----------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH(\'{ \"a\": 1, \"b\":2 }\',\'{ \"a\": 3, \"c\":4 }\',\n     >     \'{ \"a\": 5, \"d\":6 }\');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH(\'{ \"a\": 1, \"b\":2 }\',\'{ \"a\": 3, \"c\":4 }\',\'{ \"a\": 5, \"d\":6 }\') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}                                              |\n+-------------------------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH(\'{\"a\":1, \"b\":2}\', \'{\"b\":null}\');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH(\'{\"a\":1, \"b\":2}\', \'{\"b\":null}\') |\n+--------------------------------------------------+\n| {\"a\": 1}                                         |\n+--------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PATCH(\'{\"a\":{\"x\":1}}\', \'{\"a\":{\"y\":2}}\');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH(\'{\"a\":{\"x\":1}}\', \'{\"a\":{\"y\":2}}\') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}}                            |\n+----------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(428,'JSON_MERGE_PRESERVE()',30,'Syntax:\nJSON_MERGE_PRESERVE(json_doc, json_doc[, json_doc] ...)\n\nMerges two or more JSON documents and returns the merged result.\nReturns NULL if any argument is NULL. An error occurs if any argument\nis not a valid JSON document.\n\nMerging takes place according to the following rules. For additional\ninformation, see\nhttps://dev.mysql.com/doc/refman/5.7/en/json.html#json-normalization.\n\no Adjacent arrays are merged to a single array.\n\no Adjacent objects are merged to a single object.\n\no A scalar value is autowrapped as an array and merged as an array.\n\no An adjacent array and object are merged by autowrapping the object as\n  an array and merging the two arrays.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SELECT JSON_MERGE_PRESERVE(\'[1, 2]\', \'[true, false]\');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE(\'[1, 2]\', \'[true, false]\') |\n+------------------------------------------------+\n| [1, 2, true, false]                            |\n+------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE(\'{\"name\": \"x\"}\', \'{\"id\": 47}\');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE(\'{\"name\": \"x\"}\', \'{\"id\": 47}\') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"}                            |\n+----------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE(\'1\', \'true\');\n+----------------------------------+\n| JSON_MERGE_PRESERVE(\'1\', \'true\') |\n+----------------------------------+\n| [1, true]                        |\n+----------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE(\'[1, 2]\', \'{\"id\": 47}\');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE(\'[1, 2]\', \'{\"id\": 47}\') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}]                          |\n+---------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE(\'{ \"a\": 1, \"b\": 2 }\',\n     >    \'{ \"a\": 3, \"c\": 4 }\');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE(\'{ \"a\": 1, \"b\": 2 }\',\'{ \"a\": 3, \"c\":4 }\') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4}                                |\n+--------------------------------------------------------------+\n\nmysql> SELECT JSON_MERGE_PRESERVE(\'{ \"a\": 1, \"b\": 2 }\',\'{ \"a\": 3, \"c\": 4 }\',\n     >    \'{ \"a\": 5, \"d\": 6 }\');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE(\'{ \"a\": 1, \"b\": 2 }\',\'{ \"a\": 3, \"c\": 4 }\',\'{ \"a\": 5, \"d\": 6 }\') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}                                         |\n+----------------------------------------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(429,'JSON_REMOVE',30,'Syntax:\nJSON_REMOVE(json_doc, path[, path] ...)\n\nRemoves data from a JSON document and returns the result. Returns NULL\nif any argument is NULL. An error occurs if the json_doc argument is\nnot a valid JSON document or any path argument is not a valid path\nexpression or is $ or contains a * or ** wildcard.\n\nThe path arguments are evaluated left to right. The document produced\nby evaluating one path becomes the new value against which the next\npath is evaluated.\n\nIt is not an error if the element to be removed does not exist in the\ndocument; in that case, the path does not affect the document.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SET @j = \'[\"a\", [\"b\", \"c\"], \"d\"]\';\nmysql> SELECT JSON_REMOVE(@j, \'$[1]\');\n+-------------------------+\n| JSON_REMOVE(@j, \'$[1]\') |\n+-------------------------+\n| [\"a\", \"d\"]              |\n+-------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(430,'JSON_REPLACE',30,'Syntax:\nJSON_REPLACE(json_doc, path, val[, path, val] ...)\n\nReplaces existing values in a JSON document and returns the result.\nReturns NULL if any argument is NULL. An error occurs if the json_doc\nargument is not a valid JSON document or any path argument is not a\nvalid path expression or contains a * or ** wildcard.\n\nThe path-value pairs are evaluated left to right. The document produced\nby evaluating one pair becomes the new value against which the next\npair is evaluated.\n\nA path-value pair for an existing path in the document overwrites the\nexisting document value with the new value. A path-value pair for a\nnonexisting path in the document is ignored and has no effect.\n\nFor a comparison of JSON_INSERT(), JSON_REPLACE(), and JSON_SET(), see\nthe discussion of JSON_SET().\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SET @j = \'{ \"a\": 1, \"b\": [2, 3]}\';\nmysql> SELECT JSON_REPLACE(@j, \'$.a\', 10, \'$.c\', \'[true, false]\');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, \'$.a\', 10, \'$.c\', \'[true, false]\') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(431,'JSON_SET',30,'Syntax:\nJSON_SET(json_doc, path, val[, path, val] ...)\n\nInserts or updates data in a JSON document and returns the result.\nReturns NULL if any argument is NULL or path, if given, does not locate\nan object. An error occurs if the json_doc argument is not a valid JSON\ndocument or any path argument is not a valid path expression or\ncontains a * or ** wildcard.\n\nThe path-value pairs are evaluated left to right. The document produced\nby evaluating one pair becomes the new value against which the next\npair is evaluated.\n\nA path-value pair for an existing path in the document overwrites the\nexisting document value with the new value. A path-value pair for a\nnonexisting path in the document adds the value to the document if the\npath identifies one of these types of values:\n\no A member not present in an existing object. The member is added to\n  the object and associated with the new value.\n\no A position past the end of an existing array. The array is extended\n  with the new value. If the existing value is not an array, it is\n  autowrapped as an array, then extended with the new value.\n\nOtherwise, a path-value pair for a nonexisting path in the document is\nignored and has no effect.\n\nThe JSON_SET(), JSON_INSERT(), and JSON_REPLACE() functions are\nrelated:\n\no JSON_SET() replaces existing values and adds nonexisting values.\n\no JSON_INSERT() inserts values without replacing existing values.\n\no JSON_REPLACE() replaces only existing values.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SET @j = \'{ \"a\": 1, \"b\": [2, 3]}\';\nmysql> SELECT JSON_SET(@j, \'$.a\', 10, \'$.c\', \'[true, false]\');\n+-------------------------------------------------+\n| JSON_SET(@j, \'$.a\', 10, \'$.c\', \'[true, false]\') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"}    |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, \'$.a\', 10, \'$.c\', \'[true, false]\');\n+----------------------------------------------------+\n| JSON_INSERT(@j, \'$.a\', 10, \'$.c\', \'[true, false]\') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"}        |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, \'$.a\', 10, \'$.c\', \'[true, false]\');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, \'$.a\', 10, \'$.c\', \'[true, false]\') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]}                              |\n+-----------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(432,'JSON_UNQUOTE',30,'Syntax:\nJSON_UNQUOTE(json_val)\n\nUnquotes JSON value and returns the result as a utf8mb4 string. Returns\nNULL if the argument is NULL. An error occurs if the value starts and\nends with double quotes but is not a valid JSON string literal.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html\n\n','mysql> SET @j = \'\"abc\"\';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j    | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc              |\n+-------+------------------+\nmysql> SET @j = \'[1, 2, 3]\';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j        | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3]        |\n+-----------+------------------+\n\nmysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n|            |\n+------------+\n\nmysql> SELECT JSON_UNQUOTE(\'\"\\\\t\\\\u0032\"\');\n+------------------------------+\n| JSON_UNQUOTE(\'\"\\\\t\\\\u0032\"\') |\n+------------------------------+\n|       2                           |\n+------------------------------+\n\nmysql> SET @@sql_mode = \'NO_BACKSLASH_ESCAPES\';\nmysql> SELECT JSON_UNQUOTE(\'\"\\\\t\\\\u0032\"\');\n+------------------------------+\n| JSON_UNQUOTE(\'\"\\\\t\\\\u0032\"\') |\n+------------------------------+\n| \\t\\u0032                     |\n+------------------------------+\n\nmysql> SELECT JSON_UNQUOTE(\'\"\\t\\u0032\"\');\n+----------------------------+\n| JSON_UNQUOTE(\'\"\\t\\u0032\"\') |\n+----------------------------+\n|       2                         |\n+----------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-modification-functions.html'),(433,'JSON_DEPTH',30,'Syntax:\nJSON_DEPTH(json_doc)\n\nReturns the maximum depth of a JSON document. Returns NULL if the\nargument is NULL. An error occurs if the argument is not a valid JSON\ndocument.\n\nAn empty array, empty object, or scalar value has depth 1. A nonempty\narray containing only elements of depth 1 or nonempty object containing\nonly member values of depth 1 has depth 2. Otherwise, a JSON document\nhas depth greater than 2.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html\n\n','mysql> SELECT JSON_DEPTH(\'{}\'), JSON_DEPTH(\'[]\'), JSON_DEPTH(\'true\');\n+------------------+------------------+--------------------+\n| JSON_DEPTH(\'{}\') | JSON_DEPTH(\'[]\') | JSON_DEPTH(\'true\') |\n+------------------+------------------+--------------------+\n|                1 |                1 |                  1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH(\'[10, 20]\'), JSON_DEPTH(\'[[], {}]\');\n+------------------------+------------------------+\n| JSON_DEPTH(\'[10, 20]\') | JSON_DEPTH(\'[[], {}]\') |\n+------------------------+------------------------+\n|                      2 |                      2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH(\'[10, {\"a\": 20}]\');\n+-------------------------------+\n| JSON_DEPTH(\'[10, {\"a\": 20}]\') |\n+-------------------------------+\n|                             3 |\n+-------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html'),(434,'JSON_LENGTH',30,'Syntax:\nJSON_LENGTH(json_doc[, path])\n\nReturns the length of a JSON document, or, if a path argument is given,\nthe length of the value within the document identified by the path.\nReturns NULL if any argument is NULL or the path argument does not\nidentify a value in the document. An error occurs if the json_doc\nargument is not a valid JSON document or the path argument is not a\nvalid path expression or contains a * or ** wildcard.\n\nThe length of a document is determined as follows:\n\no The length of a scalar is 1.\n\no The length of an array is the number of array elements.\n\no The length of an object is the number of object members.\n\no The length does not count the length of nested arrays or objects.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html\n\n','mysql> SELECT JSON_LENGTH(\'[1, 2, {\"a\": 3}]\');\n+---------------------------------+\n| JSON_LENGTH(\'[1, 2, {\"a\": 3}]\') |\n+---------------------------------+\n|                               3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH(\'{\"a\": 1, \"b\": {\"c\": 30}}\');\n+-----------------------------------------+\n| JSON_LENGTH(\'{\"a\": 1, \"b\": {\"c\": 30}}\') |\n+-----------------------------------------+\n|                                       2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH(\'{\"a\": 1, \"b\": {\"c\": 30}}\', \'$.b\');\n+------------------------------------------------+\n| JSON_LENGTH(\'{\"a\": 1, \"b\": {\"c\": 30}}\', \'$.b\') |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html'),(435,'JSON_TYPE',30,'Syntax:\nJSON_TYPE(json_val)\n\nReturns a utf8mb4 string indicating the type of a JSON value. This can\nbe an object, an array, or a scalar type, as shown here:\n\nmysql> SET @j = \'{\"a\": [10, true]}\';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT        |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, \'$.a\'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, \'$.a\')) |\n+------------------------------------+\n| ARRAY                              |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, \'$.a[0]\'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, \'$.a[0]\')) |\n+---------------------------------------+\n| INTEGER                               |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, \'$.a[1]\'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, \'$.a[1]\')) |\n+---------------------------------------+\n| BOOLEAN                               |\n+---------------------------------------+\n\nJSON_TYPE() returns NULL if the argument is NULL:\n\nmysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL            |\n+-----------------+\n\nAn error occurs if the argument is not a valid JSON value:\n\nmysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required.\n\nFor a non-NULL, non-error result, the following list describes the\npossible JSON_TYPE() return values:\n\no Purely JSON types:\n\n  o OBJECT: JSON objects\n\n  o ARRAY: JSON arrays\n\n  o BOOLEAN: The JSON true and false literals\n\n  o NULL: The JSON null literal\n\no Numeric types:\n\n  o INTEGER: MySQL TINYINT, SMALLINT, MEDIUMINT and INT and BIGINT\n    scalars\n\n  o DOUBLE: MySQL DOUBLE FLOAT scalars\n\n  o DECIMAL: MySQL DECIMAL and NUMERIC scalars\n\no Temporal types:\n\n  o DATETIME: MySQL DATETIME and TIMESTAMP scalars\n\n  o DATE: MySQL DATE scalars\n\n  o TIME: MySQL TIME scalars\n\no String types:\n\n  o STRING: MySQL utf8 character type scalars: CHAR, VARCHAR, TEXT,\n    ENUM, and SET\n\no Binary types:\n\n  o BLOB: MySQL binary type scalars: BINARY, VARBINARY, BLOB\n\n  o BIT: MySQL BIT scalars\n\no All other types:\n\n  o OPAQUE (raw bits)\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html'),(436,'JSON_VALID',30,'Syntax:\nJSON_VALID(val)\n\nReturns 0 or 1 to indicate whether a value is valid JSON. Returns NULL\nif the argument is NULL.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html\n\n','mysql> SELECT JSON_VALID(\'{\"a\": 1}\');\n+------------------------+\n| JSON_VALID(\'{\"a\": 1}\') |\n+------------------------+\n|                      1 |\n+------------------------+\nmysql> SELECT JSON_VALID(\'hello\'), JSON_VALID(\'\"hello\"\');\n+---------------------+-----------------------+\n| JSON_VALID(\'hello\') | JSON_VALID(\'\"hello\"\') |\n+---------------------+-----------------------+\n|                   0 |                     1 |\n+---------------------+-----------------------+\n','https://dev.mysql.com/doc/refman/5.7/en/json-attribute-functions.html'),(437,'JSON_PRETTY',30,'JSON_PRETTY(json_val)\n\nProvides pretty-printing of JSON values similar to that implemented in\nPHP and by other languages and database systems. The value supplied\nmust be a JSON value or a valid string representation of a JSON value.\nExtraneous whitespaces and newlines present in this value have no\neffect on the output. For a NULL value, the function returns NULL. If\nthe value is not a JSON document, or if it cannot be parsed as one, the\nfunction fails with an error.\n\nFormatting of the output from this function adheres to the following\nrules:\n\no Each array element or object member appears on a separate line,\n  indented by one additional level as compared to its parent.\n\no Each level of indentation adds two leading spaces.\n\no A comma separating individual array elements or object members is\n  printed before the newline that separates the two elements or\n  members.\n\no The key and the value of an object member are separated by a colon\n  followed by a space (\': \').\n\no An empty object or array is printed on a single line. No space is\n  printed between the opening and closing brace.\n\no Special characters in string scalars and key names are escaped\n  employing the same rules used by the JSON_QUOTE() function.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/json-utility-functions.html\n\n','mysql> SELECT JSON_PRETTY(\'123\'); # scalar\n+--------------------+\n| JSON_PRETTY(\'123\') |\n+-------Y(\'[\"a\",1,{\"key1\":\n             \"value1\"},\"5\",     \"7                   | Size |\n+------------------------------------------------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": s0aa9429562:26-57\n1 row in set (0.00 sec)\n\nmysql> SELECT GTID_ccurs first. However, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS()\napplie, key_str)\n\nDecrypts an encrypted string using the given algorithm and key string,\nand returns the resulting plaintext as a bkey_str length − 11, in\nbytestax:\nASYMMETRIC_VERIFY(algorithm, digest_str, sig_str, pub_key_str,\ndigest_type)\n\nVerifies whether the signature string matcy setting environment variables. See\nhttps://dev.mysql.com/doc/rSyntax:\nCREATE_DIGEST(digest_type, str)\n\nCreates a digest from the given string using the given digest type, and\nreturns theof non-NULL values of expr in the rows\nretrieved by a SELECT statement. The result is a BIGINT value.\n\nIf there are no matchi| square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\n\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes \n     > FROM t3 GROUP BY o_id;\n+------+---------------------+\.7/en/group-by-functions.html\n\n','mysql> SELECT student_name, f expr (the square root of\nVAR_SAMP().\n\nIf there are no matchthe function result is not checked for the\nONLY_FULL_GROUP_BY SQL mode.\n\nFor example, if name is a nonindexed column, the folnctions\nin the absence of a GROUP BY clause:\n\nmysql> SELECT na does not\nunderstand its argument.\n\nURL: https://dev.mysql.co005A55CAFFFEFA9089\'));\n        -> \'fdfe::5a55:caff:fefa:9089\'\nmysql> SELECT INET6_NTOA(UNHEX(\'0A000509\'));\n        -> \'10.0.5.9\'\n','https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html'),(477,'IS_IPV4',32,'Syntax:\nIS_IPV4(expr)\n/5.7/en/miscellaneous-functions.html'),(481,'MASTER_POS_WAIT',3\nSLEEP(duration)\n\nSleeps (pauses) for the number of seconds gedictability is\nrequired, UUID values should be generated some other way.\n\nUUID() returns a value that conforms to UUID versi(server_startup_time_in_seconds << 24)\n+ incremented_variable++;\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-s6 and\nwill be removed in a future version of MySQL. If it is neman/5.7/en/identifier-mapping.htmTION, COMMENT, ENABLE /\nDISABLE, and DO clauses is exactly the same as when used with CREATE\nEVENT. (See [HELP CREATE EVENT].)g.html. Key rotation\nrequires the SUPER privilege.\n\nALTER INST6 (1 MB). (Bug\n#29574)\n\n*Note*:\n\nWAIT is parsed but otherwise ignored. This keyword currently has no\neffect, and is intendlter_specification [, alter_specification] ...]\n    [partition_mes | ALL}\n  | OPTIMIZE PARTITION {partition_names | ALL}\n  |  the same syntax for ADD and CHANGE as for CREATE TABLE. For mort have a\ntablespace and a data file with the same name, or an undo log file and\na tablespace with the same name.\n\nOn 32-bit -----------+----------------+\n2 rows in set (0.03 sec)\n\nSee h/dev.mysql.com/doc/refman/5.7/en/create-database.html'),(500,'CRt in the same schema. In\ngeneral, the rules governing event names are the same as those for\nnames of stored routines. See\nhttew log file group named logfile_group having\na single UNDO file named \'undo_file\'. A CREATE LOGFILE GROUP statement\nhas one gine is not specified as NDB or NDBCLUSTER, the CREATE LOGFILE GROUP\nstatement appears to succeed but actually fails to create   |                   11 | CLUSTER_NODE=3 |\n| lg_3               |                   11 | CLUSTER_NODE=4 |\n+------------------ps://dev.mysql.com/doc/refman/5.7/en/stored-objects-security.htmleturns.\n\nFor each OUT or INOUT parameter, pass a user-defined variable in the\nCALL statement that invokes the procedure so thr, performs an operation\nusing an SQL function, and returns theext error occurs (ER_SP_BADSELECT).\n\nUSE statements within stored routines are not permitted. When a routine\nis invoked, an iody:\n    Valid SQL routine statement\n\nThese statements create stored routines. By default, a routine is\nassociated with the dred\nroutine name, regardless of);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SELECT @a;\n+ statements, unless\nthe body consists of a single RETURN statemeIf you define a routine in strict SQL\nmode but invoke it in nonstrict mode, assignment of arguments to\nroutine parameters does sql.servers table. The table columns are\nServer_name, Host, Db, l_name (key_part,...)\n      [MATCH FULL | MATCH PARTIAL | MATCHartition_definition:\n    SUBPARTITION logical_name\n        [[SAL,\n    PRIMARY KEY(category, id)\n)   ENGINE=INNODB;\n\nCREATE TABLE customer (\n    id INT NOT NULL,\n    PRIMARY KEY (id)\n)ed tablespace. It can hold multiple tables,\nand supports all tawarning is issued\nby the MySQL Server when any such rounding isgnored by NDB---defines the block size for the tablespace data file.\n  Values can be specified in bytes or kilobytes. For exampxtent is filled\n  with as much data as that extent can contain before another extent is\n  used. In theory, up to 65,535 (64K)  used.\n\no WAIT: Currently ignored by MySQL; reserved for possi tablespace. Before dropping an NDB Cluster tablespace you must also\n  remove all its data files using one or more ALTER TABLESysql> CREATE TABLE t2 (c1 INT PRIMARY KEY) TABLESPACE ts1 ROW_FORMAT=COMPACT;\n\nmysql> CREATE TABLE t3 (c1 INT PRIMARY KEY) TAB, a tablespace and associated data file are created on each NDB\nntax.html.\n\nCREATE TRIGGER requires the TRIGGER privilege for the table associated\nwith the trigger. If the DEFINER clause isme as CREATE VIEW. If the view does\nexist, CREATE OR REPLACE VIEW replaces it.\n\nFor information about restrictions on view usiew name\nwith the appropriate database name.\n\nWithin a databaiate a trigger with a view.\n\no Aliases for column names in the SELECT statement are checked agrity.\n\nIf the DEFINER clause is omitted, the default definer ih the privileges of the DEFINER account. If the characteristic is\n  INVOKER, the function runs with the privileges determined bertain other constructs that make a\nview nonupdatable.\n\nA generated column in a view is considered updatable because it is\npDROP privilege on the database. DROP SCHEMA is a synonym\nfor DROatically to the routine creator when the\nroutine is created and dropped from the creator when the routine is\ndropped. See\nhttr each table, it removes the table\ndefinition and all table dattps://dev.mysql.com/doc/refman/5.7/en/drop-table.html'),(519,'DRe-per-table tablespaces.\n\nInnoDB Example\n\nThis example demonstrates how to drop an InnoDB general tablespace. The\ngeneral t by name which nonexisting views it was\nunable to drop, but also drops all views in the list that do exist.\n\n*Note*:\n\nIn MySrefman/5.7/en/metadata-locking.html.\n\nTo execute RENAME TABLE, ust drop and\nre-create the foreign keys for them to function pros (.par) file is\n  unaffected.\n\no The TRUNCATE TABLE statement does not invoke ON DELETE triggers.\n\nURL: https://dev.mysql.to single-table deletes,\nbut not multi-table deletes.\n\nMultiple-Table Syntax\n\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n    t /doc/refman/5.7/en/handler.html'),(528,'INSERT',34,'Syntax:\nINS and subpartitions accept new rows. The PARTITION option\ntakes a list of the comma-separated names of one or more partitions or\ease.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/insert-dele_name must be given as a literal string. The tagname in the\nopLINES or IGNORE number ROWS clause causes the first\nnumber rows in the XML file to be skipped. It is analogous to the LOAD\nDATA statement\'s IGNORE ... LINES lt values,\njust as happens for INSERT. You cannot refer to values from the current\nrow and use them in the new row. If you usen include UNION statements and subqueries. See [HELP UNION], and\other clauses. MySQL\nmay ignore the clauses. MySQL does not require FROM DUAL if no tables\nare referenced.\n\nURL: https://develumns in the UNION result take into account the values retrievedtitions is not updated, whether it satisfies the\nwhere_condition start a new transaction.\n\no COMMIT commits the current transaction, making its changes permanent.\n\no ROLLBACK rolls back thtional tables\n  that are visible to other transactions; the tras of START TRANSACTION for\ninitiating a transaction. START TRANSACTION is standard SQL syntax, is\nthe recommended way to start its changes permanent.\n\no ROLLBACK rolls back the current transtill\n  modify or lock temporary tables.\n\n  MySQL enables extaninuefsL rdxSiTl.com/doc/refman/5.7/en/replicat  the value of the slave_net_timeout system variable), and\n  Slaiple network\ninterfaces, and determines which of the slave\'s nplication_applier) has no I/O\nthread, only a SQL thread. For this channel, the relay logs are not\npreserved when the SQL threais\nfound that the slave has recorded or committed transactions 's own ID and the server was\nstarted with the --replicate-same-server-id option enabled, an error\nresults.\n\nThe master info d.\n\nFor more information, see\nhttps://dev.mysql.com/doc/refman/5.7/en/replication-solutions-switch.ht\nml.\n\nIf you are usinlist)\n  | REPLICATE_DO_TABLE = (tbl_list)\n  | REPLICATE_IGNORE_TABLE = (tbl_list)\n  | REPLICATE_WILD_DO_TABLE = (wild_tbl_lis --replicate-rewrite-db.\n\nThe precise effects of REPLICATE_DO_DB and REPLICATE_IGNORE_DB filters\nare dependent on whether stan in the following example,\nwhich creates two rewrite-db rules, one rewriting database dbA to dbB,\nand one rewriting database atement does\nnot change the values of gtid_executed or gtid_purgstarted immediately\n  after issuing RESET SLAVE due to a server crash or deliberate\n  restart, the connection parameters are lduces an error.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/set-global-sql-slave-skip-counter.html\n\n','','https://dev.mysqles you to name which\nreplication channel the statement appliesQL_BEFORE_GTIDS\ncauses the slave SQL thread to process transactions until it has\nreached the first transaction whose GTID is lthe worker threads\n\no mysqld shuts down unexpectedly\n\nUse thVE SQL_THREAD on the slave prior/refman/5.7/en/replication-channels.html for\nmore information.\n\nWhen using statement-based replication: changing the master wt of the SQL\nstatement. The text must represent a single stateme prepared statement name. If the\nprepared statement contains any parameter markers, you must supply a\nUSING clause that listsprocedures and functions,\ntriggers, and events). A compound stat .a iaaL2  r 'E0.'ry\-Er\n\no In the event that a table oG startup does not occur if the server is\nstarted with the --ski'),(600,'SET CHARACTER SET',3,'Syntax:\nSET {CHARACTER SET | CHARTn] [LIMIT n]\nSHOW PROFILES\nSHOW RELAYLOG EVENTS [IN \'log_nameg.000015 |    724935 |\n| binlog.000016 |    733481 |\n+---------------+-----------+\n\nURL: https://dev.mysql.com/doc/refman/5.ions,\nas discussed in\nhttps://dev.mysql.com/doc/refman/5.7/en/HOW COLUMNS FROM mytable FROM mydb;\nSHOW COLUMNS FROM mydb.mytable;\n\nThe optional FULL keyword causes the output to include tcolumns is unique, each column can\n  still hold multiple occurr         |                |\n| CountryCode | char(3)  | NO   | MUL |         |                |\n| District    | char(20) | NO   column.\n\n  If more than one of the Key values applies to a givSCHEMA is a synonym for SHOW CREATE\nDATABASE.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/show-create-database.html\n\n','mO_ZERO_DATE,\n                      ERROR_FOR_DIVISION_BY_ZERO,\n                      NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTIOoc\n            sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,refman/5.7/en/show-create-table.html'),(617,'SHOW CREATE TRIGGER',3,'Syntax:\nSHOW CREATE TRIGGER trigger_name\n\nThis statementhbases.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/showG was defined at MySQL compilation time. If WITH_DEBUG was\n  notand rw-locks outside of the\nbuffer pool that have caused at least one OS-level wait.\n\nUse SHOW ENGINE PERFORMANCE_SCHEMA STATeen a Performance\nSchema configuration parameter and a SHOW ENGINE value. For example,\nevents_| NdbCall               | created=0, free=0, sizeof=16           n other respects, they are similar to SHOW WARNINGS and\nwarning_count. In particular, SHOW ERRORS cannot display information\nfme\n\nThis statement is similar to SHOW PROCEDURE CODE but for stored\nfunctions. See [HELP SHOW PROCEDURE CODE].\n\nURL: https:ontext, such as within a stored procedure that executes with\ndef the index. If the index is the primary key, the name is\n  always PRIMARY.\n\no Seq_in_index\n\n  The column sequence number inv.mysql.com/doc/refman/5.7/en/show-index.html\n\n','','https://dev.mysql.com/doc/refman/5.7/en/show-index.html'),(630,'SHOW MASTAM\n Status: ACTIVE\n   Type: STORAGE ENGINE\nLibrary: NULL\nLice--+----------------------------------------+\n4 rows in set (0.00 sec)\n','https://dev.mysql.com/doc/refman/5.7/en/show-procedurTS\n  | SOURCE\n  | SWAPS\n}\n\nThe SHOW PROFILE and SHOW PROFILES statements display profiling\ninformation that indicates resotion\n\no BLOCK IO displays counts for block input and output operations\n\no CONTEXT SWITCHES displays counts for voluntary and involuntary\n  context switches\n\no CPU displays user and syst   | 0.000006 |\n+--------------------+----------+\n4 rows in seton slaves currently registered with the\nmaster.\n\nSHOW SLAVE H slave, as generated on the\n  slave and found in the slave\'s auto.cnf file.\n\nURL: https://dev.mysql.com/doc/refman/5.7/en/sh9429562\n             Master_Info_File: /var/mysqld.2/data/masteE clause, if present, indicates which variable\nnames to match. A WHERE clause can be given to select rows using more\ngeneral conditions, as discussed in\nhttps://dev.mysql.com/doc/refman/5.7/en/extended-show.html.\n\nSHOW re general conditions, as discussed in\nhttps://dev.mysql.com/doc**************\n             Trigger: ins_sum\n               Event: INSERT\n               Table: account\n           Statementystem variable\n  values. These are the values used to initialize the corresponding\n  session variables for new connections to MySQL. If a variable has no\n  global value, no value is displaynt session. Warnings are generated for DML\nstatements such as INtps://dev.mysql.com/doc/refman/5.7/en/binlog.html'),(649,'CACHE INDEX',3,'Syntax:\nCACHE INDEX {\n      tbl_index_list [, tbl_index_list] ...\n    | tbl_name PARTITION (partition_list)\n  }\n  within stored functions or\ntriggers. However, you may use FLUSH in stored procedures, so long as\nthese are not called from stt thread is returned by\nthe CONNECTION_ID() function.\n\nKILL permits an optional CONNECTION or QUERY modifier:\n\no KILL CONNEsql.com/doc/refman/5.7/en/load-index.html'),(653,'RESET',3,'Syntis more often used to obtain information about table\nstructure, whereas EXPLAIN is used to obtain a query execution plan\n(that\ndatabase be initialized with help topic information (see\nhttps://dev.mysql.com/doc/refman/5.7/en/server-side-help-support.htmloc/refman/5.7/en/merge-storage-engine.html\n\n','mysql> CREATE TA/*!40000 ALTER TABLE `help_topic` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `innodb_index_stats`
--

DROP TABLE IF EXISTS `innodb_index_stats`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `innodb_index_stats` (
  `database_name` varchar(64) COLLATE utf8_bin NOT NULL,
  `table_name` varchar(199) COLLATE utf8_bin NOT NULL,
  `index_name` varchar(64) COLLATE utf8_bin NOT NULL,
  `last_update` timestamp NOT NU  `stat_name` varchar(64) COLLATE utf8_bin NOT NULL,
  `stat_value` bigint(20) unsigned NOT NULL,
  `sample_size` bigint(20) unsigned DEFAULT NULL,
  `stat_description` varchar(1024) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`database_name`,`table_name`,`index_name`,`stat_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSISTENT=0;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `innodb_index_stats`
--

LOCK TABLES `innodb_index_stats` WRITE;
/*!40000 ALTER TABLE `innodb_index_stats` DISABLE KEYS */;
INSERT INTO `innodb_index_stats` VALUES ('hbnb_dev_db','amenities','PRIMARY','2020-05-08 15:27:11','n_diff_pfx01',13,1,'id'),('hbnb_dev_db','amenities','PRIMARY','2020-05-08 15:27:11','n_leaf_bnb_dev_db','places','city_id','2020-05-08 15:27:27','n_diff_pfx0id,id'),('hbnb_dev_db','reviews''),('hbtn_0d_2','force_name','GEN_CLUST_INDEX','2020-03-05 20:14:49','n_leaf_pages',1,NULL,'Number of leaf pages in the index'),('hbtn_0d_2','force_name','GEN_CLUST_INDEX','2020-03-05 20:14:49:38','n_diff_pfx01',10,1,'id'),('hbtn_0d_tvshows','tv_shows','PRIMARY','2020-03-06 00:50:38','n_leaf_pages',1,NULL,'Number of leaLUST_INDEX','2020-03-18 14:51:01','size',1,NULL,'Number of pages pfx01',3,1,'id'),('hbtn_0d_usa','states','id','2020-03-05 20:17:00','n_leaf_pages',1,NULL,'Number of leaf pages in the index'),('hbtn_0d_usa','states','id','2020-03-05 20:17:00','size',1,NULL,fx01',15,1,'id'),('hbtn_0e_101_usa','cities','PRIMARY','2020-03-2RIMARY','2020-03-28 20:46:20','size',1,NULL,'Number of pages in the index'),('hbtn_0e_4_usa','cities','state_id','2020-03-28 20:n_leaf_pages',1,NULL,'Number of leaf pages in the index'),('hbtn_0e_6_usa','states','id','2020-03-29 19:53:24','size',1,NULL,'Nu/*!40000 ALTER TABLE `innodb_index_stats` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `innodb_table_stats`
--

DROP TABLE IF EXISTS `innodb_table_stats`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `innodb_table_stats` (
  `database_name` varchar(64) COLLATE utf8_bin NOT NULL,
  `table_name` varchar(199) COLLATE utf8_bin NOT NULL,
  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON   `n_rows` bigint(20) unsigned NOT NULL,
  `clustered_index_size` bigint(20) unsigned NOT NULL,
  `sum_of_other_index_sizes` bigint(20) unsigned NOT NULL,
  PRIMARY KEY (`database_name`,`) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin STATS_PERSI/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `innodb_table_stats`
--

LOCK TABLES `innodb_table_stats` WRITE;
/*!40000 ALTER TABLE `innodb_table_stats` DISABLE KEYS */;
INSERT INTO `innodb_table_stats` VALUES ('hbnb_dev_db','amenities','2020-05-08 15:27:11',13,1,0),('hbnb_dev_db','cities','2020-05-08 15:27:01',32,1,1),('hbnb_dev_db','place_amenity','2020-05-17 16:57:40',2,1,1),('hbnb_dev_db/*!40000 ALTER TABLE `innodb_table_stats` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ndb_binlog_index`
--

DROP TABLE IF EXISTS `ndb_binlog_index`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ndb_binlog_index` (
  `Position` bigint(20) unsigned NOT NULL,
  `File` varchar(255) NOT NULL,
  `epoch` bigint(20) unsigned NOT NULL,
  `inserts` int(10) unsigned NOT NULL,
  `updates` int(10) unsigned NOT NULL,
  `deletes` int(10) unsigned NOT NULL,
  `schemaops` int(10) unsigned N  `orig_server_id` int(10) unsigned NOT NULL,
  `orig_epoch` bigint(20) unsigned NOT NULL,
  `gci` int(10) unsigned NOT NUL  `next_position` bigint(20) unsigned NOT NULL,
  `next_file` varchar(255) NOT N  PRIMARY KEY (`epoch`,`orig_server_id`,`orig_epoch`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_clien
--
-- Dumping data for table `ndb_binlog_index`
--

LOCK TABLES `ndb_binlog_index` WRITE;
/*!40000 ALTER TABLE `ndb_binlog_index` DISABLE KEYS */;
/*!40000 ALTER TABLE `ndb_binlog_index` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `plugin`
--

DROP TABLE IF EXISTS `plugin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `plugin` (
  `name` varchar(64) NOT NULL DEFAULT '',
  `dl` varchar(128) NOT NULL DEFAULT '',
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='MySQL plugins';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `plugin`
--

LOCK TABLES `plugin` WRITE;
/*!40000 ALTER TABLE `plugin` DISABLE KEYS */;
INSERT INTO `plugin` VALUES ('auth_socket','auth_socket.so');
/*!40000 ALTER TABLE `plugin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `proc`
--

DROP TABLE IF EXISTS `proc`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `proc` (
  `db` char(64) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `name` char(64) NOT NULL DEFAULT '',
  `type` enum('FUNCTION','PROCEDURE') NOT NULL,
  `specific_name` char(64) NOT NULL DEFAULT '',
  `language` enum('SQL') NOT NULL DEFAULT 'SQL',
  `sql_data_access` enum('CONTAINS_SQL','NO_SQL','READS_SQL_DATA','MODIFIES_SQL_DATA') NOT NULL DEFAULT 'CONTAINS_SQL',
  `is_deterministic` enum('YES','NO') NOT NULL DEFAULT 'NO',
  `security_type` enum('INVOKER','DEFINER') NOT NULL DEFAULT 'DEFINER',
  `param_list` blob NOT NULL,
  `returns` longblob NOT NULL,
  `body` longblob NOT NULL,
  `definer` char(93) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `modified` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `sql_mode` set('REAL_AS_FLOAT','PIPES_AS_CONCAT','ANSI_QUOTES','IGNORE_SPACE','NOT_USED','ONLY_FULL_GROUP_BY','NO_UNSIGNED_SUBTRACTION','NO_DIR_IN_CREATE','POSTGRESQL','ORACLE','MSSQL','DB2'  `comment` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `character_set_client` char(32) CHARACTER SET utf8 COLLATE utf  `collation_connection` char(32) CHARACTER SET utf8 COLLATE utf8  `db_collation` char(32) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `body_utf8` longblob,
  PRIMARY KEY (`db`,`name`,`type`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COMMENT='Stored Procedures'/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `proc`
--

LOCK TABLES `proc` WRITE;
/*!40000 ALTER TABLE `proc` DISABLE KEYS */;
/*!40000 ALTER TABLE `proc` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `procs_priv`
--

DROP TABLE IF EXISTS `procs_priv`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `procs_priv` (
  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Routine_name` char(64) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `Routine_type` enum('FUNCTION','PROCEDURE') COLLATE utf8_bin NOT NULL,
  `Grantor` char(93) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Proc_priv` set('Execute','Alter Routine','Grant') CHARACTER SET utf8 NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Host`,`Db`,`User`,`Routine_name`,`Routine_type`),
  KEY `Grantor` (`Grantor`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Procedure privileges';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `procs_priv`
--

LOCK TABLES `procs_priv` WRITE;
/*!40000 ALTER TABLE `procs_priv` DISABLE KEYS */;
/*!40000 ALTER TABLE `procs_priv` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `proxies_priv`
--

DROP TABLE IF EXISTS `proxies_priv`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `proxies_priv` (
  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',
  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Proxied_host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Proxied_user` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',
  `With_grant` tinyint(1) NOT NULL DEFAULT '0',
  `Grantor` char(93) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`Host`,`User`,`Proxied_host`,`Proxied_user`),
  KEY `Grantor` (`Grantor`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='User proxy privileges';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `proxies_priv`
--

LOCK TABLES `proxies_priv` WRITE;
/*!40000 ALTER TABLE `proxies_priv` DISABLE KEYS */;
INSERT INTO `proxies_priv` VALUES ('localhost','root','','',1,'boot@connecting host','0000-00-00 00:00:00');
/*!40000 ALTER TABLE `proxies_priv` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `server_cost`
--

DROP TABLE IF EXISTS `server_cost`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `server_cost` (
  `cost_name` varchar(64) NOT NULL,
  `cost_value` float DEFAULT NULL,
  `last_update` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `comment` varchar(1024) DEFAULT NULL,
  PRIMARY KEY (`cost_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `server_cost`
--

LOCK TABLES `server_cost` WRITE;
/*!40000 ALTER TABLE `server_cost` DISABLE KEYS */;
INSERT INTO `server_cost` VALUES ('disk_temptable_create_cost',NULL,'2020-03-02 17:11:41',NULL),('disk_temptable_row_cost',NULL,'2020-03-02 17:11:41',NULL),('key_compare_cost',NULL,'2020-03-02 17:11:41',NULL),('memory_temptable_create_cost',NULL,'2020-03-02 17:11:41',NULL),('memory_temptable_row_cost',NULL,'2020-03-02 17:11:41',NULL),('row_evaluate_cost',NULL,'2020-03-02 17:11:41',NULL);
/*!40000 ALTER TABLE `server_cost` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `servers`
--

DROP TABLE IF EXISTS `servers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `servers` (
  `Server_name` char(64) NOT NULL DEFAULT '',
  `Host` char(64) NOT NULL DEFAULT '',
  `Db` char(64) NOT NULL DEFAULT '',
  `Username` char(64) NOT NULL DEFAULT '',
  `Password` char(64) NOT NULL DEFAULT '',
  `Port` int(4) NOT NULL DEFAULT '0',
  `Socket` char(64) NOT NULL DEFAULT '',
  `Wrapper` char(64) NOT NULL DEFAULT '',
  `Owner` char(64) NOT NULL DEFAULT '',
  PRIMARY KEY (`Server_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='MySQL Foreign Servers table';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `servers`
--

LOCK TABLES `servers` WRITE;
/*!40000 ALTER TABLE `servers` DISABLE KEYS */;
/*!40000 ALTER TABLE `servers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `slave_master_info`
--

/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE IF NOT EXISTS `slave_master_info` (
  `Number_of_lines` int(10) unsigned NOT NULL COMMENT 'Number of lines in the file.',
  `Master_log_name` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The name of the master binary log currently being read from the master.',
  `Master_log_pos` bigint(20) unsigned NOT NULL COMMENT 'The master log position of the last read event.',
  `Host` char(64) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT 'The host name of the  `User_name` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT '  `User_password` text CHARACTER SET utf8 COLLATE utf8_bin COMME  `Port` int(10) unsigned NOT NULL COMMENT 'The network port use  `Connect_retry` int(10) unsigned NOT NULL COMMENT 'The period   `Enabled_ssl` tinyint(1) NOT NULL COMMENT 'Indicates whether t  `Ssl_ca` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The  `Ssl_capath` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT   `Ssl_cert` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'T  `Ssl_cipher` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT   `Ssl_key` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The name of the SSL key file.',
  `Ssl_verify_server_cert` tinyi   `Bind` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'Displ  `Ignored_server_ids` text CHARACTER SET utf8 COLLATE utf8_bin C  `Uuid` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'The m  `Retry_count` bigint(20) unsigned NOT NULL COMMENT 'Number of   `Ssl_crl` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT 'Th  `Ssl_crlpath` text CHARACTER SET utf8 COLLATE utf8_bin COMMENT  `Enabled_auto_position` tinyint(1) NOT NULL COMMENT 'Indicates  `Channel_name` char(64) NOT NULL COMMENT 'The channel on which the slave is connected to a source. Used in Multisource Replica   PRIMARY KEY (`Channel_name`)
) ENGINE=InnoDB DEFAULT CHARSET=/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `slave_relay_log_info`
--

/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE IF NOT EXISTS `slave_relay_log_info` (
  `Number_of_lines` int(10) unsi  `Relay_log_name` text CHARACTER SET utf8 COLLATE utf8_bin NOT   `Relay_log_pos` bigint(20) unsigned NOT NULL COMMENT 'The relay log position of the last executed event.',
  `Master_log_name` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'The   `Master_log_pos` bigint(20) unsigned NOT NULL COMMENT 'The mast  `Sql_delay` int(11) NOT NULL COMMENT 'The number of seconds th  `Number_of_workers` int(10) unsigned NOT NULL,
  `Id` int(10) unsigned NOT NULL COMMENT 'Internal Id that uniqu   PRIMARY KEY (`Channel_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Relay Log Information';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `slave_worker_info`
--

DROP TABLE IF EXISTS `slave_worker_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `slave_worker_info` (
  `Id` int(10) unsigned NOT NULL,
  `Relay_log_name` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Relay_log_pos` bigint(20) unsigned NOT NULL,
  `Master_log_name` text CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `Master_log_pos` bigint(20) unsigned NOT NULL,
  `Checkpoint_relay_log_name` text CHARACTER SET utf8 COLLATE ut  `Checkpoint_relay_log_pos` bigint(20) unsigned NOT NULL,
  `Checkpoint_master_log_name` text CHARACTER SET utf8 COLLATE u  `Checkpoint_master_log_pos` bigint(20) unsigned NOT NULL,
  `Checkpoint_seqno` int(10) unsigned NOT NULL,
  `Checkpoint_group_size` int(10  `Checkpoint_group_bitmap` blob NOT NULL,
  `Channel_name` char(64) NOT NULL COMMENT 'The channel on which  PRIMARY KEY (`Channel_name`,`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `slave_worker_info`
--

LOCK TABLES `slave_worker_info` WRITE;
/*!40000 ALTER TABLE `slave_worker_info` DISABLE KEYS */;
/*!40000 ALTER TABLE `slave_worker_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tables_priv`
--

DROP TABLE IF EXISTS `tables_priv`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tables_priv` (
  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Db` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Table_name` char(64) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Grantor` char(93) COLLATE utf  `Timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPD  `Table_priv` set('Select','Insert','Update','Delete','Create','Drop','Grant','References','Index','Alter','Create View','Show   `Column_priv` set('Select','Insert','Update','References') CHAR  PRIMARY KEY (`Host`,`Db`,`User`,`Table_name`),
  KEY `Grantor` (`Grantor`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Table privileges';
/*!40101 SET character_set_clien
--
-- Dumping data for table `tables_priv`
--

LOCK TABLES `tables_priv` WRITE;
/*!40000 ALTER TABLE `tables_priv` DISABLE KEYS */;
INSERT INTO `tables_priv` VALUES ('localhost','mysql','mysql.session','user','boot@connecting ho/*!40000 ALTER TABLE `tables_priv` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `time_zone`
--

DROP TABLE IF EXISTS `time_zone`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `time_zone` (
  `Time_zone_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `Use_leap_seconds` enum('Y','N') NOT NULL DEFAULT 'N',
  PRIMARY KEY (`Time_zone_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zones';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `time_zone`
--

LOCK TABLES `time_zone` WRITE;
/*!40000 ALTER TABLE `time_zone` DISABLE KEYS */;
/*!40000 ALTER TABLE `time_zone` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `time_zone_leap_second`
--

DROP TABLE IF EXISTS `time_zone_leap_second`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `time_zone_leap_second` (
  `Transition_time` bigint(20) NOT NULL,
  `Correction` int(11) NOT NULL,
  PRIMARY KEY (`Transition_time`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Leap seconds information for time zones';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `time_zone_leap_second`
--

LOCK TABLES `time_zone_leap_second` WRITE;
/*!40000 ALTER TABLE `time_zone_leap_second` DISABLE KEYS */;
/*!40000 ALTER TABLE `time_zone_leap_second` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `time_zone_name`
--

DROP TABLE IF EXISTS `time_zone_name`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `time_zone_name` (
  `Name` char(64) NOT NULL,
  `Time_zone_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone names';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `time_zone_name`
--

LOCK TABLES `time_zone_name` WRITE;
/*!40000 ALTER TABLE `time_zone_name` DISABLE KEYS */;
/*!40000 ALTER TABLE `time_zone_name` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `time_zone_transition`
--

DROP TABLE IF EXISTS `time_zone_transition`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `time_zone_transition` (
  `Time_zone_id` int(10) unsigned NOT NULL,
  `Transition_time` bigint(20) NOT NULL,
  `Transition_type_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Time_zone_id`,`Transition_time`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone transitions';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `time_zone_transition`
--

LOCK TABLES `time_zone_transition` WRITE;
/*!40000 ALTER TABLE `time_zone_transition` DISABLE KEYS */;
/*!40000 ALTER TABLE `time_zone_UNLOCK TABLES;

--
-- Table structure for table `ti-
DROP TABLE IF EXISTS `time_zone_transition_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_clienC    `Offset` int(11) NOT NULL DEFAULT '0',
  `Is_DST` tinyint(3) unsigned NOT NULL DEFAULT '0',
  `Abbreviation` char(8) NOT NULL DEFAULT '',
  PRIMARY KEY (`Time_zone_id`,`Transition_type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 STATS_PERSISTENT=0 COMMENT='Time zone transition types';
/*!40101 SET character_set_clien
--
-- Dumping data for table `time_zone_transition_type`
--

LOCK TABLES `time_zone_transition_type` WRITE;
/*!40000 ALTER TABLE `time_zone_transition_type` DISABLE KEYS */;
/*!40000 ALTER TABLE `time_zone_transition_type` ENABLE KEYS */;UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT '',
  `User` char(32) COLLATE utf8_bin NOT NULL DEFAULT '',
  `Select_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Insert_priv` enum('N','Y') CH  `Update_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAUL  `Delete_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAUL  `Create_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Drop_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT   `Reload_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAUL  `Shutdown_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFA  `Process_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAU  `File_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT   `Grant_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `References_priv` enum('N','Y'   `Alter_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Show_db_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAU  `Super_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT   `Create_tmp_table_priv` enum('N','Y') CHARACTER SET utf8 NOT N  `Lock_tables_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL D  `Execute_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAU  `Repl_slave_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DE  `Repl_client_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Create_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL D  `Show_view_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEF  `Create_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Alter_routine_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  `Create_user_priv` enum('N','Y  `Event_priv` enum('N','Y') CHAR  `Trigger_priv` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAU  `Create_tablespace_priv` enum('N','Y') CHARACTER SET utf8 NOT   `ssl_type` enum('','ANY','X509','SPECIFIED') CHARACTER SET utf  `ssl_cipher` blob NOT NULL,
  `x509_issuer` blob NOT NULL,
  `x509_subject` blob NOT NULL,
  `max_questions` int(11) unsign  `max_updates` int(11) unsigned NOT NULL DEFAULT '0',
  `max_connections` int(11) unsi  `max_user_connections` int(11) unsigned NOT NULL DEFAULT '0',
  `plugin` char(64) COLLATE utf8_bin NOT NULL DEFAULT 'mysql_nati  `authentication_string` text COLLATE utf8_bin,
  `password_expired` enum('N','Y') CHARACTER SET utf8 NOT NULL D  `password_last_changed` timestamp NULL DEFAULT NULL,
  `password_lifetime` smallint(5) unsigned DEFAULT NULL,
  `account_locked` enum('N','Y') CHARACTER SET utf8 NOT NULL DEFAULT 'N',
  PRIMARY KEY (`Host`,`User`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES ('localhost','root','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'auth_socket','','N','2020-03-02 17:11:42',NULL,'N'),('localhost','mysql.session','N','N','N','N','N','N',/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `general_log`
--

/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE IF NOT EXISTS `general_log` (
  `event_time` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `user_host` mediumtext NOT NULL,
  `thread_id` bigint(21) unsigned NOT NULL,
  `server_id` int(10) unsigned NOT NULL,
  `command_type` varchar(64) NOT NULL,
  `argument` mediumblob NOT NULL
) ENGINE=CSV DEFAULT CHARSET=utf8 COMMENT='General log';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `slow_log`
--

/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE IF NOT EXISTS `slow_log` (
  `start_time` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6),
  `user_host` mediumtext NOT NULL,
  `query_time` time(6) NOT NULL,
  `lock_time` time(6) NOT NULL,
  `rows_sent` int(11) NOT NULL,
  `rows_examined` int(11) NOT NULL,
  `db` varchar(512) NOT NULL,
  `last_insert_id` int(11) NOT NULL,
  `insert_id` int(11) NOT NULL,
  `server_id` int(10) unsigned NOT NULL,
  `sql_text` mediumblob NOT NULL,
  `thread_id` bigint(21) unsigned NOT NULL
) ENGINE=CSV DEFAULT CHARSET=utf/*!40101 SET character_set_client = @saved_cs_client */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!4/*!40101 SET CHARACTER_SET_CLIEN/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-04-17 19:05:58
